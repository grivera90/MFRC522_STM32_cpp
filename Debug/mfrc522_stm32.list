
mfrc522_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004040  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d0  0800414c  0800414c  0001414c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800491c  0800491c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800491c  0800491c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800491c  0800491c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800491c  0800491c  0001491c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08004924  08004924  00014924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800492c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  20000070  0800499c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  0800499c  00020258  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c98d  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020ab  00000000  00000000  0002ca26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a58  00000000  00000000  0002ead8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b8  00000000  00000000  0002f530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000193b9  00000000  00000000  0002fee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b5b6  00000000  00000000  000492a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000878af  00000000  00000000  00054857  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dc106  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002df4  00000000  00000000  000dc15c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004134 	.word	0x08004134

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004134 	.word	0x08004134

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 faa6 	bl	80006a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f824 	bl	80001a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8c8 	bl	80002ec <MX_GPIO_Init>
  MX_SPI1_Init();
 800015c:	f000 f866 	bl	800022c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000160:	f000 f89a 	bl	8000298 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(RESET_PWRDOWN_GPIO_Port, RESET_PWRDOWN_Pin, GPIO_PIN_RESET);
 8000164:	2200      	movs	r2, #0
 8000166:	2101      	movs	r1, #1
 8000168:	480b      	ldr	r0, [pc, #44]	; (8000198 <main+0x4c>)
 800016a:	f000 fd9e 	bl	8000caa <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800016e:	2200      	movs	r2, #0
 8000170:	2110      	movs	r1, #16
 8000172:	480a      	ldr	r0, [pc, #40]	; (800019c <main+0x50>)
 8000174:	f000 fd99 	bl	8000caa <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000178:	2064      	movs	r0, #100	; 0x64
 800017a:	f000 faf3 	bl	8000764 <HAL_Delay>
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800017e:	2201      	movs	r2, #1
 8000180:	2110      	movs	r1, #16
 8000182:	4806      	ldr	r0, [pc, #24]	; (800019c <main+0x50>)
 8000184:	f000 fd91 	bl	8000caa <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RESET_PWRDOWN_GPIO_Port, RESET_PWRDOWN_Pin, GPIO_PIN_SET);
 8000188:	2201      	movs	r2, #1
 800018a:	2101      	movs	r1, #1
 800018c:	4802      	ldr	r0, [pc, #8]	; (8000198 <main+0x4c>)
 800018e:	f000 fd8c 	bl	8000caa <HAL_GPIO_WritePin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  main_cpp();
 8000192:	f002 f939 	bl	8002408 <main_cpp>
 8000196:	e7fc      	b.n	8000192 <main+0x46>
 8000198:	40010c00 	.word	0x40010c00
 800019c:	40010800 	.word	0x40010800

080001a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b090      	sub	sp, #64	; 0x40
 80001a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001a6:	f107 0318 	add.w	r3, r7, #24
 80001aa:	2228      	movs	r2, #40	; 0x28
 80001ac:	2100      	movs	r1, #0
 80001ae:	4618      	mov	r0, r3
 80001b0:	f003 fb8c 	bl	80038cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001b4:	1d3b      	adds	r3, r7, #4
 80001b6:	2200      	movs	r2, #0
 80001b8:	601a      	str	r2, [r3, #0]
 80001ba:	605a      	str	r2, [r3, #4]
 80001bc:	609a      	str	r2, [r3, #8]
 80001be:	60da      	str	r2, [r3, #12]
 80001c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001c2:	2301      	movs	r3, #1
 80001c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001cc:	2300      	movs	r3, #0
 80001ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001d0:	2301      	movs	r3, #1
 80001d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001d4:	2302      	movs	r3, #2
 80001d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001de:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001e4:	f107 0318 	add.w	r3, r7, #24
 80001e8:	4618      	mov	r0, r3
 80001ea:	f000 fd77 	bl	8000cdc <HAL_RCC_OscConfig>
 80001ee:	4603      	mov	r3, r0
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d001      	beq.n	80001f8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001f4:	f000 f8fc 	bl	80003f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001f8:	230f      	movs	r3, #15
 80001fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001fc:	2302      	movs	r3, #2
 80001fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000200:	2300      	movs	r3, #0
 8000202:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000204:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000208:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800020a:	2300      	movs	r3, #0
 800020c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800020e:	1d3b      	adds	r3, r7, #4
 8000210:	2102      	movs	r1, #2
 8000212:	4618      	mov	r0, r3
 8000214:	f000 ffe2 	bl	80011dc <HAL_RCC_ClockConfig>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d001      	beq.n	8000222 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800021e:	f000 f8e7 	bl	80003f0 <Error_Handler>
  }
}
 8000222:	bf00      	nop
 8000224:	3740      	adds	r7, #64	; 0x40
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
	...

0800022c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000230:	4b17      	ldr	r3, [pc, #92]	; (8000290 <MX_SPI1_Init+0x64>)
 8000232:	4a18      	ldr	r2, [pc, #96]	; (8000294 <MX_SPI1_Init+0x68>)
 8000234:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000236:	4b16      	ldr	r3, [pc, #88]	; (8000290 <MX_SPI1_Init+0x64>)
 8000238:	f44f 7282 	mov.w	r2, #260	; 0x104
 800023c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800023e:	4b14      	ldr	r3, [pc, #80]	; (8000290 <MX_SPI1_Init+0x64>)
 8000240:	2200      	movs	r2, #0
 8000242:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000244:	4b12      	ldr	r3, [pc, #72]	; (8000290 <MX_SPI1_Init+0x64>)
 8000246:	2200      	movs	r2, #0
 8000248:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800024a:	4b11      	ldr	r3, [pc, #68]	; (8000290 <MX_SPI1_Init+0x64>)
 800024c:	2200      	movs	r2, #0
 800024e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000250:	4b0f      	ldr	r3, [pc, #60]	; (8000290 <MX_SPI1_Init+0x64>)
 8000252:	2200      	movs	r2, #0
 8000254:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000256:	4b0e      	ldr	r3, [pc, #56]	; (8000290 <MX_SPI1_Init+0x64>)
 8000258:	f44f 7200 	mov.w	r2, #512	; 0x200
 800025c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800025e:	4b0c      	ldr	r3, [pc, #48]	; (8000290 <MX_SPI1_Init+0x64>)
 8000260:	2218      	movs	r2, #24
 8000262:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000264:	4b0a      	ldr	r3, [pc, #40]	; (8000290 <MX_SPI1_Init+0x64>)
 8000266:	2200      	movs	r2, #0
 8000268:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800026a:	4b09      	ldr	r3, [pc, #36]	; (8000290 <MX_SPI1_Init+0x64>)
 800026c:	2200      	movs	r2, #0
 800026e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000270:	4b07      	ldr	r3, [pc, #28]	; (8000290 <MX_SPI1_Init+0x64>)
 8000272:	2200      	movs	r2, #0
 8000274:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000276:	4b06      	ldr	r3, [pc, #24]	; (8000290 <MX_SPI1_Init+0x64>)
 8000278:	220a      	movs	r2, #10
 800027a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800027c:	4804      	ldr	r0, [pc, #16]	; (8000290 <MX_SPI1_Init+0x64>)
 800027e:	f001 f947 	bl	8001510 <HAL_SPI_Init>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d001      	beq.n	800028c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000288:	f000 f8b2 	bl	80003f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800028c:	bf00      	nop
 800028e:	bd80      	pop	{r7, pc}
 8000290:	200001ec 	.word	0x200001ec
 8000294:	40013000 	.word	0x40013000

08000298 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800029c:	4b11      	ldr	r3, [pc, #68]	; (80002e4 <MX_USART1_UART_Init+0x4c>)
 800029e:	4a12      	ldr	r2, [pc, #72]	; (80002e8 <MX_USART1_UART_Init+0x50>)
 80002a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002a2:	4b10      	ldr	r3, [pc, #64]	; (80002e4 <MX_USART1_UART_Init+0x4c>)
 80002a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002aa:	4b0e      	ldr	r3, [pc, #56]	; (80002e4 <MX_USART1_UART_Init+0x4c>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002b0:	4b0c      	ldr	r3, [pc, #48]	; (80002e4 <MX_USART1_UART_Init+0x4c>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002b6:	4b0b      	ldr	r3, [pc, #44]	; (80002e4 <MX_USART1_UART_Init+0x4c>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002bc:	4b09      	ldr	r3, [pc, #36]	; (80002e4 <MX_USART1_UART_Init+0x4c>)
 80002be:	220c      	movs	r2, #12
 80002c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002c2:	4b08      	ldr	r3, [pc, #32]	; (80002e4 <MX_USART1_UART_Init+0x4c>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002c8:	4b06      	ldr	r3, [pc, #24]	; (80002e4 <MX_USART1_UART_Init+0x4c>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002ce:	4805      	ldr	r0, [pc, #20]	; (80002e4 <MX_USART1_UART_Init+0x4c>)
 80002d0:	f001 fe8a 	bl	8001fe8 <HAL_UART_Init>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80002da:	f000 f889 	bl	80003f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002de:	bf00      	nop
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	200001a8 	.word	0x200001a8
 80002e8:	40013800 	.word	0x40013800

080002ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b088      	sub	sp, #32
 80002f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f2:	f107 0310 	add.w	r3, r7, #16
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	605a      	str	r2, [r3, #4]
 80002fc:	609a      	str	r2, [r3, #8]
 80002fe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000300:	4b37      	ldr	r3, [pc, #220]	; (80003e0 <MX_GPIO_Init+0xf4>)
 8000302:	699b      	ldr	r3, [r3, #24]
 8000304:	4a36      	ldr	r2, [pc, #216]	; (80003e0 <MX_GPIO_Init+0xf4>)
 8000306:	f043 0310 	orr.w	r3, r3, #16
 800030a:	6193      	str	r3, [r2, #24]
 800030c:	4b34      	ldr	r3, [pc, #208]	; (80003e0 <MX_GPIO_Init+0xf4>)
 800030e:	699b      	ldr	r3, [r3, #24]
 8000310:	f003 0310 	and.w	r3, r3, #16
 8000314:	60fb      	str	r3, [r7, #12]
 8000316:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000318:	4b31      	ldr	r3, [pc, #196]	; (80003e0 <MX_GPIO_Init+0xf4>)
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	4a30      	ldr	r2, [pc, #192]	; (80003e0 <MX_GPIO_Init+0xf4>)
 800031e:	f043 0320 	orr.w	r3, r3, #32
 8000322:	6193      	str	r3, [r2, #24]
 8000324:	4b2e      	ldr	r3, [pc, #184]	; (80003e0 <MX_GPIO_Init+0xf4>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	f003 0320 	and.w	r3, r3, #32
 800032c:	60bb      	str	r3, [r7, #8]
 800032e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000330:	4b2b      	ldr	r3, [pc, #172]	; (80003e0 <MX_GPIO_Init+0xf4>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	4a2a      	ldr	r2, [pc, #168]	; (80003e0 <MX_GPIO_Init+0xf4>)
 8000336:	f043 0304 	orr.w	r3, r3, #4
 800033a:	6193      	str	r3, [r2, #24]
 800033c:	4b28      	ldr	r3, [pc, #160]	; (80003e0 <MX_GPIO_Init+0xf4>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	f003 0304 	and.w	r3, r3, #4
 8000344:	607b      	str	r3, [r7, #4]
 8000346:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000348:	4b25      	ldr	r3, [pc, #148]	; (80003e0 <MX_GPIO_Init+0xf4>)
 800034a:	699b      	ldr	r3, [r3, #24]
 800034c:	4a24      	ldr	r2, [pc, #144]	; (80003e0 <MX_GPIO_Init+0xf4>)
 800034e:	f043 0308 	orr.w	r3, r3, #8
 8000352:	6193      	str	r3, [r2, #24]
 8000354:	4b22      	ldr	r3, [pc, #136]	; (80003e0 <MX_GPIO_Init+0xf4>)
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	f003 0308 	and.w	r3, r3, #8
 800035c:	603b      	str	r3, [r7, #0]
 800035e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000360:	2200      	movs	r2, #0
 8000362:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000366:	481f      	ldr	r0, [pc, #124]	; (80003e4 <MX_GPIO_Init+0xf8>)
 8000368:	f000 fc9f 	bl	8000caa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800036c:	2200      	movs	r2, #0
 800036e:	2110      	movs	r1, #16
 8000370:	481d      	ldr	r0, [pc, #116]	; (80003e8 <MX_GPIO_Init+0xfc>)
 8000372:	f000 fc9a 	bl	8000caa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_PWRDOWN_GPIO_Port, RESET_PWRDOWN_Pin, GPIO_PIN_RESET);
 8000376:	2200      	movs	r2, #0
 8000378:	2101      	movs	r1, #1
 800037a:	481c      	ldr	r0, [pc, #112]	; (80003ec <MX_GPIO_Init+0x100>)
 800037c:	f000 fc95 	bl	8000caa <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000380:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000384:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000386:	2301      	movs	r3, #1
 8000388:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800038a:	2300      	movs	r3, #0
 800038c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800038e:	2303      	movs	r3, #3
 8000390:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000392:	f107 0310 	add.w	r3, r7, #16
 8000396:	4619      	mov	r1, r3
 8000398:	4812      	ldr	r0, [pc, #72]	; (80003e4 <MX_GPIO_Init+0xf8>)
 800039a:	f000 faeb 	bl	8000974 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800039e:	2310      	movs	r3, #16
 80003a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003a2:	2301      	movs	r3, #1
 80003a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a6:	2300      	movs	r3, #0
 80003a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003aa:	2302      	movs	r3, #2
 80003ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80003ae:	f107 0310 	add.w	r3, r7, #16
 80003b2:	4619      	mov	r1, r3
 80003b4:	480c      	ldr	r0, [pc, #48]	; (80003e8 <MX_GPIO_Init+0xfc>)
 80003b6:	f000 fadd 	bl	8000974 <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_PWRDOWN_Pin */
  GPIO_InitStruct.Pin = RESET_PWRDOWN_Pin;
 80003ba:	2301      	movs	r3, #1
 80003bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003be:	2301      	movs	r3, #1
 80003c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003c2:	2301      	movs	r3, #1
 80003c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80003c6:	2301      	movs	r3, #1
 80003c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RESET_PWRDOWN_GPIO_Port, &GPIO_InitStruct);
 80003ca:	f107 0310 	add.w	r3, r7, #16
 80003ce:	4619      	mov	r1, r3
 80003d0:	4806      	ldr	r0, [pc, #24]	; (80003ec <MX_GPIO_Init+0x100>)
 80003d2:	f000 facf 	bl	8000974 <HAL_GPIO_Init>

}
 80003d6:	bf00      	nop
 80003d8:	3720      	adds	r7, #32
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	40021000 	.word	0x40021000
 80003e4:	40011000 	.word	0x40011000
 80003e8:	40010800 	.word	0x40010800
 80003ec:	40010c00 	.word	0x40010c00

080003f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003f4:	b672      	cpsid	i
}
 80003f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003f8:	e7fe      	b.n	80003f8 <Error_Handler+0x8>
	...

080003fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	b085      	sub	sp, #20
 8000400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000402:	4b15      	ldr	r3, [pc, #84]	; (8000458 <HAL_MspInit+0x5c>)
 8000404:	699b      	ldr	r3, [r3, #24]
 8000406:	4a14      	ldr	r2, [pc, #80]	; (8000458 <HAL_MspInit+0x5c>)
 8000408:	f043 0301 	orr.w	r3, r3, #1
 800040c:	6193      	str	r3, [r2, #24]
 800040e:	4b12      	ldr	r3, [pc, #72]	; (8000458 <HAL_MspInit+0x5c>)
 8000410:	699b      	ldr	r3, [r3, #24]
 8000412:	f003 0301 	and.w	r3, r3, #1
 8000416:	60bb      	str	r3, [r7, #8]
 8000418:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800041a:	4b0f      	ldr	r3, [pc, #60]	; (8000458 <HAL_MspInit+0x5c>)
 800041c:	69db      	ldr	r3, [r3, #28]
 800041e:	4a0e      	ldr	r2, [pc, #56]	; (8000458 <HAL_MspInit+0x5c>)
 8000420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000424:	61d3      	str	r3, [r2, #28]
 8000426:	4b0c      	ldr	r3, [pc, #48]	; (8000458 <HAL_MspInit+0x5c>)
 8000428:	69db      	ldr	r3, [r3, #28]
 800042a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800042e:	607b      	str	r3, [r7, #4]
 8000430:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000432:	4b0a      	ldr	r3, [pc, #40]	; (800045c <HAL_MspInit+0x60>)
 8000434:	685b      	ldr	r3, [r3, #4]
 8000436:	60fb      	str	r3, [r7, #12]
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800043e:	60fb      	str	r3, [r7, #12]
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000446:	60fb      	str	r3, [r7, #12]
 8000448:	4a04      	ldr	r2, [pc, #16]	; (800045c <HAL_MspInit+0x60>)
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800044e:	bf00      	nop
 8000450:	3714      	adds	r7, #20
 8000452:	46bd      	mov	sp, r7
 8000454:	bc80      	pop	{r7}
 8000456:	4770      	bx	lr
 8000458:	40021000 	.word	0x40021000
 800045c:	40010000 	.word	0x40010000

08000460 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b088      	sub	sp, #32
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000468:	f107 0310 	add.w	r3, r7, #16
 800046c:	2200      	movs	r2, #0
 800046e:	601a      	str	r2, [r3, #0]
 8000470:	605a      	str	r2, [r3, #4]
 8000472:	609a      	str	r2, [r3, #8]
 8000474:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	4a1b      	ldr	r2, [pc, #108]	; (80004e8 <HAL_SPI_MspInit+0x88>)
 800047c:	4293      	cmp	r3, r2
 800047e:	d12f      	bne.n	80004e0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000480:	4b1a      	ldr	r3, [pc, #104]	; (80004ec <HAL_SPI_MspInit+0x8c>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	4a19      	ldr	r2, [pc, #100]	; (80004ec <HAL_SPI_MspInit+0x8c>)
 8000486:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800048a:	6193      	str	r3, [r2, #24]
 800048c:	4b17      	ldr	r3, [pc, #92]	; (80004ec <HAL_SPI_MspInit+0x8c>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000494:	60fb      	str	r3, [r7, #12]
 8000496:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000498:	4b14      	ldr	r3, [pc, #80]	; (80004ec <HAL_SPI_MspInit+0x8c>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	4a13      	ldr	r2, [pc, #76]	; (80004ec <HAL_SPI_MspInit+0x8c>)
 800049e:	f043 0304 	orr.w	r3, r3, #4
 80004a2:	6193      	str	r3, [r2, #24]
 80004a4:	4b11      	ldr	r3, [pc, #68]	; (80004ec <HAL_SPI_MspInit+0x8c>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	f003 0304 	and.w	r3, r3, #4
 80004ac:	60bb      	str	r3, [r7, #8]
 80004ae:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80004b0:	23a0      	movs	r3, #160	; 0xa0
 80004b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004b4:	2302      	movs	r3, #2
 80004b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004b8:	2303      	movs	r3, #3
 80004ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004bc:	f107 0310 	add.w	r3, r7, #16
 80004c0:	4619      	mov	r1, r3
 80004c2:	480b      	ldr	r0, [pc, #44]	; (80004f0 <HAL_SPI_MspInit+0x90>)
 80004c4:	f000 fa56 	bl	8000974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80004c8:	2340      	movs	r3, #64	; 0x40
 80004ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004cc:	2300      	movs	r3, #0
 80004ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d0:	2300      	movs	r3, #0
 80004d2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d4:	f107 0310 	add.w	r3, r7, #16
 80004d8:	4619      	mov	r1, r3
 80004da:	4805      	ldr	r0, [pc, #20]	; (80004f0 <HAL_SPI_MspInit+0x90>)
 80004dc:	f000 fa4a 	bl	8000974 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80004e0:	bf00      	nop
 80004e2:	3720      	adds	r7, #32
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	40013000 	.word	0x40013000
 80004ec:	40021000 	.word	0x40021000
 80004f0:	40010800 	.word	0x40010800

080004f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b088      	sub	sp, #32
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fc:	f107 0310 	add.w	r3, r7, #16
 8000500:	2200      	movs	r2, #0
 8000502:	601a      	str	r2, [r3, #0]
 8000504:	605a      	str	r2, [r3, #4]
 8000506:	609a      	str	r2, [r3, #8]
 8000508:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4a1c      	ldr	r2, [pc, #112]	; (8000580 <HAL_UART_MspInit+0x8c>)
 8000510:	4293      	cmp	r3, r2
 8000512:	d131      	bne.n	8000578 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000514:	4b1b      	ldr	r3, [pc, #108]	; (8000584 <HAL_UART_MspInit+0x90>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	4a1a      	ldr	r2, [pc, #104]	; (8000584 <HAL_UART_MspInit+0x90>)
 800051a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800051e:	6193      	str	r3, [r2, #24]
 8000520:	4b18      	ldr	r3, [pc, #96]	; (8000584 <HAL_UART_MspInit+0x90>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000528:	60fb      	str	r3, [r7, #12]
 800052a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800052c:	4b15      	ldr	r3, [pc, #84]	; (8000584 <HAL_UART_MspInit+0x90>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	4a14      	ldr	r2, [pc, #80]	; (8000584 <HAL_UART_MspInit+0x90>)
 8000532:	f043 0304 	orr.w	r3, r3, #4
 8000536:	6193      	str	r3, [r2, #24]
 8000538:	4b12      	ldr	r3, [pc, #72]	; (8000584 <HAL_UART_MspInit+0x90>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	f003 0304 	and.w	r3, r3, #4
 8000540:	60bb      	str	r3, [r7, #8]
 8000542:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000544:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000548:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800054a:	2302      	movs	r3, #2
 800054c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800054e:	2303      	movs	r3, #3
 8000550:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000552:	f107 0310 	add.w	r3, r7, #16
 8000556:	4619      	mov	r1, r3
 8000558:	480b      	ldr	r0, [pc, #44]	; (8000588 <HAL_UART_MspInit+0x94>)
 800055a:	f000 fa0b 	bl	8000974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800055e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000562:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000564:	2300      	movs	r3, #0
 8000566:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000568:	2300      	movs	r3, #0
 800056a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800056c:	f107 0310 	add.w	r3, r7, #16
 8000570:	4619      	mov	r1, r3
 8000572:	4805      	ldr	r0, [pc, #20]	; (8000588 <HAL_UART_MspInit+0x94>)
 8000574:	f000 f9fe 	bl	8000974 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000578:	bf00      	nop
 800057a:	3720      	adds	r7, #32
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	40013800 	.word	0x40013800
 8000584:	40021000 	.word	0x40021000
 8000588:	40010800 	.word	0x40010800

0800058c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000590:	e7fe      	b.n	8000590 <NMI_Handler+0x4>

08000592 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000592:	b480      	push	{r7}
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000596:	e7fe      	b.n	8000596 <HardFault_Handler+0x4>

08000598 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800059c:	e7fe      	b.n	800059c <MemManage_Handler+0x4>

0800059e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800059e:	b480      	push	{r7}
 80005a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005a2:	e7fe      	b.n	80005a2 <BusFault_Handler+0x4>

080005a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005a8:	e7fe      	b.n	80005a8 <UsageFault_Handler+0x4>

080005aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005aa:	b480      	push	{r7}
 80005ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005ae:	bf00      	nop
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bc80      	pop	{r7}
 80005b4:	4770      	bx	lr

080005b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005b6:	b480      	push	{r7}
 80005b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005ba:	bf00      	nop
 80005bc:	46bd      	mov	sp, r7
 80005be:	bc80      	pop	{r7}
 80005c0:	4770      	bx	lr

080005c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005c2:	b480      	push	{r7}
 80005c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005c6:	bf00      	nop
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bc80      	pop	{r7}
 80005cc:	4770      	bx	lr

080005ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005ce:	b580      	push	{r7, lr}
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005d2:	f000 f8ab 	bl	800072c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
	...

080005dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005e4:	4a14      	ldr	r2, [pc, #80]	; (8000638 <_sbrk+0x5c>)
 80005e6:	4b15      	ldr	r3, [pc, #84]	; (800063c <_sbrk+0x60>)
 80005e8:	1ad3      	subs	r3, r2, r3
 80005ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005ec:	697b      	ldr	r3, [r7, #20]
 80005ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005f0:	4b13      	ldr	r3, [pc, #76]	; (8000640 <_sbrk+0x64>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d102      	bne.n	80005fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005f8:	4b11      	ldr	r3, [pc, #68]	; (8000640 <_sbrk+0x64>)
 80005fa:	4a12      	ldr	r2, [pc, #72]	; (8000644 <_sbrk+0x68>)
 80005fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005fe:	4b10      	ldr	r3, [pc, #64]	; (8000640 <_sbrk+0x64>)
 8000600:	681a      	ldr	r2, [r3, #0]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4413      	add	r3, r2
 8000606:	693a      	ldr	r2, [r7, #16]
 8000608:	429a      	cmp	r2, r3
 800060a:	d207      	bcs.n	800061c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800060c:	f003 f91e 	bl	800384c <__errno>
 8000610:	4603      	mov	r3, r0
 8000612:	220c      	movs	r2, #12
 8000614:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000616:	f04f 33ff 	mov.w	r3, #4294967295
 800061a:	e009      	b.n	8000630 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800061c:	4b08      	ldr	r3, [pc, #32]	; (8000640 <_sbrk+0x64>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000622:	4b07      	ldr	r3, [pc, #28]	; (8000640 <_sbrk+0x64>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4413      	add	r3, r2
 800062a:	4a05      	ldr	r2, [pc, #20]	; (8000640 <_sbrk+0x64>)
 800062c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800062e:	68fb      	ldr	r3, [r7, #12]
}
 8000630:	4618      	mov	r0, r3
 8000632:	3718      	adds	r7, #24
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20005000 	.word	0x20005000
 800063c:	00000400 	.word	0x00000400
 8000640:	2000008c 	.word	0x2000008c
 8000644:	20000258 	.word	0x20000258

08000648 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800064c:	bf00      	nop
 800064e:	46bd      	mov	sp, r7
 8000650:	bc80      	pop	{r7}
 8000652:	4770      	bx	lr

08000654 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000654:	480c      	ldr	r0, [pc, #48]	; (8000688 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000656:	490d      	ldr	r1, [pc, #52]	; (800068c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000658:	4a0d      	ldr	r2, [pc, #52]	; (8000690 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800065a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800065c:	e002      	b.n	8000664 <LoopCopyDataInit>

0800065e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800065e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000660:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000662:	3304      	adds	r3, #4

08000664 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000664:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000666:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000668:	d3f9      	bcc.n	800065e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800066a:	4a0a      	ldr	r2, [pc, #40]	; (8000694 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800066c:	4c0a      	ldr	r4, [pc, #40]	; (8000698 <LoopFillZerobss+0x22>)
  movs r3, #0
 800066e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000670:	e001      	b.n	8000676 <LoopFillZerobss>

08000672 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000672:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000674:	3204      	adds	r2, #4

08000676 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000676:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000678:	d3fb      	bcc.n	8000672 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800067a:	f7ff ffe5 	bl	8000648 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800067e:	f003 f8eb 	bl	8003858 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000682:	f7ff fd63 	bl	800014c <main>
  bx lr
 8000686:	4770      	bx	lr
  ldr r0, =_sdata
 8000688:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800068c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000690:	0800492c 	.word	0x0800492c
  ldr r2, =_sbss
 8000694:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000698:	20000258 	.word	0x20000258

0800069c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800069c:	e7fe      	b.n	800069c <ADC1_2_IRQHandler>
	...

080006a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006a4:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <HAL_Init+0x28>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a07      	ldr	r2, [pc, #28]	; (80006c8 <HAL_Init+0x28>)
 80006aa:	f043 0310 	orr.w	r3, r3, #16
 80006ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006b0:	2003      	movs	r0, #3
 80006b2:	f000 f92b 	bl	800090c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006b6:	200f      	movs	r0, #15
 80006b8:	f000 f808 	bl	80006cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006bc:	f7ff fe9e 	bl	80003fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006c0:	2300      	movs	r3, #0
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40022000 	.word	0x40022000

080006cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006d4:	4b12      	ldr	r3, [pc, #72]	; (8000720 <HAL_InitTick+0x54>)
 80006d6:	681a      	ldr	r2, [r3, #0]
 80006d8:	4b12      	ldr	r3, [pc, #72]	; (8000724 <HAL_InitTick+0x58>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	4619      	mov	r1, r3
 80006de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80006e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 f935 	bl	800095a <HAL_SYSTICK_Config>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006f6:	2301      	movs	r3, #1
 80006f8:	e00e      	b.n	8000718 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	2b0f      	cmp	r3, #15
 80006fe:	d80a      	bhi.n	8000716 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000700:	2200      	movs	r2, #0
 8000702:	6879      	ldr	r1, [r7, #4]
 8000704:	f04f 30ff 	mov.w	r0, #4294967295
 8000708:	f000 f90b 	bl	8000922 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800070c:	4a06      	ldr	r2, [pc, #24]	; (8000728 <HAL_InitTick+0x5c>)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000712:	2300      	movs	r3, #0
 8000714:	e000      	b.n	8000718 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000716:	2301      	movs	r3, #1
}
 8000718:	4618      	mov	r0, r3
 800071a:	3708      	adds	r7, #8
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20000000 	.word	0x20000000
 8000724:	20000008 	.word	0x20000008
 8000728:	20000004 	.word	0x20000004

0800072c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000730:	4b05      	ldr	r3, [pc, #20]	; (8000748 <HAL_IncTick+0x1c>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	461a      	mov	r2, r3
 8000736:	4b05      	ldr	r3, [pc, #20]	; (800074c <HAL_IncTick+0x20>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4413      	add	r3, r2
 800073c:	4a03      	ldr	r2, [pc, #12]	; (800074c <HAL_IncTick+0x20>)
 800073e:	6013      	str	r3, [r2, #0]
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr
 8000748:	20000008 	.word	0x20000008
 800074c:	20000244 	.word	0x20000244

08000750 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  return uwTick;
 8000754:	4b02      	ldr	r3, [pc, #8]	; (8000760 <HAL_GetTick+0x10>)
 8000756:	681b      	ldr	r3, [r3, #0]
}
 8000758:	4618      	mov	r0, r3
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr
 8000760:	20000244 	.word	0x20000244

08000764 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800076c:	f7ff fff0 	bl	8000750 <HAL_GetTick>
 8000770:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800077c:	d005      	beq.n	800078a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800077e:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <HAL_Delay+0x44>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	461a      	mov	r2, r3
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	4413      	add	r3, r2
 8000788:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800078a:	bf00      	nop
 800078c:	f7ff ffe0 	bl	8000750 <HAL_GetTick>
 8000790:	4602      	mov	r2, r0
 8000792:	68bb      	ldr	r3, [r7, #8]
 8000794:	1ad3      	subs	r3, r2, r3
 8000796:	68fa      	ldr	r2, [r7, #12]
 8000798:	429a      	cmp	r2, r3
 800079a:	d8f7      	bhi.n	800078c <HAL_Delay+0x28>
  {
  }
}
 800079c:	bf00      	nop
 800079e:	bf00      	nop
 80007a0:	3710      	adds	r7, #16
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000008 	.word	0x20000008

080007ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b085      	sub	sp, #20
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	f003 0307 	and.w	r3, r3, #7
 80007ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007bc:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <__NVIC_SetPriorityGrouping+0x44>)
 80007be:	68db      	ldr	r3, [r3, #12]
 80007c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007c2:	68ba      	ldr	r2, [r7, #8]
 80007c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007c8:	4013      	ands	r3, r2
 80007ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007de:	4a04      	ldr	r2, [pc, #16]	; (80007f0 <__NVIC_SetPriorityGrouping+0x44>)
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	60d3      	str	r3, [r2, #12]
}
 80007e4:	bf00      	nop
 80007e6:	3714      	adds	r7, #20
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bc80      	pop	{r7}
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	e000ed00 	.word	0xe000ed00

080007f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007f8:	4b04      	ldr	r3, [pc, #16]	; (800080c <__NVIC_GetPriorityGrouping+0x18>)
 80007fa:	68db      	ldr	r3, [r3, #12]
 80007fc:	0a1b      	lsrs	r3, r3, #8
 80007fe:	f003 0307 	and.w	r3, r3, #7
}
 8000802:	4618      	mov	r0, r3
 8000804:	46bd      	mov	sp, r7
 8000806:	bc80      	pop	{r7}
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	e000ed00 	.word	0xe000ed00

08000810 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	6039      	str	r1, [r7, #0]
 800081a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800081c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000820:	2b00      	cmp	r3, #0
 8000822:	db0a      	blt.n	800083a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	b2da      	uxtb	r2, r3
 8000828:	490c      	ldr	r1, [pc, #48]	; (800085c <__NVIC_SetPriority+0x4c>)
 800082a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082e:	0112      	lsls	r2, r2, #4
 8000830:	b2d2      	uxtb	r2, r2
 8000832:	440b      	add	r3, r1
 8000834:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000838:	e00a      	b.n	8000850 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	b2da      	uxtb	r2, r3
 800083e:	4908      	ldr	r1, [pc, #32]	; (8000860 <__NVIC_SetPriority+0x50>)
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	f003 030f 	and.w	r3, r3, #15
 8000846:	3b04      	subs	r3, #4
 8000848:	0112      	lsls	r2, r2, #4
 800084a:	b2d2      	uxtb	r2, r2
 800084c:	440b      	add	r3, r1
 800084e:	761a      	strb	r2, [r3, #24]
}
 8000850:	bf00      	nop
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	bc80      	pop	{r7}
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	e000e100 	.word	0xe000e100
 8000860:	e000ed00 	.word	0xe000ed00

08000864 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000864:	b480      	push	{r7}
 8000866:	b089      	sub	sp, #36	; 0x24
 8000868:	af00      	add	r7, sp, #0
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	60b9      	str	r1, [r7, #8]
 800086e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	f003 0307 	and.w	r3, r3, #7
 8000876:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000878:	69fb      	ldr	r3, [r7, #28]
 800087a:	f1c3 0307 	rsb	r3, r3, #7
 800087e:	2b04      	cmp	r3, #4
 8000880:	bf28      	it	cs
 8000882:	2304      	movcs	r3, #4
 8000884:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000886:	69fb      	ldr	r3, [r7, #28]
 8000888:	3304      	adds	r3, #4
 800088a:	2b06      	cmp	r3, #6
 800088c:	d902      	bls.n	8000894 <NVIC_EncodePriority+0x30>
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	3b03      	subs	r3, #3
 8000892:	e000      	b.n	8000896 <NVIC_EncodePriority+0x32>
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000898:	f04f 32ff 	mov.w	r2, #4294967295
 800089c:	69bb      	ldr	r3, [r7, #24]
 800089e:	fa02 f303 	lsl.w	r3, r2, r3
 80008a2:	43da      	mvns	r2, r3
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	401a      	ands	r2, r3
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008ac:	f04f 31ff 	mov.w	r1, #4294967295
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	fa01 f303 	lsl.w	r3, r1, r3
 80008b6:	43d9      	mvns	r1, r3
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008bc:	4313      	orrs	r3, r2
         );
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3724      	adds	r7, #36	; 0x24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bc80      	pop	{r7}
 80008c6:	4770      	bx	lr

080008c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	3b01      	subs	r3, #1
 80008d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008d8:	d301      	bcc.n	80008de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008da:	2301      	movs	r3, #1
 80008dc:	e00f      	b.n	80008fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008de:	4a0a      	ldr	r2, [pc, #40]	; (8000908 <SysTick_Config+0x40>)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	3b01      	subs	r3, #1
 80008e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008e6:	210f      	movs	r1, #15
 80008e8:	f04f 30ff 	mov.w	r0, #4294967295
 80008ec:	f7ff ff90 	bl	8000810 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008f0:	4b05      	ldr	r3, [pc, #20]	; (8000908 <SysTick_Config+0x40>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008f6:	4b04      	ldr	r3, [pc, #16]	; (8000908 <SysTick_Config+0x40>)
 80008f8:	2207      	movs	r2, #7
 80008fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008fc:	2300      	movs	r3, #0
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	e000e010 	.word	0xe000e010

0800090c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000914:	6878      	ldr	r0, [r7, #4]
 8000916:	f7ff ff49 	bl	80007ac <__NVIC_SetPriorityGrouping>
}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000922:	b580      	push	{r7, lr}
 8000924:	b086      	sub	sp, #24
 8000926:	af00      	add	r7, sp, #0
 8000928:	4603      	mov	r3, r0
 800092a:	60b9      	str	r1, [r7, #8]
 800092c:	607a      	str	r2, [r7, #4]
 800092e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000930:	2300      	movs	r3, #0
 8000932:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000934:	f7ff ff5e 	bl	80007f4 <__NVIC_GetPriorityGrouping>
 8000938:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800093a:	687a      	ldr	r2, [r7, #4]
 800093c:	68b9      	ldr	r1, [r7, #8]
 800093e:	6978      	ldr	r0, [r7, #20]
 8000940:	f7ff ff90 	bl	8000864 <NVIC_EncodePriority>
 8000944:	4602      	mov	r2, r0
 8000946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800094a:	4611      	mov	r1, r2
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff ff5f 	bl	8000810 <__NVIC_SetPriority>
}
 8000952:	bf00      	nop
 8000954:	3718      	adds	r7, #24
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800095a:	b580      	push	{r7, lr}
 800095c:	b082      	sub	sp, #8
 800095e:	af00      	add	r7, sp, #0
 8000960:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f7ff ffb0 	bl	80008c8 <SysTick_Config>
 8000968:	4603      	mov	r3, r0
}
 800096a:	4618      	mov	r0, r3
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
	...

08000974 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000974:	b480      	push	{r7}
 8000976:	b08b      	sub	sp, #44	; 0x2c
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000982:	2300      	movs	r3, #0
 8000984:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000986:	e169      	b.n	8000c5c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000988:	2201      	movs	r2, #1
 800098a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800098c:	fa02 f303 	lsl.w	r3, r2, r3
 8000990:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	69fa      	ldr	r2, [r7, #28]
 8000998:	4013      	ands	r3, r2
 800099a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800099c:	69ba      	ldr	r2, [r7, #24]
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	429a      	cmp	r2, r3
 80009a2:	f040 8158 	bne.w	8000c56 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	685b      	ldr	r3, [r3, #4]
 80009aa:	4a9a      	ldr	r2, [pc, #616]	; (8000c14 <HAL_GPIO_Init+0x2a0>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d05e      	beq.n	8000a6e <HAL_GPIO_Init+0xfa>
 80009b0:	4a98      	ldr	r2, [pc, #608]	; (8000c14 <HAL_GPIO_Init+0x2a0>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d875      	bhi.n	8000aa2 <HAL_GPIO_Init+0x12e>
 80009b6:	4a98      	ldr	r2, [pc, #608]	; (8000c18 <HAL_GPIO_Init+0x2a4>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d058      	beq.n	8000a6e <HAL_GPIO_Init+0xfa>
 80009bc:	4a96      	ldr	r2, [pc, #600]	; (8000c18 <HAL_GPIO_Init+0x2a4>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d86f      	bhi.n	8000aa2 <HAL_GPIO_Init+0x12e>
 80009c2:	4a96      	ldr	r2, [pc, #600]	; (8000c1c <HAL_GPIO_Init+0x2a8>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d052      	beq.n	8000a6e <HAL_GPIO_Init+0xfa>
 80009c8:	4a94      	ldr	r2, [pc, #592]	; (8000c1c <HAL_GPIO_Init+0x2a8>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d869      	bhi.n	8000aa2 <HAL_GPIO_Init+0x12e>
 80009ce:	4a94      	ldr	r2, [pc, #592]	; (8000c20 <HAL_GPIO_Init+0x2ac>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d04c      	beq.n	8000a6e <HAL_GPIO_Init+0xfa>
 80009d4:	4a92      	ldr	r2, [pc, #584]	; (8000c20 <HAL_GPIO_Init+0x2ac>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d863      	bhi.n	8000aa2 <HAL_GPIO_Init+0x12e>
 80009da:	4a92      	ldr	r2, [pc, #584]	; (8000c24 <HAL_GPIO_Init+0x2b0>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d046      	beq.n	8000a6e <HAL_GPIO_Init+0xfa>
 80009e0:	4a90      	ldr	r2, [pc, #576]	; (8000c24 <HAL_GPIO_Init+0x2b0>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d85d      	bhi.n	8000aa2 <HAL_GPIO_Init+0x12e>
 80009e6:	2b12      	cmp	r3, #18
 80009e8:	d82a      	bhi.n	8000a40 <HAL_GPIO_Init+0xcc>
 80009ea:	2b12      	cmp	r3, #18
 80009ec:	d859      	bhi.n	8000aa2 <HAL_GPIO_Init+0x12e>
 80009ee:	a201      	add	r2, pc, #4	; (adr r2, 80009f4 <HAL_GPIO_Init+0x80>)
 80009f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009f4:	08000a6f 	.word	0x08000a6f
 80009f8:	08000a49 	.word	0x08000a49
 80009fc:	08000a5b 	.word	0x08000a5b
 8000a00:	08000a9d 	.word	0x08000a9d
 8000a04:	08000aa3 	.word	0x08000aa3
 8000a08:	08000aa3 	.word	0x08000aa3
 8000a0c:	08000aa3 	.word	0x08000aa3
 8000a10:	08000aa3 	.word	0x08000aa3
 8000a14:	08000aa3 	.word	0x08000aa3
 8000a18:	08000aa3 	.word	0x08000aa3
 8000a1c:	08000aa3 	.word	0x08000aa3
 8000a20:	08000aa3 	.word	0x08000aa3
 8000a24:	08000aa3 	.word	0x08000aa3
 8000a28:	08000aa3 	.word	0x08000aa3
 8000a2c:	08000aa3 	.word	0x08000aa3
 8000a30:	08000aa3 	.word	0x08000aa3
 8000a34:	08000aa3 	.word	0x08000aa3
 8000a38:	08000a51 	.word	0x08000a51
 8000a3c:	08000a65 	.word	0x08000a65
 8000a40:	4a79      	ldr	r2, [pc, #484]	; (8000c28 <HAL_GPIO_Init+0x2b4>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d013      	beq.n	8000a6e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a46:	e02c      	b.n	8000aa2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	623b      	str	r3, [r7, #32]
          break;
 8000a4e:	e029      	b.n	8000aa4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	3304      	adds	r3, #4
 8000a56:	623b      	str	r3, [r7, #32]
          break;
 8000a58:	e024      	b.n	8000aa4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	68db      	ldr	r3, [r3, #12]
 8000a5e:	3308      	adds	r3, #8
 8000a60:	623b      	str	r3, [r7, #32]
          break;
 8000a62:	e01f      	b.n	8000aa4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	330c      	adds	r3, #12
 8000a6a:	623b      	str	r3, [r7, #32]
          break;
 8000a6c:	e01a      	b.n	8000aa4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	689b      	ldr	r3, [r3, #8]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d102      	bne.n	8000a7c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a76:	2304      	movs	r3, #4
 8000a78:	623b      	str	r3, [r7, #32]
          break;
 8000a7a:	e013      	b.n	8000aa4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	689b      	ldr	r3, [r3, #8]
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d105      	bne.n	8000a90 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a84:	2308      	movs	r3, #8
 8000a86:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	69fa      	ldr	r2, [r7, #28]
 8000a8c:	611a      	str	r2, [r3, #16]
          break;
 8000a8e:	e009      	b.n	8000aa4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a90:	2308      	movs	r3, #8
 8000a92:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	69fa      	ldr	r2, [r7, #28]
 8000a98:	615a      	str	r2, [r3, #20]
          break;
 8000a9a:	e003      	b.n	8000aa4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	623b      	str	r3, [r7, #32]
          break;
 8000aa0:	e000      	b.n	8000aa4 <HAL_GPIO_Init+0x130>
          break;
 8000aa2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000aa4:	69bb      	ldr	r3, [r7, #24]
 8000aa6:	2bff      	cmp	r3, #255	; 0xff
 8000aa8:	d801      	bhi.n	8000aae <HAL_GPIO_Init+0x13a>
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	e001      	b.n	8000ab2 <HAL_GPIO_Init+0x13e>
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	3304      	adds	r3, #4
 8000ab2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ab4:	69bb      	ldr	r3, [r7, #24]
 8000ab6:	2bff      	cmp	r3, #255	; 0xff
 8000ab8:	d802      	bhi.n	8000ac0 <HAL_GPIO_Init+0x14c>
 8000aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	e002      	b.n	8000ac6 <HAL_GPIO_Init+0x152>
 8000ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac2:	3b08      	subs	r3, #8
 8000ac4:	009b      	lsls	r3, r3, #2
 8000ac6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	210f      	movs	r1, #15
 8000ace:	693b      	ldr	r3, [r7, #16]
 8000ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad4:	43db      	mvns	r3, r3
 8000ad6:	401a      	ands	r2, r3
 8000ad8:	6a39      	ldr	r1, [r7, #32]
 8000ada:	693b      	ldr	r3, [r7, #16]
 8000adc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae0:	431a      	orrs	r2, r3
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	f000 80b1 	beq.w	8000c56 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000af4:	4b4d      	ldr	r3, [pc, #308]	; (8000c2c <HAL_GPIO_Init+0x2b8>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	4a4c      	ldr	r2, [pc, #304]	; (8000c2c <HAL_GPIO_Init+0x2b8>)
 8000afa:	f043 0301 	orr.w	r3, r3, #1
 8000afe:	6193      	str	r3, [r2, #24]
 8000b00:	4b4a      	ldr	r3, [pc, #296]	; (8000c2c <HAL_GPIO_Init+0x2b8>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	f003 0301 	and.w	r3, r3, #1
 8000b08:	60bb      	str	r3, [r7, #8]
 8000b0a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b0c:	4a48      	ldr	r2, [pc, #288]	; (8000c30 <HAL_GPIO_Init+0x2bc>)
 8000b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b10:	089b      	lsrs	r3, r3, #2
 8000b12:	3302      	adds	r3, #2
 8000b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b18:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b1c:	f003 0303 	and.w	r3, r3, #3
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	220f      	movs	r2, #15
 8000b24:	fa02 f303 	lsl.w	r3, r2, r3
 8000b28:	43db      	mvns	r3, r3
 8000b2a:	68fa      	ldr	r2, [r7, #12]
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4a40      	ldr	r2, [pc, #256]	; (8000c34 <HAL_GPIO_Init+0x2c0>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d013      	beq.n	8000b60 <HAL_GPIO_Init+0x1ec>
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	4a3f      	ldr	r2, [pc, #252]	; (8000c38 <HAL_GPIO_Init+0x2c4>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d00d      	beq.n	8000b5c <HAL_GPIO_Init+0x1e8>
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	4a3e      	ldr	r2, [pc, #248]	; (8000c3c <HAL_GPIO_Init+0x2c8>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d007      	beq.n	8000b58 <HAL_GPIO_Init+0x1e4>
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	4a3d      	ldr	r2, [pc, #244]	; (8000c40 <HAL_GPIO_Init+0x2cc>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d101      	bne.n	8000b54 <HAL_GPIO_Init+0x1e0>
 8000b50:	2303      	movs	r3, #3
 8000b52:	e006      	b.n	8000b62 <HAL_GPIO_Init+0x1ee>
 8000b54:	2304      	movs	r3, #4
 8000b56:	e004      	b.n	8000b62 <HAL_GPIO_Init+0x1ee>
 8000b58:	2302      	movs	r3, #2
 8000b5a:	e002      	b.n	8000b62 <HAL_GPIO_Init+0x1ee>
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	e000      	b.n	8000b62 <HAL_GPIO_Init+0x1ee>
 8000b60:	2300      	movs	r3, #0
 8000b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b64:	f002 0203 	and.w	r2, r2, #3
 8000b68:	0092      	lsls	r2, r2, #2
 8000b6a:	4093      	lsls	r3, r2
 8000b6c:	68fa      	ldr	r2, [r7, #12]
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b72:	492f      	ldr	r1, [pc, #188]	; (8000c30 <HAL_GPIO_Init+0x2bc>)
 8000b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b76:	089b      	lsrs	r3, r3, #2
 8000b78:	3302      	adds	r3, #2
 8000b7a:	68fa      	ldr	r2, [r7, #12]
 8000b7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d006      	beq.n	8000b9a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b8c:	4b2d      	ldr	r3, [pc, #180]	; (8000c44 <HAL_GPIO_Init+0x2d0>)
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	492c      	ldr	r1, [pc, #176]	; (8000c44 <HAL_GPIO_Init+0x2d0>)
 8000b92:	69bb      	ldr	r3, [r7, #24]
 8000b94:	4313      	orrs	r3, r2
 8000b96:	600b      	str	r3, [r1, #0]
 8000b98:	e006      	b.n	8000ba8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b9a:	4b2a      	ldr	r3, [pc, #168]	; (8000c44 <HAL_GPIO_Init+0x2d0>)
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	69bb      	ldr	r3, [r7, #24]
 8000ba0:	43db      	mvns	r3, r3
 8000ba2:	4928      	ldr	r1, [pc, #160]	; (8000c44 <HAL_GPIO_Init+0x2d0>)
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d006      	beq.n	8000bc2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000bb4:	4b23      	ldr	r3, [pc, #140]	; (8000c44 <HAL_GPIO_Init+0x2d0>)
 8000bb6:	685a      	ldr	r2, [r3, #4]
 8000bb8:	4922      	ldr	r1, [pc, #136]	; (8000c44 <HAL_GPIO_Init+0x2d0>)
 8000bba:	69bb      	ldr	r3, [r7, #24]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	604b      	str	r3, [r1, #4]
 8000bc0:	e006      	b.n	8000bd0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000bc2:	4b20      	ldr	r3, [pc, #128]	; (8000c44 <HAL_GPIO_Init+0x2d0>)
 8000bc4:	685a      	ldr	r2, [r3, #4]
 8000bc6:	69bb      	ldr	r3, [r7, #24]
 8000bc8:	43db      	mvns	r3, r3
 8000bca:	491e      	ldr	r1, [pc, #120]	; (8000c44 <HAL_GPIO_Init+0x2d0>)
 8000bcc:	4013      	ands	r3, r2
 8000bce:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d006      	beq.n	8000bea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000bdc:	4b19      	ldr	r3, [pc, #100]	; (8000c44 <HAL_GPIO_Init+0x2d0>)
 8000bde:	689a      	ldr	r2, [r3, #8]
 8000be0:	4918      	ldr	r1, [pc, #96]	; (8000c44 <HAL_GPIO_Init+0x2d0>)
 8000be2:	69bb      	ldr	r3, [r7, #24]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	608b      	str	r3, [r1, #8]
 8000be8:	e006      	b.n	8000bf8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000bea:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <HAL_GPIO_Init+0x2d0>)
 8000bec:	689a      	ldr	r2, [r3, #8]
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	43db      	mvns	r3, r3
 8000bf2:	4914      	ldr	r1, [pc, #80]	; (8000c44 <HAL_GPIO_Init+0x2d0>)
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d021      	beq.n	8000c48 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c04:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <HAL_GPIO_Init+0x2d0>)
 8000c06:	68da      	ldr	r2, [r3, #12]
 8000c08:	490e      	ldr	r1, [pc, #56]	; (8000c44 <HAL_GPIO_Init+0x2d0>)
 8000c0a:	69bb      	ldr	r3, [r7, #24]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	60cb      	str	r3, [r1, #12]
 8000c10:	e021      	b.n	8000c56 <HAL_GPIO_Init+0x2e2>
 8000c12:	bf00      	nop
 8000c14:	10320000 	.word	0x10320000
 8000c18:	10310000 	.word	0x10310000
 8000c1c:	10220000 	.word	0x10220000
 8000c20:	10210000 	.word	0x10210000
 8000c24:	10120000 	.word	0x10120000
 8000c28:	10110000 	.word	0x10110000
 8000c2c:	40021000 	.word	0x40021000
 8000c30:	40010000 	.word	0x40010000
 8000c34:	40010800 	.word	0x40010800
 8000c38:	40010c00 	.word	0x40010c00
 8000c3c:	40011000 	.word	0x40011000
 8000c40:	40011400 	.word	0x40011400
 8000c44:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c48:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <HAL_GPIO_Init+0x304>)
 8000c4a:	68da      	ldr	r2, [r3, #12]
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	43db      	mvns	r3, r3
 8000c50:	4909      	ldr	r1, [pc, #36]	; (8000c78 <HAL_GPIO_Init+0x304>)
 8000c52:	4013      	ands	r3, r2
 8000c54:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c58:	3301      	adds	r3, #1
 8000c5a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c62:	fa22 f303 	lsr.w	r3, r2, r3
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	f47f ae8e 	bne.w	8000988 <HAL_GPIO_Init+0x14>
  }
}
 8000c6c:	bf00      	nop
 8000c6e:	bf00      	nop
 8000c70:	372c      	adds	r7, #44	; 0x2c
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bc80      	pop	{r7}
 8000c76:	4770      	bx	lr
 8000c78:	40010400 	.word	0x40010400

08000c7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	460b      	mov	r3, r1
 8000c86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	689a      	ldr	r2, [r3, #8]
 8000c8c:	887b      	ldrh	r3, [r7, #2]
 8000c8e:	4013      	ands	r3, r2
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d002      	beq.n	8000c9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000c94:	2301      	movs	r3, #1
 8000c96:	73fb      	strb	r3, [r7, #15]
 8000c98:	e001      	b.n	8000c9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3714      	adds	r7, #20
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bc80      	pop	{r7}
 8000ca8:	4770      	bx	lr

08000caa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000caa:	b480      	push	{r7}
 8000cac:	b083      	sub	sp, #12
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
 8000cb2:	460b      	mov	r3, r1
 8000cb4:	807b      	strh	r3, [r7, #2]
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cba:	787b      	ldrb	r3, [r7, #1]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d003      	beq.n	8000cc8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000cc0:	887a      	ldrh	r2, [r7, #2]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000cc6:	e003      	b.n	8000cd0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cc8:	887b      	ldrh	r3, [r7, #2]
 8000cca:	041a      	lsls	r2, r3, #16
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	611a      	str	r2, [r3, #16]
}
 8000cd0:	bf00      	nop
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bc80      	pop	{r7}
 8000cd8:	4770      	bx	lr
	...

08000cdc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d101      	bne.n	8000cee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e26c      	b.n	80011c8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	f000 8087 	beq.w	8000e0a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cfc:	4b92      	ldr	r3, [pc, #584]	; (8000f48 <HAL_RCC_OscConfig+0x26c>)
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f003 030c 	and.w	r3, r3, #12
 8000d04:	2b04      	cmp	r3, #4
 8000d06:	d00c      	beq.n	8000d22 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d08:	4b8f      	ldr	r3, [pc, #572]	; (8000f48 <HAL_RCC_OscConfig+0x26c>)
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f003 030c 	and.w	r3, r3, #12
 8000d10:	2b08      	cmp	r3, #8
 8000d12:	d112      	bne.n	8000d3a <HAL_RCC_OscConfig+0x5e>
 8000d14:	4b8c      	ldr	r3, [pc, #560]	; (8000f48 <HAL_RCC_OscConfig+0x26c>)
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d20:	d10b      	bne.n	8000d3a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d22:	4b89      	ldr	r3, [pc, #548]	; (8000f48 <HAL_RCC_OscConfig+0x26c>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d06c      	beq.n	8000e08 <HAL_RCC_OscConfig+0x12c>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d168      	bne.n	8000e08 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	e246      	b.n	80011c8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d42:	d106      	bne.n	8000d52 <HAL_RCC_OscConfig+0x76>
 8000d44:	4b80      	ldr	r3, [pc, #512]	; (8000f48 <HAL_RCC_OscConfig+0x26c>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a7f      	ldr	r2, [pc, #508]	; (8000f48 <HAL_RCC_OscConfig+0x26c>)
 8000d4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d4e:	6013      	str	r3, [r2, #0]
 8000d50:	e02e      	b.n	8000db0 <HAL_RCC_OscConfig+0xd4>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d10c      	bne.n	8000d74 <HAL_RCC_OscConfig+0x98>
 8000d5a:	4b7b      	ldr	r3, [pc, #492]	; (8000f48 <HAL_RCC_OscConfig+0x26c>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a7a      	ldr	r2, [pc, #488]	; (8000f48 <HAL_RCC_OscConfig+0x26c>)
 8000d60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d64:	6013      	str	r3, [r2, #0]
 8000d66:	4b78      	ldr	r3, [pc, #480]	; (8000f48 <HAL_RCC_OscConfig+0x26c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a77      	ldr	r2, [pc, #476]	; (8000f48 <HAL_RCC_OscConfig+0x26c>)
 8000d6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d70:	6013      	str	r3, [r2, #0]
 8000d72:	e01d      	b.n	8000db0 <HAL_RCC_OscConfig+0xd4>
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d7c:	d10c      	bne.n	8000d98 <HAL_RCC_OscConfig+0xbc>
 8000d7e:	4b72      	ldr	r3, [pc, #456]	; (8000f48 <HAL_RCC_OscConfig+0x26c>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a71      	ldr	r2, [pc, #452]	; (8000f48 <HAL_RCC_OscConfig+0x26c>)
 8000d84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d88:	6013      	str	r3, [r2, #0]
 8000d8a:	4b6f      	ldr	r3, [pc, #444]	; (8000f48 <HAL_RCC_OscConfig+0x26c>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a6e      	ldr	r2, [pc, #440]	; (8000f48 <HAL_RCC_OscConfig+0x26c>)
 8000d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d94:	6013      	str	r3, [r2, #0]
 8000d96:	e00b      	b.n	8000db0 <HAL_RCC_OscConfig+0xd4>
 8000d98:	4b6b      	ldr	r3, [pc, #428]	; (8000f48 <HAL_RCC_OscConfig+0x26c>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a6a      	ldr	r2, [pc, #424]	; (8000f48 <HAL_RCC_OscConfig+0x26c>)
 8000d9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000da2:	6013      	str	r3, [r2, #0]
 8000da4:	4b68      	ldr	r3, [pc, #416]	; (8000f48 <HAL_RCC_OscConfig+0x26c>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a67      	ldr	r2, [pc, #412]	; (8000f48 <HAL_RCC_OscConfig+0x26c>)
 8000daa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d013      	beq.n	8000de0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000db8:	f7ff fcca 	bl	8000750 <HAL_GetTick>
 8000dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dbe:	e008      	b.n	8000dd2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dc0:	f7ff fcc6 	bl	8000750 <HAL_GetTick>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	2b64      	cmp	r3, #100	; 0x64
 8000dcc:	d901      	bls.n	8000dd2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	e1fa      	b.n	80011c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dd2:	4b5d      	ldr	r3, [pc, #372]	; (8000f48 <HAL_RCC_OscConfig+0x26c>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d0f0      	beq.n	8000dc0 <HAL_RCC_OscConfig+0xe4>
 8000dde:	e014      	b.n	8000e0a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000de0:	f7ff fcb6 	bl	8000750 <HAL_GetTick>
 8000de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000de6:	e008      	b.n	8000dfa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000de8:	f7ff fcb2 	bl	8000750 <HAL_GetTick>
 8000dec:	4602      	mov	r2, r0
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	2b64      	cmp	r3, #100	; 0x64
 8000df4:	d901      	bls.n	8000dfa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000df6:	2303      	movs	r3, #3
 8000df8:	e1e6      	b.n	80011c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dfa:	4b53      	ldr	r3, [pc, #332]	; (8000f48 <HAL_RCC_OscConfig+0x26c>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d1f0      	bne.n	8000de8 <HAL_RCC_OscConfig+0x10c>
 8000e06:	e000      	b.n	8000e0a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f003 0302 	and.w	r3, r3, #2
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d063      	beq.n	8000ede <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e16:	4b4c      	ldr	r3, [pc, #304]	; (8000f48 <HAL_RCC_OscConfig+0x26c>)
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f003 030c 	and.w	r3, r3, #12
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d00b      	beq.n	8000e3a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e22:	4b49      	ldr	r3, [pc, #292]	; (8000f48 <HAL_RCC_OscConfig+0x26c>)
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f003 030c 	and.w	r3, r3, #12
 8000e2a:	2b08      	cmp	r3, #8
 8000e2c:	d11c      	bne.n	8000e68 <HAL_RCC_OscConfig+0x18c>
 8000e2e:	4b46      	ldr	r3, [pc, #280]	; (8000f48 <HAL_RCC_OscConfig+0x26c>)
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d116      	bne.n	8000e68 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e3a:	4b43      	ldr	r3, [pc, #268]	; (8000f48 <HAL_RCC_OscConfig+0x26c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f003 0302 	and.w	r3, r3, #2
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d005      	beq.n	8000e52 <HAL_RCC_OscConfig+0x176>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	691b      	ldr	r3, [r3, #16]
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d001      	beq.n	8000e52 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e1ba      	b.n	80011c8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e52:	4b3d      	ldr	r3, [pc, #244]	; (8000f48 <HAL_RCC_OscConfig+0x26c>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	695b      	ldr	r3, [r3, #20]
 8000e5e:	00db      	lsls	r3, r3, #3
 8000e60:	4939      	ldr	r1, [pc, #228]	; (8000f48 <HAL_RCC_OscConfig+0x26c>)
 8000e62:	4313      	orrs	r3, r2
 8000e64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e66:	e03a      	b.n	8000ede <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	691b      	ldr	r3, [r3, #16]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d020      	beq.n	8000eb2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e70:	4b36      	ldr	r3, [pc, #216]	; (8000f4c <HAL_RCC_OscConfig+0x270>)
 8000e72:	2201      	movs	r2, #1
 8000e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e76:	f7ff fc6b 	bl	8000750 <HAL_GetTick>
 8000e7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e7c:	e008      	b.n	8000e90 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e7e:	f7ff fc67 	bl	8000750 <HAL_GetTick>
 8000e82:	4602      	mov	r2, r0
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	1ad3      	subs	r3, r2, r3
 8000e88:	2b02      	cmp	r3, #2
 8000e8a:	d901      	bls.n	8000e90 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	e19b      	b.n	80011c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e90:	4b2d      	ldr	r3, [pc, #180]	; (8000f48 <HAL_RCC_OscConfig+0x26c>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f003 0302 	and.w	r3, r3, #2
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d0f0      	beq.n	8000e7e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e9c:	4b2a      	ldr	r3, [pc, #168]	; (8000f48 <HAL_RCC_OscConfig+0x26c>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	695b      	ldr	r3, [r3, #20]
 8000ea8:	00db      	lsls	r3, r3, #3
 8000eaa:	4927      	ldr	r1, [pc, #156]	; (8000f48 <HAL_RCC_OscConfig+0x26c>)
 8000eac:	4313      	orrs	r3, r2
 8000eae:	600b      	str	r3, [r1, #0]
 8000eb0:	e015      	b.n	8000ede <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000eb2:	4b26      	ldr	r3, [pc, #152]	; (8000f4c <HAL_RCC_OscConfig+0x270>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eb8:	f7ff fc4a 	bl	8000750 <HAL_GetTick>
 8000ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ebe:	e008      	b.n	8000ed2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ec0:	f7ff fc46 	bl	8000750 <HAL_GetTick>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	2b02      	cmp	r3, #2
 8000ecc:	d901      	bls.n	8000ed2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	e17a      	b.n	80011c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ed2:	4b1d      	ldr	r3, [pc, #116]	; (8000f48 <HAL_RCC_OscConfig+0x26c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f003 0302 	and.w	r3, r3, #2
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d1f0      	bne.n	8000ec0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f003 0308 	and.w	r3, r3, #8
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d03a      	beq.n	8000f60 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	699b      	ldr	r3, [r3, #24]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d019      	beq.n	8000f26 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ef2:	4b17      	ldr	r3, [pc, #92]	; (8000f50 <HAL_RCC_OscConfig+0x274>)
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ef8:	f7ff fc2a 	bl	8000750 <HAL_GetTick>
 8000efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000efe:	e008      	b.n	8000f12 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f00:	f7ff fc26 	bl	8000750 <HAL_GetTick>
 8000f04:	4602      	mov	r2, r0
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d901      	bls.n	8000f12 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	e15a      	b.n	80011c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f12:	4b0d      	ldr	r3, [pc, #52]	; (8000f48 <HAL_RCC_OscConfig+0x26c>)
 8000f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f16:	f003 0302 	and.w	r3, r3, #2
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d0f0      	beq.n	8000f00 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f1e:	2001      	movs	r0, #1
 8000f20:	f000 fad8 	bl	80014d4 <RCC_Delay>
 8000f24:	e01c      	b.n	8000f60 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f26:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <HAL_RCC_OscConfig+0x274>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f2c:	f7ff fc10 	bl	8000750 <HAL_GetTick>
 8000f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f32:	e00f      	b.n	8000f54 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f34:	f7ff fc0c 	bl	8000750 <HAL_GetTick>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	d908      	bls.n	8000f54 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f42:	2303      	movs	r3, #3
 8000f44:	e140      	b.n	80011c8 <HAL_RCC_OscConfig+0x4ec>
 8000f46:	bf00      	nop
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	42420000 	.word	0x42420000
 8000f50:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f54:	4b9e      	ldr	r3, [pc, #632]	; (80011d0 <HAL_RCC_OscConfig+0x4f4>)
 8000f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f58:	f003 0302 	and.w	r3, r3, #2
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d1e9      	bne.n	8000f34 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f003 0304 	and.w	r3, r3, #4
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	f000 80a6 	beq.w	80010ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f72:	4b97      	ldr	r3, [pc, #604]	; (80011d0 <HAL_RCC_OscConfig+0x4f4>)
 8000f74:	69db      	ldr	r3, [r3, #28]
 8000f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d10d      	bne.n	8000f9a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f7e:	4b94      	ldr	r3, [pc, #592]	; (80011d0 <HAL_RCC_OscConfig+0x4f4>)
 8000f80:	69db      	ldr	r3, [r3, #28]
 8000f82:	4a93      	ldr	r2, [pc, #588]	; (80011d0 <HAL_RCC_OscConfig+0x4f4>)
 8000f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f88:	61d3      	str	r3, [r2, #28]
 8000f8a:	4b91      	ldr	r3, [pc, #580]	; (80011d0 <HAL_RCC_OscConfig+0x4f4>)
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f96:	2301      	movs	r3, #1
 8000f98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f9a:	4b8e      	ldr	r3, [pc, #568]	; (80011d4 <HAL_RCC_OscConfig+0x4f8>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d118      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fa6:	4b8b      	ldr	r3, [pc, #556]	; (80011d4 <HAL_RCC_OscConfig+0x4f8>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a8a      	ldr	r2, [pc, #552]	; (80011d4 <HAL_RCC_OscConfig+0x4f8>)
 8000fac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fb2:	f7ff fbcd 	bl	8000750 <HAL_GetTick>
 8000fb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fb8:	e008      	b.n	8000fcc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fba:	f7ff fbc9 	bl	8000750 <HAL_GetTick>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	1ad3      	subs	r3, r2, r3
 8000fc4:	2b64      	cmp	r3, #100	; 0x64
 8000fc6:	d901      	bls.n	8000fcc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	e0fd      	b.n	80011c8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fcc:	4b81      	ldr	r3, [pc, #516]	; (80011d4 <HAL_RCC_OscConfig+0x4f8>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d0f0      	beq.n	8000fba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d106      	bne.n	8000fee <HAL_RCC_OscConfig+0x312>
 8000fe0:	4b7b      	ldr	r3, [pc, #492]	; (80011d0 <HAL_RCC_OscConfig+0x4f4>)
 8000fe2:	6a1b      	ldr	r3, [r3, #32]
 8000fe4:	4a7a      	ldr	r2, [pc, #488]	; (80011d0 <HAL_RCC_OscConfig+0x4f4>)
 8000fe6:	f043 0301 	orr.w	r3, r3, #1
 8000fea:	6213      	str	r3, [r2, #32]
 8000fec:	e02d      	b.n	800104a <HAL_RCC_OscConfig+0x36e>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	68db      	ldr	r3, [r3, #12]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d10c      	bne.n	8001010 <HAL_RCC_OscConfig+0x334>
 8000ff6:	4b76      	ldr	r3, [pc, #472]	; (80011d0 <HAL_RCC_OscConfig+0x4f4>)
 8000ff8:	6a1b      	ldr	r3, [r3, #32]
 8000ffa:	4a75      	ldr	r2, [pc, #468]	; (80011d0 <HAL_RCC_OscConfig+0x4f4>)
 8000ffc:	f023 0301 	bic.w	r3, r3, #1
 8001000:	6213      	str	r3, [r2, #32]
 8001002:	4b73      	ldr	r3, [pc, #460]	; (80011d0 <HAL_RCC_OscConfig+0x4f4>)
 8001004:	6a1b      	ldr	r3, [r3, #32]
 8001006:	4a72      	ldr	r2, [pc, #456]	; (80011d0 <HAL_RCC_OscConfig+0x4f4>)
 8001008:	f023 0304 	bic.w	r3, r3, #4
 800100c:	6213      	str	r3, [r2, #32]
 800100e:	e01c      	b.n	800104a <HAL_RCC_OscConfig+0x36e>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	2b05      	cmp	r3, #5
 8001016:	d10c      	bne.n	8001032 <HAL_RCC_OscConfig+0x356>
 8001018:	4b6d      	ldr	r3, [pc, #436]	; (80011d0 <HAL_RCC_OscConfig+0x4f4>)
 800101a:	6a1b      	ldr	r3, [r3, #32]
 800101c:	4a6c      	ldr	r2, [pc, #432]	; (80011d0 <HAL_RCC_OscConfig+0x4f4>)
 800101e:	f043 0304 	orr.w	r3, r3, #4
 8001022:	6213      	str	r3, [r2, #32]
 8001024:	4b6a      	ldr	r3, [pc, #424]	; (80011d0 <HAL_RCC_OscConfig+0x4f4>)
 8001026:	6a1b      	ldr	r3, [r3, #32]
 8001028:	4a69      	ldr	r2, [pc, #420]	; (80011d0 <HAL_RCC_OscConfig+0x4f4>)
 800102a:	f043 0301 	orr.w	r3, r3, #1
 800102e:	6213      	str	r3, [r2, #32]
 8001030:	e00b      	b.n	800104a <HAL_RCC_OscConfig+0x36e>
 8001032:	4b67      	ldr	r3, [pc, #412]	; (80011d0 <HAL_RCC_OscConfig+0x4f4>)
 8001034:	6a1b      	ldr	r3, [r3, #32]
 8001036:	4a66      	ldr	r2, [pc, #408]	; (80011d0 <HAL_RCC_OscConfig+0x4f4>)
 8001038:	f023 0301 	bic.w	r3, r3, #1
 800103c:	6213      	str	r3, [r2, #32]
 800103e:	4b64      	ldr	r3, [pc, #400]	; (80011d0 <HAL_RCC_OscConfig+0x4f4>)
 8001040:	6a1b      	ldr	r3, [r3, #32]
 8001042:	4a63      	ldr	r2, [pc, #396]	; (80011d0 <HAL_RCC_OscConfig+0x4f4>)
 8001044:	f023 0304 	bic.w	r3, r3, #4
 8001048:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	68db      	ldr	r3, [r3, #12]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d015      	beq.n	800107e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001052:	f7ff fb7d 	bl	8000750 <HAL_GetTick>
 8001056:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001058:	e00a      	b.n	8001070 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800105a:	f7ff fb79 	bl	8000750 <HAL_GetTick>
 800105e:	4602      	mov	r2, r0
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	f241 3288 	movw	r2, #5000	; 0x1388
 8001068:	4293      	cmp	r3, r2
 800106a:	d901      	bls.n	8001070 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800106c:	2303      	movs	r3, #3
 800106e:	e0ab      	b.n	80011c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001070:	4b57      	ldr	r3, [pc, #348]	; (80011d0 <HAL_RCC_OscConfig+0x4f4>)
 8001072:	6a1b      	ldr	r3, [r3, #32]
 8001074:	f003 0302 	and.w	r3, r3, #2
 8001078:	2b00      	cmp	r3, #0
 800107a:	d0ee      	beq.n	800105a <HAL_RCC_OscConfig+0x37e>
 800107c:	e014      	b.n	80010a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800107e:	f7ff fb67 	bl	8000750 <HAL_GetTick>
 8001082:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001084:	e00a      	b.n	800109c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001086:	f7ff fb63 	bl	8000750 <HAL_GetTick>
 800108a:	4602      	mov	r2, r0
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	f241 3288 	movw	r2, #5000	; 0x1388
 8001094:	4293      	cmp	r3, r2
 8001096:	d901      	bls.n	800109c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001098:	2303      	movs	r3, #3
 800109a:	e095      	b.n	80011c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800109c:	4b4c      	ldr	r3, [pc, #304]	; (80011d0 <HAL_RCC_OscConfig+0x4f4>)
 800109e:	6a1b      	ldr	r3, [r3, #32]
 80010a0:	f003 0302 	and.w	r3, r3, #2
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d1ee      	bne.n	8001086 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80010a8:	7dfb      	ldrb	r3, [r7, #23]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d105      	bne.n	80010ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010ae:	4b48      	ldr	r3, [pc, #288]	; (80011d0 <HAL_RCC_OscConfig+0x4f4>)
 80010b0:	69db      	ldr	r3, [r3, #28]
 80010b2:	4a47      	ldr	r2, [pc, #284]	; (80011d0 <HAL_RCC_OscConfig+0x4f4>)
 80010b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	69db      	ldr	r3, [r3, #28]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	f000 8081 	beq.w	80011c6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010c4:	4b42      	ldr	r3, [pc, #264]	; (80011d0 <HAL_RCC_OscConfig+0x4f4>)
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f003 030c 	and.w	r3, r3, #12
 80010cc:	2b08      	cmp	r3, #8
 80010ce:	d061      	beq.n	8001194 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	69db      	ldr	r3, [r3, #28]
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d146      	bne.n	8001166 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010d8:	4b3f      	ldr	r3, [pc, #252]	; (80011d8 <HAL_RCC_OscConfig+0x4fc>)
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010de:	f7ff fb37 	bl	8000750 <HAL_GetTick>
 80010e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010e4:	e008      	b.n	80010f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010e6:	f7ff fb33 	bl	8000750 <HAL_GetTick>
 80010ea:	4602      	mov	r2, r0
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d901      	bls.n	80010f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80010f4:	2303      	movs	r3, #3
 80010f6:	e067      	b.n	80011c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010f8:	4b35      	ldr	r3, [pc, #212]	; (80011d0 <HAL_RCC_OscConfig+0x4f4>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d1f0      	bne.n	80010e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6a1b      	ldr	r3, [r3, #32]
 8001108:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800110c:	d108      	bne.n	8001120 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800110e:	4b30      	ldr	r3, [pc, #192]	; (80011d0 <HAL_RCC_OscConfig+0x4f4>)
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	492d      	ldr	r1, [pc, #180]	; (80011d0 <HAL_RCC_OscConfig+0x4f4>)
 800111c:	4313      	orrs	r3, r2
 800111e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001120:	4b2b      	ldr	r3, [pc, #172]	; (80011d0 <HAL_RCC_OscConfig+0x4f4>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6a19      	ldr	r1, [r3, #32]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001130:	430b      	orrs	r3, r1
 8001132:	4927      	ldr	r1, [pc, #156]	; (80011d0 <HAL_RCC_OscConfig+0x4f4>)
 8001134:	4313      	orrs	r3, r2
 8001136:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001138:	4b27      	ldr	r3, [pc, #156]	; (80011d8 <HAL_RCC_OscConfig+0x4fc>)
 800113a:	2201      	movs	r2, #1
 800113c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800113e:	f7ff fb07 	bl	8000750 <HAL_GetTick>
 8001142:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001144:	e008      	b.n	8001158 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001146:	f7ff fb03 	bl	8000750 <HAL_GetTick>
 800114a:	4602      	mov	r2, r0
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	2b02      	cmp	r3, #2
 8001152:	d901      	bls.n	8001158 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001154:	2303      	movs	r3, #3
 8001156:	e037      	b.n	80011c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001158:	4b1d      	ldr	r3, [pc, #116]	; (80011d0 <HAL_RCC_OscConfig+0x4f4>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d0f0      	beq.n	8001146 <HAL_RCC_OscConfig+0x46a>
 8001164:	e02f      	b.n	80011c6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001166:	4b1c      	ldr	r3, [pc, #112]	; (80011d8 <HAL_RCC_OscConfig+0x4fc>)
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800116c:	f7ff faf0 	bl	8000750 <HAL_GetTick>
 8001170:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001172:	e008      	b.n	8001186 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001174:	f7ff faec 	bl	8000750 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	2b02      	cmp	r3, #2
 8001180:	d901      	bls.n	8001186 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001182:	2303      	movs	r3, #3
 8001184:	e020      	b.n	80011c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001186:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <HAL_RCC_OscConfig+0x4f4>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d1f0      	bne.n	8001174 <HAL_RCC_OscConfig+0x498>
 8001192:	e018      	b.n	80011c6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	69db      	ldr	r3, [r3, #28]
 8001198:	2b01      	cmp	r3, #1
 800119a:	d101      	bne.n	80011a0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	e013      	b.n	80011c8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80011a0:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <HAL_RCC_OscConfig+0x4f4>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6a1b      	ldr	r3, [r3, #32]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d106      	bne.n	80011c2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011be:	429a      	cmp	r2, r3
 80011c0:	d001      	beq.n	80011c6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e000      	b.n	80011c8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80011c6:	2300      	movs	r3, #0
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3718      	adds	r7, #24
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40021000 	.word	0x40021000
 80011d4:	40007000 	.word	0x40007000
 80011d8:	42420060 	.word	0x42420060

080011dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d101      	bne.n	80011f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e0d0      	b.n	8001392 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011f0:	4b6a      	ldr	r3, [pc, #424]	; (800139c <HAL_RCC_ClockConfig+0x1c0>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 0307 	and.w	r3, r3, #7
 80011f8:	683a      	ldr	r2, [r7, #0]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d910      	bls.n	8001220 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011fe:	4b67      	ldr	r3, [pc, #412]	; (800139c <HAL_RCC_ClockConfig+0x1c0>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f023 0207 	bic.w	r2, r3, #7
 8001206:	4965      	ldr	r1, [pc, #404]	; (800139c <HAL_RCC_ClockConfig+0x1c0>)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	4313      	orrs	r3, r2
 800120c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800120e:	4b63      	ldr	r3, [pc, #396]	; (800139c <HAL_RCC_ClockConfig+0x1c0>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0307 	and.w	r3, r3, #7
 8001216:	683a      	ldr	r2, [r7, #0]
 8001218:	429a      	cmp	r2, r3
 800121a:	d001      	beq.n	8001220 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	e0b8      	b.n	8001392 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 0302 	and.w	r3, r3, #2
 8001228:	2b00      	cmp	r3, #0
 800122a:	d020      	beq.n	800126e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 0304 	and.w	r3, r3, #4
 8001234:	2b00      	cmp	r3, #0
 8001236:	d005      	beq.n	8001244 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001238:	4b59      	ldr	r3, [pc, #356]	; (80013a0 <HAL_RCC_ClockConfig+0x1c4>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	4a58      	ldr	r2, [pc, #352]	; (80013a0 <HAL_RCC_ClockConfig+0x1c4>)
 800123e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001242:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 0308 	and.w	r3, r3, #8
 800124c:	2b00      	cmp	r3, #0
 800124e:	d005      	beq.n	800125c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001250:	4b53      	ldr	r3, [pc, #332]	; (80013a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	4a52      	ldr	r2, [pc, #328]	; (80013a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001256:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800125a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800125c:	4b50      	ldr	r3, [pc, #320]	; (80013a0 <HAL_RCC_ClockConfig+0x1c4>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	494d      	ldr	r1, [pc, #308]	; (80013a0 <HAL_RCC_ClockConfig+0x1c4>)
 800126a:	4313      	orrs	r3, r2
 800126c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	2b00      	cmp	r3, #0
 8001278:	d040      	beq.n	80012fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	2b01      	cmp	r3, #1
 8001280:	d107      	bne.n	8001292 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001282:	4b47      	ldr	r3, [pc, #284]	; (80013a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d115      	bne.n	80012ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e07f      	b.n	8001392 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	2b02      	cmp	r3, #2
 8001298:	d107      	bne.n	80012aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800129a:	4b41      	ldr	r3, [pc, #260]	; (80013a0 <HAL_RCC_ClockConfig+0x1c4>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d109      	bne.n	80012ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e073      	b.n	8001392 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012aa:	4b3d      	ldr	r3, [pc, #244]	; (80013a0 <HAL_RCC_ClockConfig+0x1c4>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d101      	bne.n	80012ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e06b      	b.n	8001392 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012ba:	4b39      	ldr	r3, [pc, #228]	; (80013a0 <HAL_RCC_ClockConfig+0x1c4>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f023 0203 	bic.w	r2, r3, #3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	4936      	ldr	r1, [pc, #216]	; (80013a0 <HAL_RCC_ClockConfig+0x1c4>)
 80012c8:	4313      	orrs	r3, r2
 80012ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012cc:	f7ff fa40 	bl	8000750 <HAL_GetTick>
 80012d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012d2:	e00a      	b.n	80012ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012d4:	f7ff fa3c 	bl	8000750 <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	f241 3288 	movw	r2, #5000	; 0x1388
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e053      	b.n	8001392 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012ea:	4b2d      	ldr	r3, [pc, #180]	; (80013a0 <HAL_RCC_ClockConfig+0x1c4>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f003 020c 	and.w	r2, r3, #12
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d1eb      	bne.n	80012d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012fc:	4b27      	ldr	r3, [pc, #156]	; (800139c <HAL_RCC_ClockConfig+0x1c0>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 0307 	and.w	r3, r3, #7
 8001304:	683a      	ldr	r2, [r7, #0]
 8001306:	429a      	cmp	r2, r3
 8001308:	d210      	bcs.n	800132c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800130a:	4b24      	ldr	r3, [pc, #144]	; (800139c <HAL_RCC_ClockConfig+0x1c0>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f023 0207 	bic.w	r2, r3, #7
 8001312:	4922      	ldr	r1, [pc, #136]	; (800139c <HAL_RCC_ClockConfig+0x1c0>)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	4313      	orrs	r3, r2
 8001318:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800131a:	4b20      	ldr	r3, [pc, #128]	; (800139c <HAL_RCC_ClockConfig+0x1c0>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	429a      	cmp	r2, r3
 8001326:	d001      	beq.n	800132c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	e032      	b.n	8001392 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 0304 	and.w	r3, r3, #4
 8001334:	2b00      	cmp	r3, #0
 8001336:	d008      	beq.n	800134a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001338:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <HAL_RCC_ClockConfig+0x1c4>)
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	4916      	ldr	r1, [pc, #88]	; (80013a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001346:	4313      	orrs	r3, r2
 8001348:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0308 	and.w	r3, r3, #8
 8001352:	2b00      	cmp	r3, #0
 8001354:	d009      	beq.n	800136a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001356:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	691b      	ldr	r3, [r3, #16]
 8001362:	00db      	lsls	r3, r3, #3
 8001364:	490e      	ldr	r1, [pc, #56]	; (80013a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001366:	4313      	orrs	r3, r2
 8001368:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800136a:	f000 f821 	bl	80013b0 <HAL_RCC_GetSysClockFreq>
 800136e:	4602      	mov	r2, r0
 8001370:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	091b      	lsrs	r3, r3, #4
 8001376:	f003 030f 	and.w	r3, r3, #15
 800137a:	490a      	ldr	r1, [pc, #40]	; (80013a4 <HAL_RCC_ClockConfig+0x1c8>)
 800137c:	5ccb      	ldrb	r3, [r1, r3]
 800137e:	fa22 f303 	lsr.w	r3, r2, r3
 8001382:	4a09      	ldr	r2, [pc, #36]	; (80013a8 <HAL_RCC_ClockConfig+0x1cc>)
 8001384:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001386:	4b09      	ldr	r3, [pc, #36]	; (80013ac <HAL_RCC_ClockConfig+0x1d0>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff f99e 	bl	80006cc <HAL_InitTick>

  return HAL_OK;
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40022000 	.word	0x40022000
 80013a0:	40021000 	.word	0x40021000
 80013a4:	080048ac 	.word	0x080048ac
 80013a8:	20000000 	.word	0x20000000
 80013ac:	20000004 	.word	0x20000004

080013b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013b0:	b490      	push	{r4, r7}
 80013b2:	b08a      	sub	sp, #40	; 0x28
 80013b4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80013b6:	4b2a      	ldr	r3, [pc, #168]	; (8001460 <HAL_RCC_GetSysClockFreq+0xb0>)
 80013b8:	1d3c      	adds	r4, r7, #4
 80013ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80013c0:	f240 2301 	movw	r3, #513	; 0x201
 80013c4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61fb      	str	r3, [r7, #28]
 80013ca:	2300      	movs	r3, #0
 80013cc:	61bb      	str	r3, [r7, #24]
 80013ce:	2300      	movs	r3, #0
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
 80013d2:	2300      	movs	r3, #0
 80013d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80013d6:	2300      	movs	r3, #0
 80013d8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80013da:	4b22      	ldr	r3, [pc, #136]	; (8001464 <HAL_RCC_GetSysClockFreq+0xb4>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	f003 030c 	and.w	r3, r3, #12
 80013e6:	2b04      	cmp	r3, #4
 80013e8:	d002      	beq.n	80013f0 <HAL_RCC_GetSysClockFreq+0x40>
 80013ea:	2b08      	cmp	r3, #8
 80013ec:	d003      	beq.n	80013f6 <HAL_RCC_GetSysClockFreq+0x46>
 80013ee:	e02d      	b.n	800144c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013f0:	4b1d      	ldr	r3, [pc, #116]	; (8001468 <HAL_RCC_GetSysClockFreq+0xb8>)
 80013f2:	623b      	str	r3, [r7, #32]
      break;
 80013f4:	e02d      	b.n	8001452 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	0c9b      	lsrs	r3, r3, #18
 80013fa:	f003 030f 	and.w	r3, r3, #15
 80013fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001402:	4413      	add	r3, r2
 8001404:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001408:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d013      	beq.n	800143c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001414:	4b13      	ldr	r3, [pc, #76]	; (8001464 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	0c5b      	lsrs	r3, r3, #17
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001422:	4413      	add	r3, r2
 8001424:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001428:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	4a0e      	ldr	r2, [pc, #56]	; (8001468 <HAL_RCC_GetSysClockFreq+0xb8>)
 800142e:	fb02 f203 	mul.w	r2, r2, r3
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	fbb2 f3f3 	udiv	r3, r2, r3
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
 800143a:	e004      	b.n	8001446 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	4a0b      	ldr	r2, [pc, #44]	; (800146c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001440:	fb02 f303 	mul.w	r3, r2, r3
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001448:	623b      	str	r3, [r7, #32]
      break;
 800144a:	e002      	b.n	8001452 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800144c:	4b06      	ldr	r3, [pc, #24]	; (8001468 <HAL_RCC_GetSysClockFreq+0xb8>)
 800144e:	623b      	str	r3, [r7, #32]
      break;
 8001450:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001452:	6a3b      	ldr	r3, [r7, #32]
}
 8001454:	4618      	mov	r0, r3
 8001456:	3728      	adds	r7, #40	; 0x28
 8001458:	46bd      	mov	sp, r7
 800145a:	bc90      	pop	{r4, r7}
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	0800414c 	.word	0x0800414c
 8001464:	40021000 	.word	0x40021000
 8001468:	007a1200 	.word	0x007a1200
 800146c:	003d0900 	.word	0x003d0900

08001470 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001474:	4b02      	ldr	r3, [pc, #8]	; (8001480 <HAL_RCC_GetHCLKFreq+0x10>)
 8001476:	681b      	ldr	r3, [r3, #0]
}
 8001478:	4618      	mov	r0, r3
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr
 8001480:	20000000 	.word	0x20000000

08001484 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001488:	f7ff fff2 	bl	8001470 <HAL_RCC_GetHCLKFreq>
 800148c:	4602      	mov	r2, r0
 800148e:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	0a1b      	lsrs	r3, r3, #8
 8001494:	f003 0307 	and.w	r3, r3, #7
 8001498:	4903      	ldr	r1, [pc, #12]	; (80014a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800149a:	5ccb      	ldrb	r3, [r1, r3]
 800149c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40021000 	.word	0x40021000
 80014a8:	080048bc 	.word	0x080048bc

080014ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80014b0:	f7ff ffde 	bl	8001470 <HAL_RCC_GetHCLKFreq>
 80014b4:	4602      	mov	r2, r0
 80014b6:	4b05      	ldr	r3, [pc, #20]	; (80014cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	0adb      	lsrs	r3, r3, #11
 80014bc:	f003 0307 	and.w	r3, r3, #7
 80014c0:	4903      	ldr	r1, [pc, #12]	; (80014d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80014c2:	5ccb      	ldrb	r3, [r1, r3]
 80014c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40021000 	.word	0x40021000
 80014d0:	080048bc 	.word	0x080048bc

080014d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014dc:	4b0a      	ldr	r3, [pc, #40]	; (8001508 <RCC_Delay+0x34>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a0a      	ldr	r2, [pc, #40]	; (800150c <RCC_Delay+0x38>)
 80014e2:	fba2 2303 	umull	r2, r3, r2, r3
 80014e6:	0a5b      	lsrs	r3, r3, #9
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	fb02 f303 	mul.w	r3, r2, r3
 80014ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80014f0:	bf00      	nop
  }
  while (Delay --);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	1e5a      	subs	r2, r3, #1
 80014f6:	60fa      	str	r2, [r7, #12]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d1f9      	bne.n	80014f0 <RCC_Delay+0x1c>
}
 80014fc:	bf00      	nop
 80014fe:	bf00      	nop
 8001500:	3714      	adds	r7, #20
 8001502:	46bd      	mov	sp, r7
 8001504:	bc80      	pop	{r7}
 8001506:	4770      	bx	lr
 8001508:	20000000 	.word	0x20000000
 800150c:	10624dd3 	.word	0x10624dd3

08001510 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d101      	bne.n	8001522 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e076      	b.n	8001610 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001526:	2b00      	cmp	r3, #0
 8001528:	d108      	bne.n	800153c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001532:	d009      	beq.n	8001548 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	61da      	str	r2, [r3, #28]
 800153a:	e005      	b.n	8001548 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2200      	movs	r2, #0
 8001540:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b00      	cmp	r3, #0
 8001558:	d106      	bne.n	8001568 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f7fe ff7c 	bl	8000460 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2202      	movs	r2, #2
 800156c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800157e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001590:	431a      	orrs	r2, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800159a:	431a      	orrs	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	691b      	ldr	r3, [r3, #16]
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	431a      	orrs	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	695b      	ldr	r3, [r3, #20]
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	431a      	orrs	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015b8:	431a      	orrs	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	69db      	ldr	r3, [r3, #28]
 80015be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80015c2:	431a      	orrs	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a1b      	ldr	r3, [r3, #32]
 80015c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015cc:	ea42 0103 	orr.w	r1, r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	430a      	orrs	r2, r1
 80015de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	0c1a      	lsrs	r2, r3, #16
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f002 0204 	and.w	r2, r2, #4
 80015ee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	69da      	ldr	r2, [r3, #28]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015fe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2201      	movs	r2, #1
 800160a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800160e:	2300      	movs	r3, #0
}
 8001610:	4618      	mov	r0, r3
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b088      	sub	sp, #32
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	603b      	str	r3, [r7, #0]
 8001624:	4613      	mov	r3, r2
 8001626:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001628:	2300      	movs	r3, #0
 800162a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001632:	2b01      	cmp	r3, #1
 8001634:	d101      	bne.n	800163a <HAL_SPI_Transmit+0x22>
 8001636:	2302      	movs	r3, #2
 8001638:	e126      	b.n	8001888 <HAL_SPI_Transmit+0x270>
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2201      	movs	r2, #1
 800163e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001642:	f7ff f885 	bl	8000750 <HAL_GetTick>
 8001646:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001648:	88fb      	ldrh	r3, [r7, #6]
 800164a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b01      	cmp	r3, #1
 8001656:	d002      	beq.n	800165e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001658:	2302      	movs	r3, #2
 800165a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800165c:	e10b      	b.n	8001876 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d002      	beq.n	800166a <HAL_SPI_Transmit+0x52>
 8001664:	88fb      	ldrh	r3, [r7, #6]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d102      	bne.n	8001670 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800166e:	e102      	b.n	8001876 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2203      	movs	r2, #3
 8001674:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2200      	movs	r2, #0
 800167c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	68ba      	ldr	r2, [r7, #8]
 8001682:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	88fa      	ldrh	r2, [r7, #6]
 8001688:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	88fa      	ldrh	r2, [r7, #6]
 800168e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	2200      	movs	r2, #0
 8001694:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2200      	movs	r2, #0
 800169a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2200      	movs	r2, #0
 80016a0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2200      	movs	r2, #0
 80016a6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2200      	movs	r2, #0
 80016ac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016b6:	d10f      	bne.n	80016d8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80016c6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80016d6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016e2:	2b40      	cmp	r3, #64	; 0x40
 80016e4:	d007      	beq.n	80016f6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016fe:	d14b      	bne.n	8001798 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d002      	beq.n	800170e <HAL_SPI_Transmit+0xf6>
 8001708:	8afb      	ldrh	r3, [r7, #22]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d13e      	bne.n	800178c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	881a      	ldrh	r2, [r3, #0]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	1c9a      	adds	r2, r3, #2
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001728:	b29b      	uxth	r3, r3
 800172a:	3b01      	subs	r3, #1
 800172c:	b29a      	uxth	r2, r3
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001732:	e02b      	b.n	800178c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b02      	cmp	r3, #2
 8001740:	d112      	bne.n	8001768 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	881a      	ldrh	r2, [r3, #0]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	1c9a      	adds	r2, r3, #2
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800175c:	b29b      	uxth	r3, r3
 800175e:	3b01      	subs	r3, #1
 8001760:	b29a      	uxth	r2, r3
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	86da      	strh	r2, [r3, #54]	; 0x36
 8001766:	e011      	b.n	800178c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001768:	f7fe fff2 	bl	8000750 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	683a      	ldr	r2, [r7, #0]
 8001774:	429a      	cmp	r2, r3
 8001776:	d803      	bhi.n	8001780 <HAL_SPI_Transmit+0x168>
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800177e:	d102      	bne.n	8001786 <HAL_SPI_Transmit+0x16e>
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d102      	bne.n	800178c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	77fb      	strb	r3, [r7, #31]
          goto error;
 800178a:	e074      	b.n	8001876 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001790:	b29b      	uxth	r3, r3
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1ce      	bne.n	8001734 <HAL_SPI_Transmit+0x11c>
 8001796:	e04c      	b.n	8001832 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d002      	beq.n	80017a6 <HAL_SPI_Transmit+0x18e>
 80017a0:	8afb      	ldrh	r3, [r7, #22]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d140      	bne.n	8001828 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	330c      	adds	r3, #12
 80017b0:	7812      	ldrb	r2, [r2, #0]
 80017b2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b8:	1c5a      	adds	r2, r3, #1
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	3b01      	subs	r3, #1
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80017cc:	e02c      	b.n	8001828 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d113      	bne.n	8001804 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	330c      	adds	r3, #12
 80017e6:	7812      	ldrb	r2, [r2, #0]
 80017e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	1c5a      	adds	r2, r3, #1
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	3b01      	subs	r3, #1
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	86da      	strh	r2, [r3, #54]	; 0x36
 8001802:	e011      	b.n	8001828 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001804:	f7fe ffa4 	bl	8000750 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	683a      	ldr	r2, [r7, #0]
 8001810:	429a      	cmp	r2, r3
 8001812:	d803      	bhi.n	800181c <HAL_SPI_Transmit+0x204>
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800181a:	d102      	bne.n	8001822 <HAL_SPI_Transmit+0x20a>
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d102      	bne.n	8001828 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001826:	e026      	b.n	8001876 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800182c:	b29b      	uxth	r3, r3
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1cd      	bne.n	80017ce <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	6839      	ldr	r1, [r7, #0]
 8001836:	68f8      	ldr	r0, [r7, #12]
 8001838:	f000 fbb8 	bl	8001fac <SPI_EndRxTxTransaction>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d002      	beq.n	8001848 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2220      	movs	r2, #32
 8001846:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d10a      	bne.n	8001866 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001850:	2300      	movs	r3, #0
 8001852:	613b      	str	r3, [r7, #16]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	613b      	str	r3, [r7, #16]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	613b      	str	r3, [r7, #16]
 8001864:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800186a:	2b00      	cmp	r3, #0
 800186c:	d002      	beq.n	8001874 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	77fb      	strb	r3, [r7, #31]
 8001872:	e000      	b.n	8001876 <HAL_SPI_Transmit+0x25e>
  }

error:
 8001874:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2201      	movs	r2, #1
 800187a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2200      	movs	r2, #0
 8001882:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001886:	7ffb      	ldrb	r3, [r7, #31]
}
 8001888:	4618      	mov	r0, r3
 800188a:	3720      	adds	r7, #32
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b088      	sub	sp, #32
 8001894:	af02      	add	r7, sp, #8
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	603b      	str	r3, [r7, #0]
 800189c:	4613      	mov	r3, r2
 800189e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80018a0:	2300      	movs	r3, #0
 80018a2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80018ac:	d112      	bne.n	80018d4 <HAL_SPI_Receive+0x44>
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d10e      	bne.n	80018d4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2204      	movs	r2, #4
 80018ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80018be:	88fa      	ldrh	r2, [r7, #6]
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	9300      	str	r3, [sp, #0]
 80018c4:	4613      	mov	r3, r2
 80018c6:	68ba      	ldr	r2, [r7, #8]
 80018c8:	68b9      	ldr	r1, [r7, #8]
 80018ca:	68f8      	ldr	r0, [r7, #12]
 80018cc:	f000 f8f1 	bl	8001ab2 <HAL_SPI_TransmitReceive>
 80018d0:	4603      	mov	r3, r0
 80018d2:	e0ea      	b.n	8001aaa <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d101      	bne.n	80018e2 <HAL_SPI_Receive+0x52>
 80018de:	2302      	movs	r3, #2
 80018e0:	e0e3      	b.n	8001aaa <HAL_SPI_Receive+0x21a>
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2201      	movs	r2, #1
 80018e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80018ea:	f7fe ff31 	bl	8000750 <HAL_GetTick>
 80018ee:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d002      	beq.n	8001902 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80018fc:	2302      	movs	r3, #2
 80018fe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001900:	e0ca      	b.n	8001a98 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d002      	beq.n	800190e <HAL_SPI_Receive+0x7e>
 8001908:	88fb      	ldrh	r3, [r7, #6]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d102      	bne.n	8001914 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001912:	e0c1      	b.n	8001a98 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2204      	movs	r2, #4
 8001918:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2200      	movs	r2, #0
 8001920:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	68ba      	ldr	r2, [r7, #8]
 8001926:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	88fa      	ldrh	r2, [r7, #6]
 800192c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	88fa      	ldrh	r2, [r7, #6]
 8001932:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2200      	movs	r2, #0
 8001938:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2200      	movs	r2, #0
 800193e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2200      	movs	r2, #0
 8001944:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2200      	movs	r2, #0
 800194a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2200      	movs	r2, #0
 8001950:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800195a:	d10f      	bne.n	800197c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800196a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800197a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001986:	2b40      	cmp	r3, #64	; 0x40
 8001988:	d007      	beq.n	800199a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001998:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d162      	bne.n	8001a68 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80019a2:	e02e      	b.n	8001a02 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d115      	bne.n	80019de <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f103 020c 	add.w	r2, r3, #12
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019be:	7812      	ldrb	r2, [r2, #0]
 80019c0:	b2d2      	uxtb	r2, r2
 80019c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019c8:	1c5a      	adds	r2, r3, #1
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	3b01      	subs	r3, #1
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80019dc:	e011      	b.n	8001a02 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80019de:	f7fe feb7 	bl	8000750 <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d803      	bhi.n	80019f6 <HAL_SPI_Receive+0x166>
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019f4:	d102      	bne.n	80019fc <HAL_SPI_Receive+0x16c>
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d102      	bne.n	8001a02 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001a00:	e04a      	b.n	8001a98 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d1cb      	bne.n	80019a4 <HAL_SPI_Receive+0x114>
 8001a0c:	e031      	b.n	8001a72 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f003 0301 	and.w	r3, r3, #1
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d113      	bne.n	8001a44 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	68da      	ldr	r2, [r3, #12]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a26:	b292      	uxth	r2, r2
 8001a28:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a2e:	1c9a      	adds	r2, r3, #2
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001a42:	e011      	b.n	8001a68 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001a44:	f7fe fe84 	bl	8000750 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	683a      	ldr	r2, [r7, #0]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d803      	bhi.n	8001a5c <HAL_SPI_Receive+0x1cc>
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a5a:	d102      	bne.n	8001a62 <HAL_SPI_Receive+0x1d2>
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d102      	bne.n	8001a68 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001a66:	e017      	b.n	8001a98 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1cd      	bne.n	8001a0e <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	6839      	ldr	r1, [r7, #0]
 8001a76:	68f8      	ldr	r0, [r7, #12]
 8001a78:	f000 fa46 	bl	8001f08 <SPI_EndRxTransaction>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d002      	beq.n	8001a88 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2220      	movs	r2, #32
 8001a86:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d002      	beq.n	8001a96 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	75fb      	strb	r3, [r7, #23]
 8001a94:	e000      	b.n	8001a98 <HAL_SPI_Receive+0x208>
  }

error :
 8001a96:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001aa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3718      	adds	r7, #24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b08c      	sub	sp, #48	; 0x30
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	60f8      	str	r0, [r7, #12]
 8001aba:	60b9      	str	r1, [r7, #8]
 8001abc:	607a      	str	r2, [r7, #4]
 8001abe:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d101      	bne.n	8001ad8 <HAL_SPI_TransmitReceive+0x26>
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	e18a      	b.n	8001dee <HAL_SPI_TransmitReceive+0x33c>
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001ae0:	f7fe fe36 	bl	8000750 <HAL_GetTick>
 8001ae4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001aec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001af6:	887b      	ldrh	r3, [r7, #2]
 8001af8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001afa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d00f      	beq.n	8001b22 <HAL_SPI_TransmitReceive+0x70>
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001b08:	d107      	bne.n	8001b1a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d103      	bne.n	8001b1a <HAL_SPI_TransmitReceive+0x68>
 8001b12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001b16:	2b04      	cmp	r3, #4
 8001b18:	d003      	beq.n	8001b22 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001b20:	e15b      	b.n	8001dda <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d005      	beq.n	8001b34 <HAL_SPI_TransmitReceive+0x82>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d002      	beq.n	8001b34 <HAL_SPI_TransmitReceive+0x82>
 8001b2e:	887b      	ldrh	r3, [r7, #2]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d103      	bne.n	8001b3c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001b3a:	e14e      	b.n	8001dda <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	2b04      	cmp	r3, #4
 8001b46:	d003      	beq.n	8001b50 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2205      	movs	r2, #5
 8001b4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2200      	movs	r2, #0
 8001b54:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	887a      	ldrh	r2, [r7, #2]
 8001b60:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	887a      	ldrh	r2, [r7, #2]
 8001b66:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	68ba      	ldr	r2, [r7, #8]
 8001b6c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	887a      	ldrh	r2, [r7, #2]
 8001b72:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	887a      	ldrh	r2, [r7, #2]
 8001b78:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2200      	movs	r2, #0
 8001b84:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b90:	2b40      	cmp	r3, #64	; 0x40
 8001b92:	d007      	beq.n	8001ba4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ba2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001bac:	d178      	bne.n	8001ca0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d002      	beq.n	8001bbc <HAL_SPI_TransmitReceive+0x10a>
 8001bb6:	8b7b      	ldrh	r3, [r7, #26]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d166      	bne.n	8001c8a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc0:	881a      	ldrh	r2, [r3, #0]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bcc:	1c9a      	adds	r2, r3, #2
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	3b01      	subs	r3, #1
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001be0:	e053      	b.n	8001c8a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d11b      	bne.n	8001c28 <HAL_SPI_TransmitReceive+0x176>
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d016      	beq.n	8001c28 <HAL_SPI_TransmitReceive+0x176>
 8001bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d113      	bne.n	8001c28 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c04:	881a      	ldrh	r2, [r3, #0]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c10:	1c9a      	adds	r2, r3, #2
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001c24:	2300      	movs	r3, #0
 8001c26:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d119      	bne.n	8001c6a <HAL_SPI_TransmitReceive+0x1b8>
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d014      	beq.n	8001c6a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	68da      	ldr	r2, [r3, #12]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c4a:	b292      	uxth	r2, r2
 8001c4c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c52:	1c9a      	adds	r2, r3, #2
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001c66:	2301      	movs	r3, #1
 8001c68:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001c6a:	f7fe fd71 	bl	8000750 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d807      	bhi.n	8001c8a <HAL_SPI_TransmitReceive+0x1d8>
 8001c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c80:	d003      	beq.n	8001c8a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001c88:	e0a7      	b.n	8001dda <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d1a6      	bne.n	8001be2 <HAL_SPI_TransmitReceive+0x130>
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1a1      	bne.n	8001be2 <HAL_SPI_TransmitReceive+0x130>
 8001c9e:	e07c      	b.n	8001d9a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d002      	beq.n	8001cae <HAL_SPI_TransmitReceive+0x1fc>
 8001ca8:	8b7b      	ldrh	r3, [r7, #26]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d16b      	bne.n	8001d86 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	330c      	adds	r3, #12
 8001cb8:	7812      	ldrb	r2, [r2, #0]
 8001cba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc0:	1c5a      	adds	r2, r3, #1
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	3b01      	subs	r3, #1
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001cd4:	e057      	b.n	8001d86 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d11c      	bne.n	8001d1e <HAL_SPI_TransmitReceive+0x26c>
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d017      	beq.n	8001d1e <HAL_SPI_TransmitReceive+0x26c>
 8001cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d114      	bne.n	8001d1e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	330c      	adds	r3, #12
 8001cfe:	7812      	ldrb	r2, [r2, #0]
 8001d00:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	1c5a      	adds	r2, r3, #1
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	3b01      	subs	r3, #1
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d119      	bne.n	8001d60 <HAL_SPI_TransmitReceive+0x2ae>
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d014      	beq.n	8001d60 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	68da      	ldr	r2, [r3, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d40:	b2d2      	uxtb	r2, r2
 8001d42:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d48:	1c5a      	adds	r2, r3, #1
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	3b01      	subs	r3, #1
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001d60:	f7fe fcf6 	bl	8000750 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d803      	bhi.n	8001d78 <HAL_SPI_TransmitReceive+0x2c6>
 8001d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d76:	d102      	bne.n	8001d7e <HAL_SPI_TransmitReceive+0x2cc>
 8001d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d103      	bne.n	8001d86 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001d84:	e029      	b.n	8001dda <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d1a2      	bne.n	8001cd6 <HAL_SPI_TransmitReceive+0x224>
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d19d      	bne.n	8001cd6 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001d9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d9c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001d9e:	68f8      	ldr	r0, [r7, #12]
 8001da0:	f000 f904 	bl	8001fac <SPI_EndRxTxTransaction>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d006      	beq.n	8001db8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2220      	movs	r2, #32
 8001db4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001db6:	e010      	b.n	8001dda <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d10b      	bne.n	8001dd8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	617b      	str	r3, [r7, #20]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	617b      	str	r3, [r7, #20]
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	e000      	b.n	8001dda <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8001dd8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001dea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3730      	adds	r7, #48	; 0x30
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
	...

08001df8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b088      	sub	sp, #32
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	603b      	str	r3, [r7, #0]
 8001e04:	4613      	mov	r3, r2
 8001e06:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001e08:	f7fe fca2 	bl	8000750 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e10:	1a9b      	subs	r3, r3, r2
 8001e12:	683a      	ldr	r2, [r7, #0]
 8001e14:	4413      	add	r3, r2
 8001e16:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001e18:	f7fe fc9a 	bl	8000750 <HAL_GetTick>
 8001e1c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001e1e:	4b39      	ldr	r3, [pc, #228]	; (8001f04 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	015b      	lsls	r3, r3, #5
 8001e24:	0d1b      	lsrs	r3, r3, #20
 8001e26:	69fa      	ldr	r2, [r7, #28]
 8001e28:	fb02 f303 	mul.w	r3, r2, r3
 8001e2c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e2e:	e054      	b.n	8001eda <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e36:	d050      	beq.n	8001eda <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001e38:	f7fe fc8a 	bl	8000750 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	69fa      	ldr	r2, [r7, #28]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d902      	bls.n	8001e4e <SPI_WaitFlagStateUntilTimeout+0x56>
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d13d      	bne.n	8001eca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	685a      	ldr	r2, [r3, #4]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001e5c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e66:	d111      	bne.n	8001e8c <SPI_WaitFlagStateUntilTimeout+0x94>
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e70:	d004      	beq.n	8001e7c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e7a:	d107      	bne.n	8001e8c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e8a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e94:	d10f      	bne.n	8001eb6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001eb4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e017      	b.n	8001efa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d101      	bne.n	8001ed4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	68ba      	ldr	r2, [r7, #8]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	bf0c      	ite	eq
 8001eea:	2301      	moveq	r3, #1
 8001eec:	2300      	movne	r3, #0
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	79fb      	ldrb	r3, [r7, #7]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d19b      	bne.n	8001e30 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3720      	adds	r7, #32
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20000000 	.word	0x20000000

08001f08 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af02      	add	r7, sp, #8
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f1c:	d111      	bne.n	8001f42 <SPI_EndRxTransaction+0x3a>
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f26:	d004      	beq.n	8001f32 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f30:	d107      	bne.n	8001f42 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f40:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f4a:	d117      	bne.n	8001f7c <SPI_EndRxTransaction+0x74>
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f54:	d112      	bne.n	8001f7c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	9300      	str	r3, [sp, #0]
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	2101      	movs	r1, #1
 8001f60:	68f8      	ldr	r0, [r7, #12]
 8001f62:	f7ff ff49 	bl	8001df8 <SPI_WaitFlagStateUntilTimeout>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d01a      	beq.n	8001fa2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f70:	f043 0220 	orr.w	r2, r3, #32
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e013      	b.n	8001fa4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	9300      	str	r3, [sp, #0]
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	2200      	movs	r2, #0
 8001f84:	2180      	movs	r1, #128	; 0x80
 8001f86:	68f8      	ldr	r0, [r7, #12]
 8001f88:	f7ff ff36 	bl	8001df8 <SPI_WaitFlagStateUntilTimeout>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d007      	beq.n	8001fa2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f96:	f043 0220 	orr.w	r2, r3, #32
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e000      	b.n	8001fa4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3710      	adds	r7, #16
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af02      	add	r7, sp, #8
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	9300      	str	r3, [sp, #0]
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	2180      	movs	r1, #128	; 0x80
 8001fc2:	68f8      	ldr	r0, [r7, #12]
 8001fc4:	f7ff ff18 	bl	8001df8 <SPI_WaitFlagStateUntilTimeout>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d007      	beq.n	8001fde <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd2:	f043 0220 	orr.w	r2, r3, #32
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e000      	b.n	8001fe0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3710      	adds	r7, #16
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e03f      	b.n	800207a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d106      	bne.n	8002014 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f7fe fa70 	bl	80004f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2224      	movs	r2, #36	; 0x24
 8002018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68da      	ldr	r2, [r3, #12]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800202a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f000 f905 	bl	800223c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	691a      	ldr	r2, [r3, #16]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002040:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	695a      	ldr	r2, [r3, #20]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002050:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68da      	ldr	r2, [r3, #12]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002060:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2220      	movs	r2, #32
 800206c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2220      	movs	r2, #32
 8002074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b08a      	sub	sp, #40	; 0x28
 8002086:	af02      	add	r7, sp, #8
 8002088:	60f8      	str	r0, [r7, #12]
 800208a:	60b9      	str	r1, [r7, #8]
 800208c:	603b      	str	r3, [r7, #0]
 800208e:	4613      	mov	r3, r2
 8002090:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002092:	2300      	movs	r3, #0
 8002094:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b20      	cmp	r3, #32
 80020a0:	d17c      	bne.n	800219c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d002      	beq.n	80020ae <HAL_UART_Transmit+0x2c>
 80020a8:	88fb      	ldrh	r3, [r7, #6]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e075      	b.n	800219e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d101      	bne.n	80020c0 <HAL_UART_Transmit+0x3e>
 80020bc:	2302      	movs	r3, #2
 80020be:	e06e      	b.n	800219e <HAL_UART_Transmit+0x11c>
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2200      	movs	r2, #0
 80020cc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2221      	movs	r2, #33	; 0x21
 80020d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80020d6:	f7fe fb3b 	bl	8000750 <HAL_GetTick>
 80020da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	88fa      	ldrh	r2, [r7, #6]
 80020e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	88fa      	ldrh	r2, [r7, #6]
 80020e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020f0:	d108      	bne.n	8002104 <HAL_UART_Transmit+0x82>
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d104      	bne.n	8002104 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80020fa:	2300      	movs	r3, #0
 80020fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	61bb      	str	r3, [r7, #24]
 8002102:	e003      	b.n	800210c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002108:	2300      	movs	r3, #0
 800210a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2200      	movs	r2, #0
 8002110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002114:	e02a      	b.n	800216c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	9300      	str	r3, [sp, #0]
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	2200      	movs	r2, #0
 800211e:	2180      	movs	r1, #128	; 0x80
 8002120:	68f8      	ldr	r0, [r7, #12]
 8002122:	f000 f840 	bl	80021a6 <UART_WaitOnFlagUntilTimeout>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e036      	b.n	800219e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10b      	bne.n	800214e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	881b      	ldrh	r3, [r3, #0]
 800213a:	461a      	mov	r2, r3
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002144:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	3302      	adds	r3, #2
 800214a:	61bb      	str	r3, [r7, #24]
 800214c:	e007      	b.n	800215e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	781a      	ldrb	r2, [r3, #0]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	3301      	adds	r3, #1
 800215c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002162:	b29b      	uxth	r3, r3
 8002164:	3b01      	subs	r3, #1
 8002166:	b29a      	uxth	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002170:	b29b      	uxth	r3, r3
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1cf      	bne.n	8002116 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	9300      	str	r3, [sp, #0]
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	2200      	movs	r2, #0
 800217e:	2140      	movs	r1, #64	; 0x40
 8002180:	68f8      	ldr	r0, [r7, #12]
 8002182:	f000 f810 	bl	80021a6 <UART_WaitOnFlagUntilTimeout>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e006      	b.n	800219e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2220      	movs	r2, #32
 8002194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002198:	2300      	movs	r3, #0
 800219a:	e000      	b.n	800219e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800219c:	2302      	movs	r3, #2
  }
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3720      	adds	r7, #32
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b084      	sub	sp, #16
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	60f8      	str	r0, [r7, #12]
 80021ae:	60b9      	str	r1, [r7, #8]
 80021b0:	603b      	str	r3, [r7, #0]
 80021b2:	4613      	mov	r3, r2
 80021b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021b6:	e02c      	b.n	8002212 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021be:	d028      	beq.n	8002212 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d007      	beq.n	80021d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80021c6:	f7fe fac3 	bl	8000750 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d21d      	bcs.n	8002212 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68da      	ldr	r2, [r3, #12]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80021e4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	695a      	ldr	r2, [r3, #20]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f022 0201 	bic.w	r2, r2, #1
 80021f4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2220      	movs	r2, #32
 80021fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2220      	movs	r2, #32
 8002202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e00f      	b.n	8002232 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	4013      	ands	r3, r2
 800221c:	68ba      	ldr	r2, [r7, #8]
 800221e:	429a      	cmp	r2, r3
 8002220:	bf0c      	ite	eq
 8002222:	2301      	moveq	r3, #1
 8002224:	2300      	movne	r3, #0
 8002226:	b2db      	uxtb	r3, r3
 8002228:	461a      	mov	r2, r3
 800222a:	79fb      	ldrb	r3, [r7, #7]
 800222c:	429a      	cmp	r2, r3
 800222e:	d0c3      	beq.n	80021b8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
	...

0800223c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	68da      	ldr	r2, [r3, #12]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	430a      	orrs	r2, r1
 8002258:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	689a      	ldr	r2, [r3, #8]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	431a      	orrs	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	695b      	ldr	r3, [r3, #20]
 8002268:	4313      	orrs	r3, r2
 800226a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002276:	f023 030c 	bic.w	r3, r3, #12
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	6812      	ldr	r2, [r2, #0]
 800227e:	68b9      	ldr	r1, [r7, #8]
 8002280:	430b      	orrs	r3, r1
 8002282:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	699a      	ldr	r2, [r3, #24]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	430a      	orrs	r2, r1
 8002298:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a2c      	ldr	r2, [pc, #176]	; (8002350 <UART_SetConfig+0x114>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d103      	bne.n	80022ac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80022a4:	f7ff f902 	bl	80014ac <HAL_RCC_GetPCLK2Freq>
 80022a8:	60f8      	str	r0, [r7, #12]
 80022aa:	e002      	b.n	80022b2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80022ac:	f7ff f8ea 	bl	8001484 <HAL_RCC_GetPCLK1Freq>
 80022b0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	4613      	mov	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	4413      	add	r3, r2
 80022ba:	009a      	lsls	r2, r3, #2
 80022bc:	441a      	add	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022c8:	4a22      	ldr	r2, [pc, #136]	; (8002354 <UART_SetConfig+0x118>)
 80022ca:	fba2 2303 	umull	r2, r3, r2, r3
 80022ce:	095b      	lsrs	r3, r3, #5
 80022d0:	0119      	lsls	r1, r3, #4
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	4613      	mov	r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	4413      	add	r3, r2
 80022da:	009a      	lsls	r2, r3, #2
 80022dc:	441a      	add	r2, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80022e8:	4b1a      	ldr	r3, [pc, #104]	; (8002354 <UART_SetConfig+0x118>)
 80022ea:	fba3 0302 	umull	r0, r3, r3, r2
 80022ee:	095b      	lsrs	r3, r3, #5
 80022f0:	2064      	movs	r0, #100	; 0x64
 80022f2:	fb00 f303 	mul.w	r3, r0, r3
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	011b      	lsls	r3, r3, #4
 80022fa:	3332      	adds	r3, #50	; 0x32
 80022fc:	4a15      	ldr	r2, [pc, #84]	; (8002354 <UART_SetConfig+0x118>)
 80022fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002302:	095b      	lsrs	r3, r3, #5
 8002304:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002308:	4419      	add	r1, r3
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	4613      	mov	r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4413      	add	r3, r2
 8002312:	009a      	lsls	r2, r3, #2
 8002314:	441a      	add	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002320:	4b0c      	ldr	r3, [pc, #48]	; (8002354 <UART_SetConfig+0x118>)
 8002322:	fba3 0302 	umull	r0, r3, r3, r2
 8002326:	095b      	lsrs	r3, r3, #5
 8002328:	2064      	movs	r0, #100	; 0x64
 800232a:	fb00 f303 	mul.w	r3, r0, r3
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	011b      	lsls	r3, r3, #4
 8002332:	3332      	adds	r3, #50	; 0x32
 8002334:	4a07      	ldr	r2, [pc, #28]	; (8002354 <UART_SetConfig+0x118>)
 8002336:	fba2 2303 	umull	r2, r3, r2, r3
 800233a:	095b      	lsrs	r3, r3, #5
 800233c:	f003 020f 	and.w	r2, r3, #15
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	440a      	add	r2, r1
 8002346:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002348:	bf00      	nop
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40013800 	.word	0x40013800
 8002354:	51eb851f 	.word	0x51eb851f

08002358 <_ZN3LEDC1EP12GPIO_TypeDeft>:

#include "LED.h"
#include "stm32f1xx.h"
#include "stm32f1xx_hal.h"

LED::LED(GPIO_TypeDef* gpio, uint16_t gpio_pin) {
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	4613      	mov	r3, r2
 8002364:	80fb      	strh	r3, [r7, #6]
 8002366:	4a07      	ldr	r2, [pc, #28]	; (8002384 <_ZN3LEDC1EP12GPIO_TypeDeft+0x2c>)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	GPIOx = gpio;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	68ba      	ldr	r2, [r7, #8]
 8002370:	605a      	str	r2, [r3, #4]
	GPIO_Pin = gpio_pin;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	88fa      	ldrh	r2, [r7, #6]
 8002376:	811a      	strh	r2, [r3, #8]
}
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	4618      	mov	r0, r3
 800237c:	3714      	adds	r7, #20
 800237e:	46bd      	mov	sp, r7
 8002380:	bc80      	pop	{r7}
 8002382:	4770      	bx	lr
 8002384:	080048cc 	.word	0x080048cc

08002388 <_ZN3LEDD1Ev>:

LED::~LED() {
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	4a04      	ldr	r2, [pc, #16]	; (80023a4 <_ZN3LEDD1Ev+0x1c>)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4618      	mov	r0, r3
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	bc80      	pop	{r7}
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	080048cc 	.word	0x080048cc

080023a8 <_ZN3LEDD0Ev>:
LED::~LED() {
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
}
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f7ff ffe9 	bl	8002388 <_ZN3LEDD1Ev>
 80023b6:	210c      	movs	r1, #12
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f001 fa43 	bl	8003844 <_ZdlPvj>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4618      	mov	r0, r3
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <_ZN3LED2OnEv>:

void LED::On()
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6858      	ldr	r0, [r3, #4]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	891b      	ldrh	r3, [r3, #8]
 80023d8:	2201      	movs	r2, #1
 80023da:	4619      	mov	r1, r3
 80023dc:	f7fe fc65 	bl	8000caa <HAL_GPIO_WritePin>
}
 80023e0:	bf00      	nop
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <_ZN3LED3OffEv>:

void LED::Off()
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6858      	ldr	r0, [r3, #4]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	891b      	ldrh	r3, [r3, #8]
 80023f8:	2200      	movs	r2, #0
 80023fa:	4619      	mov	r1, r3
 80023fc:	f7fe fc55 	bl	8000caa <HAL_GPIO_WritePin>
}
 8002400:	bf00      	nop
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <main_cpp>:
LED myLed(LED_GPIO_Port, LED_Pin);

void blink_led(uint16_t delay);

void main_cpp()
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b0cc      	sub	sp, #304	; 0x130
 800240c:	af00      	add	r7, sp, #0
	//this is our main for cpp part of code.
	MFRC522 myMFRC522class;
 800240e:	f107 0308 	add.w	r3, r7, #8
 8002412:	4618      	mov	r0, r3
 8002414:	f000 f8ae 	bl	8002574 <_ZN7MFRC522C1Ev>

	  // Prepare key - all keys are set to FFFFFFFFFFFFh at chip delivery from the factory.
	  MFRC522::MIFARE_Key key;
	  for (uint8_t i = 0; i < 6; i++) key.keyByte[i] = 0xFF;
 8002418:	2300      	movs	r3, #0
 800241a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
 800241e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002422:	2b05      	cmp	r3, #5
 8002424:	d80a      	bhi.n	800243c <main_cpp+0x34>
 8002426:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800242a:	463a      	mov	r2, r7
 800242c:	21ff      	movs	r1, #255	; 0xff
 800242e:	54d1      	strb	r1, [r2, r3]
 8002430:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002434:	3301      	adds	r3, #1
 8002436:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
 800243a:	e7f0      	b.n	800241e <main_cpp+0x16>
	  //some variables we need
	  uint8_t block;
	  uint8_t len;
	  MFRC522::StatusCode status;

	myMFRC522class.PCD_Init();
 800243c:	f107 0308 	add.w	r3, r7, #8
 8002440:	4618      	mov	r0, r3
 8002442:	f000 faa6 	bl	8002992 <_ZN7MFRC5228PCD_InitEv>
	HAL_Delay(5);
 8002446:	2005      	movs	r0, #5
 8002448:	f7fe f98c 	bl	8000764 <HAL_Delay>

	myMFRC522class.PCD_DumpVersionToSerial();
 800244c:	f107 0308 	add.w	r3, r7, #8
 8002450:	4618      	mov	r0, r3
 8002452:	f001 f863 	bl	800351c <_ZN7MFRC52223PCD_DumpVersionToSerialEv>
	buffer_size = sprintf(buffer, "Scan PICC to see UID, SAK, type, and data blocks...");
 8002456:	4916      	ldr	r1, [pc, #88]	; (80024b0 <main_cpp+0xa8>)
 8002458:	4816      	ldr	r0, [pc, #88]	; (80024b4 <main_cpp+0xac>)
 800245a:	f001 faf5 	bl	8003a48 <siprintf>
 800245e:	4603      	mov	r3, r0
 8002460:	4a15      	ldr	r2, [pc, #84]	; (80024b8 <main_cpp+0xb0>)
 8002462:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(&huart1, (uint8_t *) buffer, buffer_size, 100);
 8002464:	4b14      	ldr	r3, [pc, #80]	; (80024b8 <main_cpp+0xb0>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	b29a      	uxth	r2, r3
 800246a:	2364      	movs	r3, #100	; 0x64
 800246c:	4911      	ldr	r1, [pc, #68]	; (80024b4 <main_cpp+0xac>)
 800246e:	4813      	ldr	r0, [pc, #76]	; (80024bc <main_cpp+0xb4>)
 8002470:	f7ff fe07 	bl	8002082 <HAL_UART_Transmit>

	while(1)
	{

		if (myMFRC522class.PICC_IsNewCardPresent())
 8002474:	f107 0308 	add.w	r3, r7, #8
 8002478:	4618      	mov	r0, r3
 800247a:	f001 f99f 	bl	80037bc <_ZN7MFRC52221PICC_IsNewCardPresentEv>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d010      	beq.n	80024a6 <main_cpp+0x9e>
		{
			if(myMFRC522class.PICC_ReadCardSerial())
 8002484:	f107 0308 	add.w	r3, r7, #8
 8002488:	4618      	mov	r0, r3
 800248a:	f001 f9c3 	bl	8003814 <_ZN7MFRC52219PICC_ReadCardSerialEv>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d008      	beq.n	80024a6 <main_cpp+0x9e>
			{
				myMFRC522class.PICC_DumpDetailsToSerial(&(myMFRC522class.uid));
 8002494:	f107 0308 	add.w	r3, r7, #8
 8002498:	1d1a      	adds	r2, r3, #4
 800249a:	f107 0308 	add.w	r3, r7, #8
 800249e:	4611      	mov	r1, r2
 80024a0:	4618      	mov	r0, r3
 80024a2:	f001 f8dd 	bl	8003660 <_ZN7MFRC52224PICC_DumpDetailsToSerialEPNS_3UidE>
				//myMFRC522class.PICC_DumpToSerial(&(myMFRC522class.uid));
			}
		}

		blink_led(100);
 80024a6:	2064      	movs	r0, #100	; 0x64
 80024a8:	f000 f80a 	bl	80024c0 <_Z9blink_ledt>
		if (myMFRC522class.PICC_IsNewCardPresent())
 80024ac:	e7e2      	b.n	8002474 <main_cpp+0x6c>
 80024ae:	bf00      	nop
 80024b0:	0800415c 	.word	0x0800415c
 80024b4:	20000090 	.word	0x20000090
 80024b8:	20000190 	.word	0x20000190
 80024bc:	200001a8 	.word	0x200001a8

080024c0 <_Z9blink_ledt>:
	}
}


void blink_led(uint16_t delay)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	4603      	mov	r3, r0
 80024c8:	80fb      	strh	r3, [r7, #6]
	uint8_t i = 0;
 80024ca:	2300      	movs	r3, #0
 80024cc:	73fb      	strb	r3, [r7, #15]

	for(i = 0; i < 5; i++)
 80024ce:	2300      	movs	r3, #0
 80024d0:	73fb      	strb	r3, [r7, #15]
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
 80024d4:	2b04      	cmp	r3, #4
 80024d6:	d811      	bhi.n	80024fc <_Z9blink_ledt+0x3c>
	{
		myLed.On();
 80024d8:	480a      	ldr	r0, [pc, #40]	; (8002504 <_Z9blink_ledt+0x44>)
 80024da:	f7ff ff75 	bl	80023c8 <_ZN3LED2OnEv>
		HAL_Delay(delay);
 80024de:	88fb      	ldrh	r3, [r7, #6]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7fe f93f 	bl	8000764 <HAL_Delay>
		myLed.Off();
 80024e6:	4807      	ldr	r0, [pc, #28]	; (8002504 <_Z9blink_ledt+0x44>)
 80024e8:	f7ff ff7e 	bl	80023e8 <_ZN3LED3OffEv>
		HAL_Delay(delay);
 80024ec:	88fb      	ldrh	r3, [r7, #6]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7fe f938 	bl	8000764 <HAL_Delay>
	for(i = 0; i < 5; i++)
 80024f4:	7bfb      	ldrb	r3, [r7, #15]
 80024f6:	3301      	adds	r3, #1
 80024f8:	73fb      	strb	r3, [r7, #15]
 80024fa:	e7ea      	b.n	80024d2 <_Z9blink_ledt+0x12>
	}
}
 80024fc:	bf00      	nop
 80024fe:	3710      	adds	r7, #16
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	20000194 	.word	0x20000194

08002508 <_Z41__static_initialization_and_destruction_0ii>:
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d10a      	bne.n	800252e <_Z41__static_initialization_and_destruction_0ii+0x26>
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800251e:	4293      	cmp	r3, r2
 8002520:	d105      	bne.n	800252e <_Z41__static_initialization_and_destruction_0ii+0x26>
LED myLed(LED_GPIO_Port, LED_Pin);
 8002522:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002526:	4909      	ldr	r1, [pc, #36]	; (800254c <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8002528:	4809      	ldr	r0, [pc, #36]	; (8002550 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800252a:	f7ff ff15 	bl	8002358 <_ZN3LEDC1EP12GPIO_TypeDeft>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d107      	bne.n	8002544 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800253a:	4293      	cmp	r3, r2
 800253c:	d102      	bne.n	8002544 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 800253e:	4804      	ldr	r0, [pc, #16]	; (8002550 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8002540:	f7ff ff22 	bl	8002388 <_ZN3LEDD1Ev>
}
 8002544:	bf00      	nop
 8002546:	3708      	adds	r7, #8
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	40011000 	.word	0x40011000
 8002550:	20000194 	.word	0x20000194

08002554 <_GLOBAL__sub_I_uid_size>:
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
 8002558:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800255c:	2001      	movs	r0, #1
 800255e:	f7ff ffd3 	bl	8002508 <_Z41__static_initialization_and_destruction_0ii>
 8002562:	bd80      	pop	{r7, pc}

08002564 <_GLOBAL__sub_D_uid_size>:
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
 8002568:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800256c:	2000      	movs	r0, #0
 800256e:	f7ff ffcb 	bl	8002508 <_Z41__static_initialization_and_destruction_0ii>
 8002572:	bd80      	pop	{r7, pc}

08002574 <_ZN7MFRC522C1Ev>:
// Functions for setting up the Arduino
/////////////////////////////////////////////////////////////////////////////////////
/**
 * Constructor.
 */
MFRC522::MFRC522(): MFRC522(SPI1_CS_GPIO_Port, SPI1_CS_Pin, NULL, UINT16_MAX)
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af02      	add	r7, sp, #8
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002580:	9300      	str	r3, [sp, #0]
 8002582:	2300      	movs	r3, #0
 8002584:	2210      	movs	r2, #16
 8002586:	4904      	ldr	r1, [pc, #16]	; (8002598 <_ZN7MFRC522C1Ev+0x24>)
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f000 f807 	bl	800259c <_ZN7MFRC522C1EP12GPIO_TypeDeftS1_t>
{
} // End constructor
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4618      	mov	r0, r3
 8002592:	3708      	adds	r7, #8
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40010800 	.word	0x40010800

0800259c <_ZN7MFRC522C1EP12GPIO_TypeDeftS1_t>:

/**
 * Constructor.
 * Prepares the output pins.
 */
MFRC522::MFRC522(GPIO_TypeDef *chipSelectPort, uint16_t chipSelectPin, GPIO_TypeDef *resetPowerDownPort, uint16_t resetPowerDownPin) {
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	603b      	str	r3, [r7, #0]
 80025a8:	4613      	mov	r3, r2
 80025aa:	80fb      	strh	r3, [r7, #6]
 80025ac:	4a0c      	ldr	r2, [pc, #48]	; (80025e0 <_ZN7MFRC522C1EP12GPIO_TypeDeftS1_t+0x44>)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	601a      	str	r2, [r3, #0]

	_chipSelectPort = chipSelectPort;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	68ba      	ldr	r2, [r7, #8]
 80025b6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	_chipSelectPin = chipSelectPin;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	88fa      	ldrh	r2, [r7, #6]
 80025be:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
	_resetPowerDownPort = resetPowerDownPort;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	_resetPowerDownPin = resetPowerDownPin;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	8b3a      	ldrh	r2, [r7, #24]
 80025ce:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
} // End constructor
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	4618      	mov	r0, r3
 80025d6:	3714      	adds	r7, #20
 80025d8:	46bd      	mov	sp, r7
 80025da:	bc80      	pop	{r7}
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	080048dc 	.word	0x080048dc

080025e4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>:
 * Writes a uint8_t to the specified register in the MFRC522 chip.
 * The interface is described in the datasheet section 8.1.2.
 */
void MFRC522::PCD_WriteRegister(	PCD_Register reg,	///< The register to write to. One of the PCD_Register enums.
									uint8_t value			///< The value to write.
								) {
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	460b      	mov	r3, r1
 80025ee:	70fb      	strb	r3, [r7, #3]
 80025f0:	4613      	mov	r3, r2
 80025f2:	70bb      	strb	r3, [r7, #2]

	uint8_t _reg = reg;
 80025f4:	78fb      	ldrb	r3, [r7, #3]
 80025f6:	73fb      	strb	r3, [r7, #15]
	uint8_t buff[2];

	buff[0] = _reg;
 80025f8:	7bfb      	ldrb	r3, [r7, #15]
 80025fa:	733b      	strb	r3, [r7, #12]
	buff[1] = value;
 80025fc:	78bb      	ldrb	r3, [r7, #2]
 80025fe:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(_chipSelectPort, _chipSelectPin, GPIO_PIN_RESET);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f8d3 0118 	ldr.w	r0, [r3, #280]	; 0x118
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 800260c:	2200      	movs	r2, #0
 800260e:	4619      	mov	r1, r3
 8002610:	f7fe fb4b 	bl	8000caa <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &_reg, 1, HAL_MAX_DELAY);
 8002614:	f107 010f 	add.w	r1, r7, #15
 8002618:	f04f 33ff 	mov.w	r3, #4294967295
 800261c:	2201      	movs	r2, #1
 800261e:	480c      	ldr	r0, [pc, #48]	; (8002650 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh+0x6c>)
 8002620:	f7fe fffa 	bl	8001618 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &value, 1, HAL_MAX_DELAY);
 8002624:	1cb9      	adds	r1, r7, #2
 8002626:	f04f 33ff 	mov.w	r3, #4294967295
 800262a:	2201      	movs	r2, #1
 800262c:	4808      	ldr	r0, [pc, #32]	; (8002650 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh+0x6c>)
 800262e:	f7fe fff3 	bl	8001618 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_chipSelectPort, _chipSelectPin, GPIO_PIN_SET);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f8d3 0118 	ldr.w	r0, [r3, #280]	; 0x118
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 800263e:	2201      	movs	r2, #1
 8002640:	4619      	mov	r1, r3
 8002642:	f7fe fb32 	bl	8000caa <HAL_GPIO_WritePin>

} // End PCD_WriteRegister()
 8002646:	bf00      	nop
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	200001ec 	.word	0x200001ec

08002654 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh>:
 * The interface is described in the datasheet section 8.1.2.
 */
void MFRC522::PCD_WriteRegister(	PCD_Register reg,	///< The register to write to. One of the PCD_Register enums.
									uint8_t count,			///< The number of bytes to write to the register
									uint8_t *values		///< The values to write. Byte array.
								) {
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	607b      	str	r3, [r7, #4]
 800265e:	460b      	mov	r3, r1
 8002660:	72fb      	strb	r3, [r7, #11]
 8002662:	4613      	mov	r3, r2
 8002664:	72bb      	strb	r3, [r7, #10]

	uint8_t _reg = reg;
 8002666:	7afb      	ldrb	r3, [r7, #11]
 8002668:	75bb      	strb	r3, [r7, #22]
	HAL_GPIO_WritePin(_chipSelectPort, _chipSelectPin, GPIO_PIN_RESET);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f8d3 0118 	ldr.w	r0, [r3, #280]	; 0x118
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 8002676:	2200      	movs	r2, #0
 8002678:	4619      	mov	r1, r3
 800267a:	f7fe fb16 	bl	8000caa <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, &_reg, 1, HAL_MAX_DELAY);
 800267e:	f107 0116 	add.w	r1, r7, #22
 8002682:	f04f 33ff 	mov.w	r3, #4294967295
 8002686:	2201      	movs	r2, #1
 8002688:	4811      	ldr	r0, [pc, #68]	; (80026d0 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh+0x7c>)
 800268a:	f7fe ffc5 	bl	8001618 <HAL_SPI_Transmit>

	for(uint8_t i = 0; i < count; i++)
 800268e:	2300      	movs	r3, #0
 8002690:	75fb      	strb	r3, [r7, #23]
 8002692:	7dfa      	ldrb	r2, [r7, #23]
 8002694:	7abb      	ldrb	r3, [r7, #10]
 8002696:	429a      	cmp	r2, r3
 8002698:	d20c      	bcs.n	80026b4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh+0x60>
		HAL_SPI_Transmit(&hspi1, &values[i], 1, HAL_MAX_DELAY);
 800269a:	7dfb      	ldrb	r3, [r7, #23]
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	18d1      	adds	r1, r2, r3
 80026a0:	f04f 33ff 	mov.w	r3, #4294967295
 80026a4:	2201      	movs	r2, #1
 80026a6:	480a      	ldr	r0, [pc, #40]	; (80026d0 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh+0x7c>)
 80026a8:	f7fe ffb6 	bl	8001618 <HAL_SPI_Transmit>
	for(uint8_t i = 0; i < count; i++)
 80026ac:	7dfb      	ldrb	r3, [r7, #23]
 80026ae:	3301      	adds	r3, #1
 80026b0:	75fb      	strb	r3, [r7, #23]
 80026b2:	e7ee      	b.n	8002692 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh+0x3e>

	HAL_GPIO_WritePin(_chipSelectPort, _chipSelectPin, GPIO_PIN_SET);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f8d3 0118 	ldr.w	r0, [r3, #280]	; 0x118
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 80026c0:	2201      	movs	r2, #1
 80026c2:	4619      	mov	r1, r3
 80026c4:	f7fe faf1 	bl	8000caa <HAL_GPIO_WritePin>

} // End PCD_WriteRegister()
 80026c8:	bf00      	nop
 80026ca:	3718      	adds	r7, #24
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	200001ec 	.word	0x200001ec

080026d4 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>:
/**
 * Reads a uint8_t from the specified register in the MFRC522 chip.
 * The interface is described in the datasheet section 8.1.2.
 */
uint8_t MFRC522::PCD_ReadRegister(	PCD_Register reg	///< The register to read from. One of the PCD_Register enums.
								) {
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	460b      	mov	r3, r1
 80026de:	70fb      	strb	r3, [r7, #3]

	uint8_t value;
	uint8_t _reg = reg | 0x80;
 80026e0:	78fb      	ldrb	r3, [r7, #3]
 80026e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(_chipSelectPort, _chipSelectPin, GPIO_PIN_RESET);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f8d3 0118 	ldr.w	r0, [r3, #280]	; 0x118
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 80026f6:	2200      	movs	r2, #0
 80026f8:	4619      	mov	r1, r3
 80026fa:	f7fe fad6 	bl	8000caa <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, &_reg, 1, HAL_MAX_DELAY);
 80026fe:	f107 010e 	add.w	r1, r7, #14
 8002702:	f04f 33ff 	mov.w	r3, #4294967295
 8002706:	2201      	movs	r2, #1
 8002708:	4810      	ldr	r0, [pc, #64]	; (800274c <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE+0x78>)
 800270a:	f7fe ff85 	bl	8001618 <HAL_SPI_Transmit>

	HAL_SPI_Transmit(&hspi1, 0x00, 1, HAL_MAX_DELAY);
 800270e:	f04f 33ff 	mov.w	r3, #4294967295
 8002712:	2201      	movs	r2, #1
 8002714:	2100      	movs	r1, #0
 8002716:	480d      	ldr	r0, [pc, #52]	; (800274c <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE+0x78>)
 8002718:	f7fe ff7e 	bl	8001618 <HAL_SPI_Transmit>

	HAL_SPI_Receive(&hspi1, &value, 1, HAL_MAX_DELAY);
 800271c:	f107 010f 	add.w	r1, r7, #15
 8002720:	f04f 33ff 	mov.w	r3, #4294967295
 8002724:	2201      	movs	r2, #1
 8002726:	4809      	ldr	r0, [pc, #36]	; (800274c <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE+0x78>)
 8002728:	f7ff f8b2 	bl	8001890 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(_chipSelectPort, _chipSelectPin, GPIO_PIN_SET);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f8d3 0118 	ldr.w	r0, [r3, #280]	; 0x118
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 8002738:	2201      	movs	r2, #1
 800273a:	4619      	mov	r1, r3
 800273c:	f7fe fab5 	bl	8000caa <HAL_GPIO_WritePin>

	return value;
 8002740:	7bfb      	ldrb	r3, [r7, #15]

} // End PCD_ReadRegister()
 8002742:	4618      	mov	r0, r3
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	200001ec 	.word	0x200001ec

08002750 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh>:
 */
void MFRC522::PCD_ReadRegister(	PCD_Register reg,	///< The register to read from. One of the PCD_Register enums.
								uint8_t count,			///< The number of bytes to read
								uint8_t *values,		///< Byte array to store the values in.
								uint8_t rxAlign		///< Only bit positions rxAlign..7 in values[0] are updated.
								) {
 8002750:	b580      	push	{r7, lr}
 8002752:	b088      	sub	sp, #32
 8002754:	af02      	add	r7, sp, #8
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	607b      	str	r3, [r7, #4]
 800275a:	460b      	mov	r3, r1
 800275c:	72fb      	strb	r3, [r7, #11]
 800275e:	4613      	mov	r3, r2
 8002760:	72bb      	strb	r3, [r7, #10]

	if (count == 0)
 8002762:	7abb      	ldrb	r3, [r7, #10]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d077      	beq.n	8002858 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh+0x108>
	{
		return;
	}
	uint8_t address = 0x80 | reg;				// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
 8002768:	7afb      	ldrb	r3, [r7, #11]
 800276a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800276e:	b2db      	uxtb	r3, r3
 8002770:	757b      	strb	r3, [r7, #21]
	uint8_t index = 0;							// Index in values array.
 8002772:	2300      	movs	r3, #0
 8002774:	75fb      	strb	r3, [r7, #23]
	uint8_t value = 0;
 8002776:	2300      	movs	r3, #0
 8002778:	753b      	strb	r3, [r7, #20]

	HAL_GPIO_WritePin(_chipSelectPort, _chipSelectPin, GPIO_PIN_RESET);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f8d3 0118 	ldr.w	r0, [r3, #280]	; 0x118
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 8002786:	2200      	movs	r2, #0
 8002788:	4619      	mov	r1, r3
 800278a:	f7fe fa8e 	bl	8000caa <HAL_GPIO_WritePin>

	count--;
 800278e:	7abb      	ldrb	r3, [r7, #10]
 8002790:	3b01      	subs	r3, #1
 8002792:	72bb      	strb	r3, [r7, #10]
	HAL_SPI_Transmit(&hspi1, &address, 1, HAL_MAX_DELAY);
 8002794:	f107 0115 	add.w	r1, r7, #21
 8002798:	f04f 33ff 	mov.w	r3, #4294967295
 800279c:	2201      	movs	r2, #1
 800279e:	4830      	ldr	r0, [pc, #192]	; (8002860 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh+0x110>)
 80027a0:	f7fe ff3a 	bl	8001618 <HAL_SPI_Transmit>

	if (rxAlign) {		// Only update bit positions rxAlign..7 in values[0]
 80027a4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d026      	beq.n	80027fa <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh+0xaa>
		// Create bit mask for bit positions rxAlign..7
		uint8_t mask = (0xFF << rxAlign) & 0xFF;
 80027ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 80027b0:	22ff      	movs	r2, #255	; 0xff
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	75bb      	strb	r3, [r7, #22]
		// Read value and tell that we want to read the same address again.
#if 0
		HAL_SPI_Transmit(&hspi1, &address, 1, HAL_MAX_DELAY);
		HAL_SPI_Receive(&hspi1, &value, 1, HAL_MAX_DELAY);
#else
		HAL_SPI_TransmitReceive(&hspi1, &address ,&value, 1, HAL_MAX_DELAY);
 80027b8:	f107 0214 	add.w	r2, r7, #20
 80027bc:	f107 0115 	add.w	r1, r7, #21
 80027c0:	f04f 33ff 	mov.w	r3, #4294967295
 80027c4:	9300      	str	r3, [sp, #0]
 80027c6:	2301      	movs	r3, #1
 80027c8:	4825      	ldr	r0, [pc, #148]	; (8002860 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh+0x110>)
 80027ca:	f7ff f972 	bl	8001ab2 <HAL_SPI_TransmitReceive>
#endif
		// Apply mask to both current value of values[0] and the new data in value.
		values[0] = (values[0] & ~mask) | (value & mask);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	b25a      	sxtb	r2, r3
 80027d4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80027d8:	43db      	mvns	r3, r3
 80027da:	b25b      	sxtb	r3, r3
 80027dc:	4013      	ands	r3, r2
 80027de:	b25a      	sxtb	r2, r3
 80027e0:	7d39      	ldrb	r1, [r7, #20]
 80027e2:	7dbb      	ldrb	r3, [r7, #22]
 80027e4:	400b      	ands	r3, r1
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	b25b      	sxtb	r3, r3
 80027ea:	4313      	orrs	r3, r2
 80027ec:	b25b      	sxtb	r3, r3
 80027ee:	b2da      	uxtb	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	701a      	strb	r2, [r3, #0]
		index++;
 80027f4:	7dfb      	ldrb	r3, [r7, #23]
 80027f6:	3301      	adds	r3, #1
 80027f8:	75fb      	strb	r3, [r7, #23]
	}
	while (index < count) {
 80027fa:	7dfa      	ldrb	r2, [r7, #23]
 80027fc:	7abb      	ldrb	r3, [r7, #10]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d20f      	bcs.n	8002822 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh+0xd2>
#if 0
		HAL_SPI_Transmit(&hspi1, &address, 1, HAL_MAX_DELAY);
		HAL_SPI_Receive(&hspi1, &values[index], 1, HAL_MAX_DELAY);
#else
		HAL_SPI_TransmitReceive(&hspi1, &address, &values[index], 1, HAL_MAX_DELAY);	// Read value and tell that we want to read the same address again.
 8002802:	7dfb      	ldrb	r3, [r7, #23]
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	441a      	add	r2, r3
 8002808:	f107 0115 	add.w	r1, r7, #21
 800280c:	f04f 33ff 	mov.w	r3, #4294967295
 8002810:	9300      	str	r3, [sp, #0]
 8002812:	2301      	movs	r3, #1
 8002814:	4812      	ldr	r0, [pc, #72]	; (8002860 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh+0x110>)
 8002816:	f7ff f94c 	bl	8001ab2 <HAL_SPI_TransmitReceive>
#endif
		index++;
 800281a:	7dfb      	ldrb	r3, [r7, #23]
 800281c:	3301      	adds	r3, #1
 800281e:	75fb      	strb	r3, [r7, #23]
	while (index < count) {
 8002820:	e7eb      	b.n	80027fa <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh+0xaa>
	}

#if 1
	HAL_SPI_Transmit(&hspi1, 0x00, 1, HAL_MAX_DELAY);
 8002822:	f04f 33ff 	mov.w	r3, #4294967295
 8002826:	2201      	movs	r2, #1
 8002828:	2100      	movs	r1, #0
 800282a:	480d      	ldr	r0, [pc, #52]	; (8002860 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh+0x110>)
 800282c:	f7fe fef4 	bl	8001618 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &values[index], 1, HAL_MAX_DELAY);	// Read the final uint8_t. Send 0 to stop reading.
 8002830:	7dfb      	ldrb	r3, [r7, #23]
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	18d1      	adds	r1, r2, r3
 8002836:	f04f 33ff 	mov.w	r3, #4294967295
 800283a:	2201      	movs	r2, #1
 800283c:	4808      	ldr	r0, [pc, #32]	; (8002860 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh+0x110>)
 800283e:	f7ff f827 	bl	8001890 <HAL_SPI_Receive>
#else
	HAL_SPI_Receive(&hspi1, &values[index], 1, HAL_MAX_DELAY);
#endif

	HAL_GPIO_WritePin(_chipSelectPort, _chipSelectPin, GPIO_PIN_SET);			// Release slave again
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f8d3 0118 	ldr.w	r0, [r3, #280]	; 0x118
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 800284e:	2201      	movs	r2, #1
 8002850:	4619      	mov	r1, r3
 8002852:	f7fe fa2a 	bl	8000caa <HAL_GPIO_WritePin>
 8002856:	e000      	b.n	800285a <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh+0x10a>
		return;
 8002858:	bf00      	nop

} // End PCD_ReadRegister()
 800285a:	3718      	adds	r7, #24
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	200001ec 	.word	0x200001ec

08002864 <_ZN7MFRC52222PCD_SetRegisterBitMaskENS_12PCD_RegisterEh>:
/**
 * Sets the bits given in mask in register reg.
 */
void MFRC522::PCD_SetRegisterBitMask(	PCD_Register reg,	///< The register to update. One of the PCD_Register enums.
										uint8_t mask			///< The bits to set.
									) { 
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	460b      	mov	r3, r1
 800286e:	70fb      	strb	r3, [r7, #3]
 8002870:	4613      	mov	r3, r2
 8002872:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = PCD_ReadRegister(reg);
 8002874:	78fb      	ldrb	r3, [r7, #3]
 8002876:	4619      	mov	r1, r3
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f7ff ff2b 	bl	80026d4 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
 800287e:	4603      	mov	r3, r0
 8002880:	73fb      	strb	r3, [r7, #15]
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
 8002882:	7bfa      	ldrb	r2, [r7, #15]
 8002884:	78bb      	ldrb	r3, [r7, #2]
 8002886:	4313      	orrs	r3, r2
 8002888:	b2da      	uxtb	r2, r3
 800288a:	78fb      	ldrb	r3, [r7, #3]
 800288c:	4619      	mov	r1, r3
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7ff fea8 	bl	80025e4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
} // End PCD_SetRegisterBitMask()
 8002894:	bf00      	nop
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <_ZN7MFRC52224PCD_ClearRegisterBitMaskENS_12PCD_RegisterEh>:
/**
 * Clears the bits given in mask from register reg.
 */
void MFRC522::PCD_ClearRegisterBitMask(	PCD_Register reg,	///< The register to update. One of the PCD_Register enums.
										uint8_t mask			///< The bits to clear.
									  ) {
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	460b      	mov	r3, r1
 80028a6:	70fb      	strb	r3, [r7, #3]
 80028a8:	4613      	mov	r3, r2
 80028aa:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = PCD_ReadRegister(reg);
 80028ac:	78fb      	ldrb	r3, [r7, #3]
 80028ae:	4619      	mov	r1, r3
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f7ff ff0f 	bl	80026d4 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
 80028b6:	4603      	mov	r3, r0
 80028b8:	73fb      	strb	r3, [r7, #15]
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
 80028ba:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80028be:	43db      	mvns	r3, r3
 80028c0:	b25a      	sxtb	r2, r3
 80028c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028c6:	4013      	ands	r3, r2
 80028c8:	b25b      	sxtb	r3, r3
 80028ca:	b2da      	uxtb	r2, r3
 80028cc:	78fb      	ldrb	r3, [r7, #3]
 80028ce:	4619      	mov	r1, r3
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f7ff fe87 	bl	80025e4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
} // End PCD_ClearRegisterBitMask()
 80028d6:	bf00      	nop
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>:
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
MFRC522::StatusCode MFRC522::PCD_CalculateCRC(	uint8_t *data,		///< In: Pointer to the data to transfer to the FIFO for CRC calculation.
												uint8_t length,	///< In: The number of bytes to transfer.
												uint8_t *result	///< Out: Pointer to result buffer. Result is written to result[0..1], low uint8_t first.
					 ) {
 80028de:	b590      	push	{r4, r7, lr}
 80028e0:	b087      	sub	sp, #28
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	60f8      	str	r0, [r7, #12]
 80028e6:	60b9      	str	r1, [r7, #8]
 80028e8:	603b      	str	r3, [r7, #0]
 80028ea:	4613      	mov	r3, r2
 80028ec:	71fb      	strb	r3, [r7, #7]
	PCD_WriteRegister(CommandReg, PCD_Idle);		// Stop any active command.
 80028ee:	2200      	movs	r2, #0
 80028f0:	2102      	movs	r1, #2
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f7ff fe76 	bl	80025e4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	PCD_WriteRegister(DivIrqReg, 0x04);				// Clear the CRCIRq interrupt request bit
 80028f8:	2204      	movs	r2, #4
 80028fa:	210a      	movs	r1, #10
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	f7ff fe71 	bl	80025e4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	PCD_WriteRegister(FIFOLevelReg, 0x80);			// FlushBuffer = 1, FIFO initialization
 8002902:	2280      	movs	r2, #128	; 0x80
 8002904:	2114      	movs	r1, #20
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	f7ff fe6c 	bl	80025e4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	PCD_WriteRegister(FIFODataReg, length, data);	// Write data to the FIFO
 800290c:	79fa      	ldrb	r2, [r7, #7]
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	2112      	movs	r1, #18
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f7ff fe9e 	bl	8002654 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh>
	PCD_WriteRegister(CommandReg, PCD_CalcCRC);		// Start the calculation
 8002918:	2203      	movs	r2, #3
 800291a:	2102      	movs	r1, #2
 800291c:	68f8      	ldr	r0, [r7, #12]
 800291e:	f7ff fe61 	bl	80025e4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	
	// Wait for the CRC calculation to complete. Check for the register to
	// indicate that the CRC calculation is complete in a loop. If the
	// calculation is not indicated as complete in ~90ms, then time out
	// the operation.
	const uint32_t deadline = HAL_GetTick() + 89;
 8002922:	f7fd ff15 	bl	8000750 <HAL_GetTick>
 8002926:	4603      	mov	r3, r0
 8002928:	3359      	adds	r3, #89	; 0x59
 800292a:	617b      	str	r3, [r7, #20]

	do {
		// DivIrqReg[7..0] bits are: Set2 reserved reserved MfinActIRq reserved CRCIRq reserved reserved
		uint8_t n = PCD_ReadRegister(DivIrqReg);
 800292c:	210a      	movs	r1, #10
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	f7ff fed0 	bl	80026d4 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
 8002934:	4603      	mov	r3, r0
 8002936:	74fb      	strb	r3, [r7, #19]
		if (n & 0x04) {									// CRCIRq bit set - calculation done
 8002938:	7cfb      	ldrb	r3, [r7, #19]
 800293a:	f003 0304 	and.w	r3, r3, #4
 800293e:	2b00      	cmp	r3, #0
 8002940:	d016      	beq.n	8002970 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x92>
			PCD_WriteRegister(CommandReg, PCD_Idle);	// Stop calculating CRC for new content in the FIFO.
 8002942:	2200      	movs	r2, #0
 8002944:	2102      	movs	r1, #2
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f7ff fe4c 	bl	80025e4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
			// Transfer the result from the registers to the result buffer
			result[0] = PCD_ReadRegister(CRCResultRegL);
 800294c:	2144      	movs	r1, #68	; 0x44
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f7ff fec0 	bl	80026d4 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
 8002954:	4603      	mov	r3, r0
 8002956:	461a      	mov	r2, r3
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	701a      	strb	r2, [r3, #0]
			result[1] = PCD_ReadRegister(CRCResultRegH);
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	1c5c      	adds	r4, r3, #1
 8002960:	2142      	movs	r1, #66	; 0x42
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f7ff feb6 	bl	80026d4 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
 8002968:	4603      	mov	r3, r0
 800296a:	7023      	strb	r3, [r4, #0]
			return STATUS_OK;
 800296c:	2300      	movs	r3, #0
 800296e:	e00c      	b.n	800298a <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0xac>
		}
		//yield();
	}
	while (static_cast<uint32_t> (HAL_GetTick()) < deadline);
 8002970:	f7fd feee 	bl	8000750 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	4293      	cmp	r3, r2
 800297a:	bf8c      	ite	hi
 800297c:	2301      	movhi	r3, #1
 800297e:	2300      	movls	r3, #0
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d000      	beq.n	8002988 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0xaa>
	do {
 8002986:	e7d1      	b.n	800292c <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x4e>

	// 89ms passed and nothing happened. Communication with the MFRC522 might be down.
	return STATUS_TIMEOUT;
 8002988:	2303      	movs	r3, #3
} // End PCD_CalculateCRC()
 800298a:	4618      	mov	r0, r3
 800298c:	371c      	adds	r7, #28
 800298e:	46bd      	mov	sp, r7
 8002990:	bd90      	pop	{r4, r7, pc}

08002992 <_ZN7MFRC5228PCD_InitEv>:
/////////////////////////////////////////////////////////////////////////////////////

/**
 * Initializes the MFRC522 chip.
 */
void MFRC522::PCD_Init() {
 8002992:	b580      	push	{r7, lr}
 8002994:	b088      	sub	sp, #32
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
	bool hardReset = false;
 800299a:	2300      	movs	r3, #0
 800299c:	77fb      	strb	r3, [r7, #31]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800299e:	f107 030c 	add.w	r3, r7, #12
 80029a2:	2200      	movs	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]
 80029a6:	605a      	str	r2, [r3, #4]
 80029a8:	609a      	str	r2, [r3, #8]
 80029aa:	60da      	str	r2, [r3, #12]

	// Set the chipSelectPin as digital output, do not select the slave yet
	HAL_GPIO_WritePin(_chipSelectPort, _chipSelectPin, GPIO_PIN_SET);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f8d3 0118 	ldr.w	r0, [r3, #280]	; 0x118
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 80029b8:	2201      	movs	r2, #1
 80029ba:	4619      	mov	r1, r3
 80029bc:	f7fe f975 	bl	8000caa <HAL_GPIO_WritePin>
	
	// If a valid pin number has been set, pull device out of power down / reset state.
	if (_resetPowerDownPin != UNUSED_PIN) {
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 80029c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d051      	beq.n	8002a72 <_ZN7MFRC5228PCD_InitEv+0xe0>
		// First set the resetPowerDownPin as digital input, to check the MFRC522 power down mode.
		  /*Configure GPIO pin : RESET_PWRDOWN_Pin */
		  GPIO_InitStruct.Pin = _resetPowerDownPin;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 80029d4:	60fb      	str	r3, [r7, #12]
		  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029d6:	2300      	movs	r3, #0
 80029d8:	613b      	str	r3, [r7, #16]
		  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029da:	2300      	movs	r3, #0
 80029dc:	617b      	str	r3, [r7, #20]
		  HAL_GPIO_Init(_resetPowerDownPort, &GPIO_InitStruct);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80029e4:	f107 020c 	add.w	r2, r7, #12
 80029e8:	4611      	mov	r1, r2
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7fd ffc2 	bl	8000974 <HAL_GPIO_Init>
	
		if (HAL_GPIO_ReadPin(_resetPowerDownPort, _resetPowerDownPin) == GPIO_PIN_RESET)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 80029fc:	4619      	mov	r1, r3
 80029fe:	4610      	mov	r0, r2
 8002a00:	f7fe f93c 	bl	8000c7c <HAL_GPIO_ReadPin>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	bf0c      	ite	eq
 8002a0a:	2301      	moveq	r3, #1
 8002a0c:	2300      	movne	r3, #0
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d02e      	beq.n	8002a72 <_ZN7MFRC5228PCD_InitEv+0xe0>
		{
			// The MFRC522 chip is in power down mode.
			/*Configure GPIO pin : SPI1_CS_Pin */
			GPIO_InitStruct.Pin = _resetPowerDownPin;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 8002a1a:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;	// Now set the resetPowerDownPin as digital output.
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	613b      	str	r3, [r7, #16]
			GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a20:	2301      	movs	r3, #1
 8002a22:	617b      	str	r3, [r7, #20]
			GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a24:	2302      	movs	r3, #2
 8002a26:	61bb      	str	r3, [r7, #24]
			HAL_GPIO_Init(_resetPowerDownPort, &GPIO_InitStruct);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8002a2e:	f107 020c 	add.w	r2, r7, #12
 8002a32:	4611      	mov	r1, r2
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7fd ff9d 	bl	8000974 <HAL_GPIO_Init>

			HAL_GPIO_WritePin(_resetPowerDownPort, _resetPowerDownPin, GPIO_PIN_RESET);	// Make sure we have a clean LOW state.
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 8002a46:	2200      	movs	r2, #0
 8002a48:	4619      	mov	r1, r3
 8002a4a:	f7fe f92e 	bl	8000caa <HAL_GPIO_WritePin>
			HAL_Delay(1);	// 8.8.1 Reset timing requirements says about 100ns. Let us be generous: 2μsl
 8002a4e:	2001      	movs	r0, #1
 8002a50:	f7fd fe88 	bl	8000764 <HAL_Delay>
			HAL_GPIO_WritePin(_resetPowerDownPort, _resetPowerDownPin, GPIO_PIN_SET);		// Exit power down mode. This triggers a hard reset.
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 8002a60:	2201      	movs	r2, #1
 8002a62:	4619      	mov	r1, r3
 8002a64:	f7fe f921 	bl	8000caa <HAL_GPIO_WritePin>
			// Section 8.8.2 in the datasheet says the oscillator start-up time is the start up time of the crystal + 37,74μs. Let us be generous: 50ms.
			HAL_Delay(50);
 8002a68:	2032      	movs	r0, #50	; 0x32
 8002a6a:	f7fd fe7b 	bl	8000764 <HAL_Delay>
			hardReset = true;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	77fb      	strb	r3, [r7, #31]
		}
	}

	if (!hardReset) { // Perform a soft reset if we haven't triggered a hard reset above.
 8002a72:	7ffb      	ldrb	r3, [r7, #31]
 8002a74:	f083 0301 	eor.w	r3, r3, #1
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d002      	beq.n	8002a84 <_ZN7MFRC5228PCD_InitEv+0xf2>
		PCD_Reset();
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f834 	bl	8002aec <_ZN7MFRC5229PCD_ResetEv>
	}
	
	// Reset baud rates
	PCD_WriteRegister(TxModeReg, 0x00);
 8002a84:	2200      	movs	r2, #0
 8002a86:	2124      	movs	r1, #36	; 0x24
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f7ff fdab 	bl	80025e4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	PCD_WriteRegister(RxModeReg, 0x00);
 8002a8e:	2200      	movs	r2, #0
 8002a90:	2126      	movs	r1, #38	; 0x26
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f7ff fda6 	bl	80025e4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	// Reset ModWidthReg
	PCD_WriteRegister(ModWidthReg, 0x26);
 8002a98:	2226      	movs	r2, #38	; 0x26
 8002a9a:	2148      	movs	r1, #72	; 0x48
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f7ff fda1 	bl	80025e4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>

	// When communicating with a PICC we need a timeout if something goes wrong.
	// f_timer = 13.56 MHz / (2*TPreScaler+1) where TPreScaler = [TPrescaler_Hi:TPrescaler_Lo].
	// TPrescaler_Hi are the four low bits in TModeReg. TPrescaler_Lo is TPrescalerReg.
	PCD_WriteRegister(TModeReg, 0x80);			// TAuto=1; timer starts automatically at the end of the transmission in all communication modes at all speeds
 8002aa2:	2280      	movs	r2, #128	; 0x80
 8002aa4:	2154      	movs	r1, #84	; 0x54
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f7ff fd9c 	bl	80025e4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	PCD_WriteRegister(TPrescalerReg, 0xA9);		// TPreScaler = TModeReg[3..0]:TPrescalerReg, ie 0x0A9 = 169 => f_timer=40kHz, ie a timer period of 25μs.
 8002aac:	22a9      	movs	r2, #169	; 0xa9
 8002aae:	2156      	movs	r1, #86	; 0x56
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f7ff fd97 	bl	80025e4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	PCD_WriteRegister(TReloadRegH, 0x03);		// Reload timer with 0x3E8 = 1000, ie 25ms before timeout.
 8002ab6:	2203      	movs	r2, #3
 8002ab8:	2158      	movs	r1, #88	; 0x58
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f7ff fd92 	bl	80025e4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	PCD_WriteRegister(TReloadRegL, 0xE8);
 8002ac0:	22e8      	movs	r2, #232	; 0xe8
 8002ac2:	215a      	movs	r1, #90	; 0x5a
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f7ff fd8d 	bl	80025e4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	
	PCD_WriteRegister(TxASKReg, 0x40);		// Default 0x00. Force a 100 % ASK modulation independent of the ModGsPReg register setting
 8002aca:	2240      	movs	r2, #64	; 0x40
 8002acc:	212a      	movs	r1, #42	; 0x2a
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f7ff fd88 	bl	80025e4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	PCD_WriteRegister(ModeReg, 0x3D);		// Default 0x3F. Set the preset value for the CRC coprocessor for the CalcCRC command to 0x6363 (ISO 14443-3 part 6.2.4)
 8002ad4:	223d      	movs	r2, #61	; 0x3d
 8002ad6:	2122      	movs	r1, #34	; 0x22
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f7ff fd83 	bl	80025e4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 f82b 	bl	8002b3a <_ZN7MFRC52213PCD_AntennaOnEv>

} // End PCD_Init()
 8002ae4:	bf00      	nop
 8002ae6:	3720      	adds	r7, #32
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <_ZN7MFRC5229PCD_ResetEv>:
} // End PCD_Init()

/**
 * Performs a soft reset on the MFRC522 chip and waits for it to be ready again.
 */
void MFRC522::PCD_Reset() {
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
 8002af4:	220f      	movs	r2, #15
 8002af6:	2102      	movs	r1, #2
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f7ff fd73 	bl	80025e4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	// The datasheet does not mention how long the SoftRest command takes to complete.
	// But the MFRC522 might have been in soft power-down mode (triggered by bit 4 of CommandReg) 
	// Section 8.8.2 in the datasheet says the oscillator start-up time is the start up time of the crystal + 37,74μs. Let us be generous: 50ms.
	uint8_t count = 0;
 8002afe:	2300      	movs	r3, #0
 8002b00:	73fb      	strb	r3, [r7, #15]
	do {
		// Wait for the PowerDown bit in CommandReg to be cleared (max 3x50ms)
		HAL_Delay(50);
 8002b02:	2032      	movs	r0, #50	; 0x32
 8002b04:	f7fd fe2e 	bl	8000764 <HAL_Delay>
	} while ((PCD_ReadRegister(CommandReg) & (1 << 4)) && (++count) < 3);
 8002b08:	2102      	movs	r1, #2
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7ff fde2 	bl	80026d4 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
 8002b10:	4603      	mov	r3, r0
 8002b12:	f003 0310 	and.w	r3, r3, #16
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d007      	beq.n	8002b2a <_ZN7MFRC5229PCD_ResetEv+0x3e>
 8002b1a:	7bfb      	ldrb	r3, [r7, #15]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	73fb      	strb	r3, [r7, #15]
 8002b20:	7bfb      	ldrb	r3, [r7, #15]
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d801      	bhi.n	8002b2a <_ZN7MFRC5229PCD_ResetEv+0x3e>
 8002b26:	2301      	movs	r3, #1
 8002b28:	e000      	b.n	8002b2c <_ZN7MFRC5229PCD_ResetEv+0x40>
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d000      	beq.n	8002b32 <_ZN7MFRC5229PCD_ResetEv+0x46>
	do {
 8002b30:	e7e7      	b.n	8002b02 <_ZN7MFRC5229PCD_ResetEv+0x16>
} // End PCD_Reset()
 8002b32:	bf00      	nop
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <_ZN7MFRC52213PCD_AntennaOnEv>:

/**
 * Turns the antenna on by enabling pins TX1 and TX2.
 * After a reset these pins are disabled.
 */
void MFRC522::PCD_AntennaOn() {
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b084      	sub	sp, #16
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
	uint8_t value = PCD_ReadRegister(TxControlReg);
 8002b42:	2128      	movs	r1, #40	; 0x28
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f7ff fdc5 	bl	80026d4 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	73fb      	strb	r3, [r7, #15]
	if ((value & 0x03) != 0x03) {
 8002b4e:	7bfb      	ldrb	r3, [r7, #15]
 8002b50:	f003 0303 	and.w	r3, r3, #3
 8002b54:	2b03      	cmp	r3, #3
 8002b56:	d008      	beq.n	8002b6a <_ZN7MFRC52213PCD_AntennaOnEv+0x30>
		PCD_WriteRegister(TxControlReg, value | 0x03);
 8002b58:	7bfb      	ldrb	r3, [r7, #15]
 8002b5a:	f043 0303 	orr.w	r3, r3, #3
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	461a      	mov	r2, r3
 8002b62:	2128      	movs	r1, #40	; 0x28
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f7ff fd3d 	bl	80025e4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	}
} // End PCD_AntennaOn()
 8002b6a:	bf00      	nop
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>:
													uint8_t *backData,		///< nullptr or pointer to buffer if data should be read back after executing the command.
													uint8_t *backLen,		///< In: Max number of bytes to write to *backData. Out: The number of bytes returned.
													uint8_t *validBits,	///< In/Out: The number of valid bits in the last uint8_t. 0 for 8 valid bits. Default nullptr.
													uint8_t rxAlign,		///< In: Defines the bit position in backData[0] for the first bit received. Default 0.
													bool checkCRC		///< In: True => The last two bytes of the response is assumed to be a CRC_A that must be validated.
								 ) {
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b08c      	sub	sp, #48	; 0x30
 8002b76:	af06      	add	r7, sp, #24
 8002b78:	60f8      	str	r0, [r7, #12]
 8002b7a:	60b9      	str	r1, [r7, #8]
 8002b7c:	603b      	str	r3, [r7, #0]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	71fb      	strb	r3, [r7, #7]
	uint8_t waitIRq = 0x30;		// RxIRq and IdleIRq
 8002b82:	2330      	movs	r3, #48	; 0x30
 8002b84:	75fb      	strb	r3, [r7, #23]
	return PCD_CommunicateWithPICC(PCD_Transceive, waitIRq, sendData, sendLen, backData, backLen, validBits, rxAlign, checkCRC);
 8002b86:	7dfa      	ldrb	r2, [r7, #23]
 8002b88:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002b8c:	9305      	str	r3, [sp, #20]
 8002b8e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002b92:	9304      	str	r3, [sp, #16]
 8002b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b96:	9303      	str	r3, [sp, #12]
 8002b98:	6a3b      	ldr	r3, [r7, #32]
 8002b9a:	9302      	str	r3, [sp, #8]
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	9301      	str	r3, [sp, #4]
 8002ba0:	79fb      	ldrb	r3, [r7, #7]
 8002ba2:	9300      	str	r3, [sp, #0]
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	210c      	movs	r1, #12
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f000 f805 	bl	8002bb8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
 8002bae:	4603      	mov	r3, r0
} // End PCD_TransceiveData()
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3718      	adds	r7, #24
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>:
														uint8_t *backData,		///< nullptr or pointer to buffer if data should be read back after executing the command.
														uint8_t *backLen,		///< In: Max number of bytes to write to *backData. Out: The number of bytes returned.
														uint8_t *validBits,	///< In/Out: The number of valid bits in the last uint8_t. 0 for 8 valid bits.
														uint8_t rxAlign,		///< In: Defines the bit position in backData[0] for the first bit received. Default 0.
														bool checkCRC		///< In: True => The last two bytes of the response is assumed to be a CRC_A that must be validated.
									 ) {
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b08a      	sub	sp, #40	; 0x28
 8002bbc:	af02      	add	r7, sp, #8
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	607b      	str	r3, [r7, #4]
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	72fb      	strb	r3, [r7, #11]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	72bb      	strb	r3, [r7, #10]
	// Prepare values for BitFramingReg
	uint8_t txLastBits = validBits ? *validBits : 0;
 8002bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d002      	beq.n	8002bd6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1e>
 8002bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	e000      	b.n	8002bd8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x20>
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	777b      	strb	r3, [r7, #29]
	uint8_t bitFraming = (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
 8002bda:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002bde:	011b      	lsls	r3, r3, #4
 8002be0:	b2da      	uxtb	r2, r3
 8002be2:	7f7b      	ldrb	r3, [r7, #29]
 8002be4:	4413      	add	r3, r2
 8002be6:	773b      	strb	r3, [r7, #28]
	
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
 8002be8:	2200      	movs	r2, #0
 8002bea:	2102      	movs	r1, #2
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f7ff fcf9 	bl	80025e4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	PCD_WriteRegister(ComIrqReg, 0x7F);					// Clear all seven interrupt request bits
 8002bf2:	227f      	movs	r2, #127	; 0x7f
 8002bf4:	2108      	movs	r1, #8
 8002bf6:	68f8      	ldr	r0, [r7, #12]
 8002bf8:	f7ff fcf4 	bl	80025e4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	PCD_WriteRegister(FIFOLevelReg, 0x80);				// FlushBuffer = 1, FIFO initialization
 8002bfc:	2280      	movs	r2, #128	; 0x80
 8002bfe:	2114      	movs	r1, #20
 8002c00:	68f8      	ldr	r0, [r7, #12]
 8002c02:	f7ff fcef 	bl	80025e4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	PCD_WriteRegister(FIFODataReg, sendLen, sendData);	// Write sendData to the FIFO
 8002c06:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2112      	movs	r1, #18
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f7ff fd20 	bl	8002654 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh>
	PCD_WriteRegister(BitFramingReg, bitFraming);		// Bit adjustments
 8002c14:	7f3b      	ldrb	r3, [r7, #28]
 8002c16:	461a      	mov	r2, r3
 8002c18:	211a      	movs	r1, #26
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f7ff fce2 	bl	80025e4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	PCD_WriteRegister(CommandReg, command);				// Execute the command
 8002c20:	7afb      	ldrb	r3, [r7, #11]
 8002c22:	461a      	mov	r2, r3
 8002c24:	2102      	movs	r1, #2
 8002c26:	68f8      	ldr	r0, [r7, #12]
 8002c28:	f7ff fcdc 	bl	80025e4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	if (command == PCD_Transceive) {
 8002c2c:	7afb      	ldrb	r3, [r7, #11]
 8002c2e:	2b0c      	cmp	r3, #12
 8002c30:	d104      	bne.n	8002c3c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x84>
		PCD_SetRegisterBitMask(BitFramingReg, 0x80);	// StartSend=1, transmission of data starts
 8002c32:	2280      	movs	r2, #128	; 0x80
 8002c34:	211a      	movs	r1, #26
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f7ff fe14 	bl	8002864 <_ZN7MFRC52222PCD_SetRegisterBitMaskENS_12PCD_RegisterEh>
	// Wait here for the command to complete. The bits specified in the
	// `waitIRq` parameter define what bits constitute a completed command.
	// When they are set in the ComIrqReg register, then the command is
	// considered complete. If the command is not indicated as complete in
	// ~36ms, then consider the command as timed out.
	const uint32_t deadline = HAL_GetTick() + 36;
 8002c3c:	f7fd fd88 	bl	8000750 <HAL_GetTick>
 8002c40:	4603      	mov	r3, r0
 8002c42:	3324      	adds	r3, #36	; 0x24
 8002c44:	61bb      	str	r3, [r7, #24]
	bool completed = false;
 8002c46:	2300      	movs	r3, #0
 8002c48:	77fb      	strb	r3, [r7, #31]

	do {
		uint8_t n = PCD_ReadRegister(ComIrqReg);	// ComIrqReg[7..0] bits are: Set1 TxIRq RxIRq IdleIRq HiAlertIRq LoAlertIRq ErrIRq TimerIRq
 8002c4a:	2108      	movs	r1, #8
 8002c4c:	68f8      	ldr	r0, [r7, #12]
 8002c4e:	f7ff fd41 	bl	80026d4 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
 8002c52:	4603      	mov	r3, r0
 8002c54:	75fb      	strb	r3, [r7, #23]
		if (n & waitIRq) {					// One of the interrupts that signal success has been set.
 8002c56:	7dfa      	ldrb	r2, [r7, #23]
 8002c58:	7abb      	ldrb	r3, [r7, #10]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d002      	beq.n	8002c68 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xb0>
			completed = true;
 8002c62:	2301      	movs	r3, #1
 8002c64:	77fb      	strb	r3, [r7, #31]
			break;
 8002c66:	e012      	b.n	8002c8e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xd6>
		}
		if (n & 0x01) {						// Timer interrupt - nothing received in 25ms
 8002c68:	7dfb      	ldrb	r3, [r7, #23]
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xbe>
			return STATUS_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e098      	b.n	8002da8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1f0>
		}
		//yield();
	}
	while (static_cast<uint32_t> (HAL_GetTick()) < deadline);
 8002c76:	f7fd fd6b 	bl	8000750 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	bf8c      	ite	hi
 8002c82:	2301      	movhi	r3, #1
 8002c84:	2300      	movls	r3, #0
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d000      	beq.n	8002c8e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xd6>
	do {
 8002c8c:	e7dd      	b.n	8002c4a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x92>

	// 36ms and nothing happened. Communication with the MFRC522 might be down.
	if (!completed) {
 8002c8e:	7ffb      	ldrb	r3, [r7, #31]
 8002c90:	f083 0301 	eor.w	r3, r3, #1
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xe6>
		return STATUS_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e084      	b.n	8002da8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1f0>
	}
	
	// Stop now if any errors except collisions were detected.
	uint8_t errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl CollErr CRCErr ParityErr ProtocolErr
 8002c9e:	210c      	movs	r1, #12
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	f7ff fd17 	bl	80026d4 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	75bb      	strb	r3, [r7, #22]
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
 8002caa:	7dbb      	ldrb	r3, [r7, #22]
 8002cac:	f003 0313 	and.w	r3, r3, #19
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x100>
		return STATUS_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e077      	b.n	8002da8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1f0>
	}
  
	uint8_t _validBits = 0;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	77bb      	strb	r3, [r7, #30]
	
	// If the caller wants data back, get it from the MFRC522.
	if (backData && backLen) {
 8002cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d029      	beq.n	8002d16 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x15e>
 8002cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d026      	beq.n	8002d16 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x15e>
		uint8_t n = PCD_ReadRegister(FIFOLevelReg);	// Number of bytes in the FIFO
 8002cc8:	2114      	movs	r1, #20
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f7ff fd02 	bl	80026d4 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	757b      	strb	r3, [r7, #21]
		if (n > *backLen) {
 8002cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	7d7a      	ldrb	r2, [r7, #21]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d901      	bls.n	8002ce2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x12a>
			return STATUS_NO_ROOM;
 8002cde:	2304      	movs	r3, #4
 8002ce0:	e062      	b.n	8002da8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1f0>
		}
		*backLen = n;											// Number of bytes returned
 8002ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce4:	7d7a      	ldrb	r2, [r7, #21]
 8002ce6:	701a      	strb	r2, [r3, #0]
		PCD_ReadRegister(FIFODataReg, n, backData, rxAlign);	// Get received data from FIFO
 8002ce8:	7d7a      	ldrb	r2, [r7, #21]
 8002cea:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002cee:	9300      	str	r3, [sp, #0]
 8002cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf2:	2112      	movs	r1, #18
 8002cf4:	68f8      	ldr	r0, [r7, #12]
 8002cf6:	f7ff fd2b 	bl	8002750 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh>
		_validBits = PCD_ReadRegister(ControlReg) & 0x07;		// RxLastBits[2:0] indicates the number of valid bits in the last received uint8_t. If this value is 000b, the whole uint8_t is valid.
 8002cfa:	2118      	movs	r1, #24
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f7ff fce9 	bl	80026d4 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
 8002d02:	4603      	mov	r3, r0
 8002d04:	f003 0307 	and.w	r3, r3, #7
 8002d08:	77bb      	strb	r3, [r7, #30]
		if (validBits) {
 8002d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d002      	beq.n	8002d16 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x15e>
			*validBits = _validBits;
 8002d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d12:	7fba      	ldrb	r2, [r7, #30]
 8002d14:	701a      	strb	r2, [r3, #0]
		}
	}
	
	// Tell about collisions
	if (errorRegValue & 0x08) {		// CollErr
 8002d16:	7dbb      	ldrb	r3, [r7, #22]
 8002d18:	f003 0308 	and.w	r3, r3, #8
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x16c>
		return STATUS_COLLISION;
 8002d20:	2302      	movs	r3, #2
 8002d22:	e041      	b.n	8002da8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1f0>
	}
	
	// Perform CRC_A validation if requested.
	if (backData && backLen && checkCRC) {
 8002d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d03d      	beq.n	8002da6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1ee>
 8002d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d03a      	beq.n	8002da6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1ee>
 8002d30:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d036      	beq.n	8002da6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1ee>
		// In this case a MIFARE Classic NAK is not OK.
		if (*backLen == 1 && _validBits == 4) {
 8002d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d104      	bne.n	8002d4a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x192>
 8002d40:	7fbb      	ldrb	r3, [r7, #30]
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	d101      	bne.n	8002d4a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x192>
			return STATUS_MIFARE_NACK;
 8002d46:	23ff      	movs	r3, #255	; 0xff
 8002d48:	e02e      	b.n	8002da8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1f0>
		}
		// We need at least the CRC_A value and all 8 bits of the last uint8_t must be received.
		if (*backLen < 2 || _validBits != 0) {
 8002d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d902      	bls.n	8002d58 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1a0>
 8002d52:	7fbb      	ldrb	r3, [r7, #30]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1a4>
			return STATUS_CRC_WRONG;
 8002d58:	2307      	movs	r3, #7
 8002d5a:	e025      	b.n	8002da8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1f0>
		}
		// Verify CRC_A - do our own calculation and store the control in controlBuffer.
		uint8_t controlBuffer[2];
		MFRC522::StatusCode status = PCD_CalculateCRC(&backData[0], *backLen - 2, &controlBuffer[0]);
 8002d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	3b02      	subs	r3, #2
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	f107 0310 	add.w	r3, r7, #16
 8002d68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f7ff fdb7 	bl	80028de <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
 8002d70:	4603      	mov	r3, r0
 8002d72:	753b      	strb	r3, [r7, #20]
		if (status != STATUS_OK) {
 8002d74:	7d3b      	ldrb	r3, [r7, #20]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1c6>
			return status;
 8002d7a:	7d3b      	ldrb	r3, [r7, #20]
 8002d7c:	e014      	b.n	8002da8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1f0>
		}
		if ((backData[*backLen - 2] != controlBuffer[0]) || (backData[*backLen - 1] != controlBuffer[1])) {
 8002d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	3b02      	subs	r3, #2
 8002d84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d86:	4413      	add	r3, r2
 8002d88:	781a      	ldrb	r2, [r3, #0]
 8002d8a:	7c3b      	ldrb	r3, [r7, #16]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d108      	bne.n	8002da2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1ea>
 8002d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	3b01      	subs	r3, #1
 8002d96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d98:	4413      	add	r3, r2
 8002d9a:	781a      	ldrb	r2, [r3, #0]
 8002d9c:	7c7b      	ldrb	r3, [r7, #17]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d001      	beq.n	8002da6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1ee>
			return STATUS_CRC_WRONG;
 8002da2:	2307      	movs	r3, #7
 8002da4:	e000      	b.n	8002da8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1f0>
		}
	}
	
	return STATUS_OK;
 8002da6:	2300      	movs	r3, #0
} // End PCD_CommunicateWithPICC()
 8002da8:	4618      	mov	r0, r3
 8002daa:	3720      	adds	r7, #32
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <_ZN7MFRC52213PICC_RequestAEPhS0_>:
 * 
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
MFRC522::StatusCode MFRC522::PICC_RequestA(	uint8_t *bufferATQA,	///< The buffer to store the ATQA (Answer to request) in
											uint8_t *bufferSize	///< Buffer size, at least two bytes. Also number of bytes returned if STATUS_OK.
										) {
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
	return PICC_REQA_or_WUPA(PICC_CMD_REQA, bufferATQA, bufferSize);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	68ba      	ldr	r2, [r7, #8]
 8002dc0:	2126      	movs	r1, #38	; 0x26
 8002dc2:	68f8      	ldr	r0, [r7, #12]
 8002dc4:	f000 f805 	bl	8002dd2 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>
 8002dc8:	4603      	mov	r3, r0
} // End PICC_RequestA()
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>:
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */ 
MFRC522::StatusCode MFRC522::PICC_REQA_or_WUPA(	uint8_t command, 		///< The command to send - PICC_CMD_REQA or PICC_CMD_WUPA
												uint8_t *bufferATQA,	///< The buffer to store the ATQA (Answer to request) in
												uint8_t *bufferSize	///< Buffer size, at least two bytes. Also number of bytes returned if STATUS_OK.
											) {
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b08a      	sub	sp, #40	; 0x28
 8002dd6:	af04      	add	r7, sp, #16
 8002dd8:	60f8      	str	r0, [r7, #12]
 8002dda:	607a      	str	r2, [r7, #4]
 8002ddc:	603b      	str	r3, [r7, #0]
 8002dde:	460b      	mov	r3, r1
 8002de0:	72fb      	strb	r3, [r7, #11]
	uint8_t validBits;
	MFRC522::StatusCode status;
	
	if (bufferATQA == nullptr || *bufferSize < 2) {	// The ATQA response is 2 bytes long.
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d003      	beq.n	8002df0 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x1e>
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d801      	bhi.n	8002df4 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x22>
		return STATUS_NO_ROOM;
 8002df0:	2304      	movs	r3, #4
 8002df2:	e027      	b.n	8002e44 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x72>
	}
	PCD_ClearRegisterBitMask(CollReg, 0x80);		// ValuesAfterColl=1 => Bits received after collision are cleared.
 8002df4:	2280      	movs	r2, #128	; 0x80
 8002df6:	211c      	movs	r1, #28
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	f7ff fd4f 	bl	800289c <_ZN7MFRC52224PCD_ClearRegisterBitMaskENS_12PCD_RegisterEh>
	validBits = 7;									// For REQA and WUPA we need the short frame format - transmit only 7 bits of the last (and only) uint8_t. TxLastBits = BitFramingReg[2..0]
 8002dfe:	2307      	movs	r3, #7
 8002e00:	75bb      	strb	r3, [r7, #22]
	status = PCD_TransceiveData(&command, 1, bufferATQA, bufferSize, &validBits);
 8002e02:	f107 010b 	add.w	r1, r7, #11
 8002e06:	2300      	movs	r3, #0
 8002e08:	9303      	str	r3, [sp, #12]
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	9302      	str	r3, [sp, #8]
 8002e0e:	f107 0316 	add.w	r3, r7, #22
 8002e12:	9301      	str	r3, [sp, #4]
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	9300      	str	r3, [sp, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f7ff fea8 	bl	8002b72 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
 8002e22:	4603      	mov	r3, r0
 8002e24:	75fb      	strb	r3, [r7, #23]
	if (status != STATUS_OK) {
 8002e26:	7dfb      	ldrb	r3, [r7, #23]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x5e>
		return status;
 8002e2c:	7dfb      	ldrb	r3, [r7, #23]
 8002e2e:	e009      	b.n	8002e44 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x72>
	}
	if (*bufferSize != 2 || validBits != 0) {		// ATQA must be exactly 16 bits.
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d102      	bne.n	8002e3e <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x6c>
 8002e38:	7dbb      	ldrb	r3, [r7, #22]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x70>
		return STATUS_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e000      	b.n	8002e44 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x72>
	}
	return STATUS_OK;
 8002e42:	2300      	movs	r3, #0
} // End PICC_REQA_or_WUPA()
 8002e44:	4618      	mov	r0, r3
 8002e46:	3718      	adds	r7, #24
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>:
 * 
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
MFRC522::StatusCode MFRC522::PICC_Select(	Uid *uid,			///< Pointer to Uid struct. Normally output, but can also be used to supply a known UID.
											uint8_t validBits		///< The number of known UID bits supplied in *uid. Normally 0. If set you must also supply uid->size.
										 ) {
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b092      	sub	sp, #72	; 0x48
 8002e50:	af04      	add	r7, sp, #16
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	4613      	mov	r3, r2
 8002e58:	71fb      	strb	r3, [r7, #7]
	bool uidComplete;
	bool selectDone;
	bool useCascadeTag;
	uint8_t cascadeLevel = 1;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	//		10 bytes		1			CT		uid0	uid1	uid2
	//						2			CT		uid3	uid4	uid5
	//						3			uid6	uid7	uid8	uid9
	
	// Sanity checks
	if (validBits > 80) {
 8002e60:	79fb      	ldrb	r3, [r7, #7]
 8002e62:	2b50      	cmp	r3, #80	; 0x50
 8002e64:	d901      	bls.n	8002e6a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1e>
		return STATUS_INVALID;
 8002e66:	2306      	movs	r3, #6
 8002e68:	e254      	b.n	8003314 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x4c8>
	}
	
	// Prepare MFRC522
	PCD_ClearRegisterBitMask(CollReg, 0x80);		// ValuesAfterColl=1 => Bits received after collision are cleared.
 8002e6a:	2280      	movs	r2, #128	; 0x80
 8002e6c:	211c      	movs	r1, #28
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	f7ff fd14 	bl	800289c <_ZN7MFRC52224PCD_ClearRegisterBitMaskENS_12PCD_RegisterEh>
	
	// Repeat Cascade Level loop until we have a complete UID.
	uidComplete = false;
 8002e74:	2300      	movs	r3, #0
 8002e76:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	while (!uidComplete) {
 8002e7a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f040 823d 	bne.w	80032fe <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x4b2>
		// Set the Cascade Level in the SEL uint8_t, find out if we need to use the Cascade Tag in uint8_t 2.
		switch (cascadeLevel) {
 8002e84:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002e88:	2b03      	cmp	r3, #3
 8002e8a:	d02a      	beq.n	8002ee2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x96>
 8002e8c:	2b03      	cmp	r3, #3
 8002e8e:	dc31      	bgt.n	8002ef4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa8>
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d002      	beq.n	8002e9a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x4e>
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d012      	beq.n	8002ebe <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x72>
 8002e98:	e02c      	b.n	8002ef4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa8>
			case 1:
				buffer[0] = PICC_CMD_SEL_CL1;
 8002e9a:	2393      	movs	r3, #147	; 0x93
 8002e9c:	763b      	strb	r3, [r7, #24]
				uidIndex = 0;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
 8002ea4:	79fb      	ldrb	r3, [r7, #7]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d005      	beq.n	8002eb6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x6a>
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	2b04      	cmp	r3, #4
 8002eb0:	d901      	bls.n	8002eb6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x6a>
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e000      	b.n	8002eb8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x6c>
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
				break;
 8002ebc:	e01c      	b.n	8002ef8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xac>
			
			case 2:
				buffer[0] = PICC_CMD_SEL_CL2;
 8002ebe:	2395      	movs	r3, #149	; 0x95
 8002ec0:	763b      	strb	r3, [r7, #24]
				uidIndex = 3;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
 8002ec8:	79fb      	ldrb	r3, [r7, #7]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d005      	beq.n	8002eda <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x8e>
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	2b07      	cmp	r3, #7
 8002ed4:	d901      	bls.n	8002eda <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x8e>
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e000      	b.n	8002edc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x90>
 8002eda:	2300      	movs	r3, #0
 8002edc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
				break;
 8002ee0:	e00a      	b.n	8002ef8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xac>
			
			case 3:
				buffer[0] = PICC_CMD_SEL_CL3;
 8002ee2:	2397      	movs	r3, #151	; 0x97
 8002ee4:	763b      	strb	r3, [r7, #24]
				uidIndex = 6;
 8002ee6:	2306      	movs	r3, #6
 8002ee8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
				useCascadeTag = false;						// Never used in CL3.
 8002eec:	2300      	movs	r3, #0
 8002eee:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
				break;
 8002ef2:	e001      	b.n	8002ef8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xac>
			
			default:
				return STATUS_INTERNAL_ERROR;
 8002ef4:	2305      	movs	r3, #5
 8002ef6:	e20d      	b.n	8003314 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x4c8>
				break;
		}
		
		// How many UID bits are known in this Cascade Level?
		currentLevelKnownBits = validBits - (8 * uidIndex);
 8002ef8:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	79fa      	ldrb	r2, [r7, #7]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		if (currentLevelKnownBits < 0) {
 8002f0a:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	da02      	bge.n	8002f18 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xcc>
			currentLevelKnownBits = 0;
 8002f12:	2300      	movs	r3, #0
 8002f14:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		}
		// Copy the known bits from uid->uidByte[] to buffer[]
		index = 2; // destination index in buffer[]
 8002f18:	2302      	movs	r3, #2
 8002f1a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		if (useCascadeTag) {
 8002f1e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00a      	beq.n	8002f3c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xf0>
			buffer[index++] = PICC_CMD_CT;
 8002f26:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002f2a:	1c5a      	adds	r2, r3, #1
 8002f2c:	f887 2032 	strb.w	r2, [r7, #50]	; 0x32
 8002f30:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002f34:	4413      	add	r3, r2
 8002f36:	2288      	movs	r2, #136	; 0x88
 8002f38:	f803 2c20 	strb.w	r2, [r3, #-32]
		}
		uint8_t bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
 8002f3c:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	da00      	bge.n	8002f46 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xfa>
 8002f44:	3307      	adds	r3, #7
 8002f46:	10db      	asrs	r3, r3, #3
 8002f48:	b25b      	sxtb	r3, r3
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002f50:	f002 0207 	and.w	r2, r2, #7
 8002f54:	b2d2      	uxtb	r2, r2
 8002f56:	2a00      	cmp	r2, #0
 8002f58:	d001      	beq.n	8002f5e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x112>
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	e000      	b.n	8002f60 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x114>
 8002f5e:	2200      	movs	r2, #0
 8002f60:	4413      	add	r3, r2
 8002f62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (bytesToCopy) {
 8002f66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d034      	beq.n	8002fd8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x18c>
			uint8_t maxBytes = useCascadeTag ? 3 : 4; // Max 4 bytes in each Cascade Level. Only 3 left if we use the Cascade Tag
 8002f6e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x12e>
 8002f76:	2303      	movs	r3, #3
 8002f78:	e000      	b.n	8002f7c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x130>
 8002f7a:	2304      	movs	r3, #4
 8002f7c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			if (bytesToCopy > maxBytes) {
 8002f80:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002f84:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d903      	bls.n	8002f94 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x148>
				bytesToCopy = maxBytes;
 8002f8c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002f90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			for (count = 0; count < bytesToCopy; count++) {
 8002f94:	2300      	movs	r3, #0
 8002f96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8002f9a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8002f9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d218      	bcs.n	8002fd8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x18c>
				buffer[index++] = uid->uidByte[uidIndex + count];
 8002fa6:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 8002faa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002fae:	441a      	add	r2, r3
 8002fb0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002fb4:	1c59      	adds	r1, r3, #1
 8002fb6:	f887 1032 	strb.w	r1, [r7, #50]	; 0x32
 8002fba:	4619      	mov	r1, r3
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	785a      	ldrb	r2, [r3, #1]
 8002fc2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002fc6:	440b      	add	r3, r1
 8002fc8:	f803 2c20 	strb.w	r2, [r3, #-32]
			for (count = 0; count < bytesToCopy; count++) {
 8002fcc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8002fd6:	e7e0      	b.n	8002f9a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x14e>
			}
		}
		// Now that the data has been copied we need to include the 8 bits in CT in currentLevelKnownBits
		if (useCascadeTag) {
 8002fd8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d005      	beq.n	8002fec <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a0>
			currentLevelKnownBits += 8;
 8002fe0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002fe4:	3308      	adds	r3, #8
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		}
		
		// Repeat anti collision loop until we can transmit all UID bits + BCC and receive a SAK - max 32 iterations.
		selectDone = false;
 8002fec:	2300      	movs	r3, #0
 8002fee:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		while (!selectDone) {
 8002ff2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f040 8112 	bne.w	8003220 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3d4>
			// Find out how many bits and bytes to send and receive.
			if (currentLevelKnownBits >= 32) { // All UID bits in this Cascade Level are known. This is a SELECT.
 8002ffc:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 8003000:	2b1f      	cmp	r3, #31
 8003002:	dd2b      	ble.n	800305c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x210>
				//Serial.print(F("SELECT: currentLevelKnownBits=")); Serial.println(currentLevelKnownBits, DEC);
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
 8003004:	2370      	movs	r3, #112	; 0x70
 8003006:	767b      	strb	r3, [r7, #25]
				// Calculate BCC - Block Check Character
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
 8003008:	7eba      	ldrb	r2, [r7, #26]
 800300a:	7efb      	ldrb	r3, [r7, #27]
 800300c:	4053      	eors	r3, r2
 800300e:	b2da      	uxtb	r2, r3
 8003010:	7f3b      	ldrb	r3, [r7, #28]
 8003012:	4053      	eors	r3, r2
 8003014:	b2da      	uxtb	r2, r3
 8003016:	7f7b      	ldrb	r3, [r7, #29]
 8003018:	4053      	eors	r3, r2
 800301a:	b2db      	uxtb	r3, r3
 800301c:	77bb      	strb	r3, [r7, #30]
				// Calculate CRC_A
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
 800301e:	f107 0318 	add.w	r3, r7, #24
 8003022:	3307      	adds	r3, #7
 8003024:	f107 0118 	add.w	r1, r7, #24
 8003028:	2207      	movs	r2, #7
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f7ff fc57 	bl	80028de <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
 8003030:	4603      	mov	r3, r0
 8003032:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				if (result != STATUS_OK) {
 8003036:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800303a:	2b00      	cmp	r3, #0
 800303c:	d002      	beq.n	8003044 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1f8>
					return result;
 800303e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003042:	e167      	b.n	8003314 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x4c8>
				}
				txLastBits		= 0; // 0 => All 8 bits are valid.
 8003044:	2300      	movs	r3, #0
 8003046:	75fb      	strb	r3, [r7, #23]
				bufferUsed		= 9;
 8003048:	2309      	movs	r3, #9
 800304a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				// Store response in the last 3 bytes of buffer (BCC and CRC_A - not needed after tx)
				responseBuffer	= &buffer[6];
 800304e:	f107 0318 	add.w	r3, r7, #24
 8003052:	3306      	adds	r3, #6
 8003054:	62bb      	str	r3, [r7, #40]	; 0x28
				responseLength	= 3;
 8003056:	2303      	movs	r3, #3
 8003058:	75bb      	strb	r3, [r7, #22]
 800305a:	e038      	b.n	80030ce <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x282>
			}
			else { // This is an ANTICOLLISION.
				//Serial.print(F("ANTICOLLISION: currentLevelKnownBits=")); Serial.println(currentLevelKnownBits, DEC);
				txLastBits		= currentLevelKnownBits % 8;
 800305c:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 8003060:	425a      	negs	r2, r3
 8003062:	f003 0307 	and.w	r3, r3, #7
 8003066:	f002 0207 	and.w	r2, r2, #7
 800306a:	bf58      	it	pl
 800306c:	4253      	negpl	r3, r2
 800306e:	b25b      	sxtb	r3, r3
 8003070:	b2db      	uxtb	r3, r3
 8003072:	75fb      	strb	r3, [r7, #23]
				count			= currentLevelKnownBits / 8;	// Number of whole bytes in the UID part.
 8003074:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 8003078:	2b00      	cmp	r3, #0
 800307a:	da00      	bge.n	800307e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x232>
 800307c:	3307      	adds	r3, #7
 800307e:	10db      	asrs	r3, r3, #3
 8003080:	b25b      	sxtb	r3, r3
 8003082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				index			= 2 + count;					// Number of whole bytes: SEL + NVB + UIDs
 8003086:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800308a:	3302      	adds	r3, #2
 800308c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
				buffer[1]		= (index << 4) + txLastBits;	// NVB - Number of Valid Bits
 8003090:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003094:	011b      	lsls	r3, r3, #4
 8003096:	b2da      	uxtb	r2, r3
 8003098:	7dfb      	ldrb	r3, [r7, #23]
 800309a:	4413      	add	r3, r2
 800309c:	b2db      	uxtb	r3, r3
 800309e:	767b      	strb	r3, [r7, #25]
				bufferUsed		= index + (txLastBits ? 1 : 0);
 80030a0:	7dfb      	ldrb	r3, [r7, #23]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x25e>
 80030a6:	2201      	movs	r2, #1
 80030a8:	e000      	b.n	80030ac <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x260>
 80030aa:	2200      	movs	r2, #0
 80030ac:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80030b0:	4413      	add	r3, r2
 80030b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				// Store response in the unused part of buffer
				responseBuffer	= &buffer[index];
 80030b6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80030ba:	f107 0218 	add.w	r2, r7, #24
 80030be:	4413      	add	r3, r2
 80030c0:	62bb      	str	r3, [r7, #40]	; 0x28
				responseLength	= sizeof(buffer) - index;
 80030c2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80030c6:	f1c3 0309 	rsb	r3, r3, #9
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	75bb      	strb	r3, [r7, #22]
			}
			
			// Set bit adjustments
			rxAlign = txLastBits;											// Having a separate variable is overkill. But it makes the next line easier to read.
 80030ce:	7dfb      	ldrb	r3, [r7, #23]
 80030d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			PCD_WriteRegister(BitFramingReg, (rxAlign << 4) + txLastBits);	// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
 80030d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030d8:	011b      	lsls	r3, r3, #4
 80030da:	b2da      	uxtb	r2, r3
 80030dc:	7dfb      	ldrb	r3, [r7, #23]
 80030de:	4413      	add	r3, r2
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	461a      	mov	r2, r3
 80030e4:	211a      	movs	r1, #26
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	f7ff fa7c 	bl	80025e4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
			
			// Transmit the buffer and receive the response.
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);
 80030ec:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80030f0:	f107 0118 	add.w	r1, r7, #24
 80030f4:	2300      	movs	r3, #0
 80030f6:	9303      	str	r3, [sp, #12]
 80030f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030fc:	9302      	str	r3, [sp, #8]
 80030fe:	f107 0317 	add.w	r3, r7, #23
 8003102:	9301      	str	r3, [sp, #4]
 8003104:	f107 0316 	add.w	r3, r7, #22
 8003108:	9300      	str	r3, [sp, #0]
 800310a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	f7ff fd30 	bl	8002b72 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
 8003112:	4603      	mov	r3, r0
 8003114:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
 8003118:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800311c:	2b02      	cmp	r3, #2
 800311e:	d16c      	bne.n	80031fa <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3ae>
				uint8_t valueOfCollReg = PCD_ReadRegister(CollReg); // CollReg[7..0] bits are: ValuesAfterColl reserved CollPosNotValid CollPos[4:0]
 8003120:	211c      	movs	r1, #28
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f7ff fad6 	bl	80026d4 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
 8003128:	4603      	mov	r3, r0
 800312a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
				if (valueOfCollReg & 0x20) { // CollPosNotValid
 800312e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8003132:	f003 0320 	and.w	r3, r3, #32
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2f2>
					return STATUS_COLLISION; // Without a valid collision position we cannot continue
 800313a:	2302      	movs	r3, #2
 800313c:	e0ea      	b.n	8003314 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x4c8>
				}
				uint8_t collisionPos = valueOfCollReg & 0x1F; // Values 0-31, 0 means bit 32.
 800313e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8003142:	f003 031f 	and.w	r3, r3, #31
 8003146:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				if (collisionPos == 0) {
 800314a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800314e:	2b00      	cmp	r3, #0
 8003150:	d102      	bne.n	8003158 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x30c>
					collisionPos = 32;
 8003152:	2320      	movs	r3, #32
 8003154:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				}
				if (collisionPos <= currentLevelKnownBits) { // No progress - should not happen 
 8003158:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800315c:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 8003160:	429a      	cmp	r2, r3
 8003162:	dc01      	bgt.n	8003168 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x31c>
					return STATUS_INTERNAL_ERROR;
 8003164:	2305      	movs	r3, #5
 8003166:	e0d5      	b.n	8003314 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x4c8>
				}
				// Choose the PICC with the bit set.
				currentLevelKnownBits	= collisionPos;
 8003168:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800316c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
				count			= currentLevelKnownBits % 8; // The bit to modify
 8003170:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 8003174:	425a      	negs	r2, r3
 8003176:	f003 0307 	and.w	r3, r3, #7
 800317a:	f002 0207 	and.w	r2, r2, #7
 800317e:	bf58      	it	pl
 8003180:	4253      	negpl	r3, r2
 8003182:	b25b      	sxtb	r3, r3
 8003184:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				checkBit		= (currentLevelKnownBits - 1) % 8;
 8003188:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 800318c:	3b01      	subs	r3, #1
 800318e:	425a      	negs	r2, r3
 8003190:	f003 0307 	and.w	r3, r3, #7
 8003194:	f002 0207 	and.w	r2, r2, #7
 8003198:	bf58      	it	pl
 800319a:	4253      	negpl	r3, r2
 800319c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First uint8_t is index 0.
 80031a0:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	da00      	bge.n	80031aa <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x35e>
 80031a8:	3307      	adds	r3, #7
 80031aa:	10db      	asrs	r3, r3, #3
 80031ac:	b25b      	sxtb	r3, r3
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80031b4:	2a00      	cmp	r2, #0
 80031b6:	d001      	beq.n	80031bc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x370>
 80031b8:	2201      	movs	r2, #1
 80031ba:	e000      	b.n	80031be <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x372>
 80031bc:	2200      	movs	r2, #0
 80031be:	4413      	add	r3, r2
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	3301      	adds	r3, #1
 80031c4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
				buffer[index]	|= (1 << checkBit);
 80031c8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80031cc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80031d0:	4413      	add	r3, r2
 80031d2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80031d6:	b25a      	sxtb	r2, r3
 80031d8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80031dc:	2101      	movs	r1, #1
 80031de:	fa01 f303 	lsl.w	r3, r1, r3
 80031e2:	b25b      	sxtb	r3, r3
 80031e4:	4313      	orrs	r3, r2
 80031e6:	b25a      	sxtb	r2, r3
 80031e8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80031ec:	b2d2      	uxtb	r2, r2
 80031ee:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80031f2:	440b      	add	r3, r1
 80031f4:	f803 2c20 	strb.w	r2, [r3, #-32]
 80031f8:	e6fb      	b.n	8002ff2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a6>
			}
			else if (result != STATUS_OK) {
 80031fa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d002      	beq.n	8003208 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3bc>
				return result;
 8003202:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003206:	e085      	b.n	8003314 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x4c8>
			}
			else { // STATUS_OK
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
 8003208:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 800320c:	2b1f      	cmp	r3, #31
 800320e:	dd03      	ble.n	8003218 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3cc>
					selectDone = true; // No more anticollision 
 8003210:	2301      	movs	r3, #1
 8003212:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8003216:	e6ec      	b.n	8002ff2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a6>
					// We continue below outside the while.
				}
				else { // This was an ANTICOLLISION.
					// We now have all 32 bits of the UID in this Cascade Level
					currentLevelKnownBits = 32;
 8003218:	2320      	movs	r3, #32
 800321a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		while (!selectDone) {
 800321e:	e6e8      	b.n	8002ff2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a6>
		} // End of while (!selectDone)
		
		// We do not check the CBB - it was constructed by us above.
		
		// Copy the found UID bytes from buffer[] to uid->uidByte[]
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
 8003220:	7ebb      	ldrb	r3, [r7, #26]
 8003222:	2b88      	cmp	r3, #136	; 0x88
 8003224:	d101      	bne.n	800322a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3de>
 8003226:	2303      	movs	r3, #3
 8003228:	e000      	b.n	800322c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3e0>
 800322a:	2302      	movs	r3, #2
 800322c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
 8003230:	7ebb      	ldrb	r3, [r7, #26]
 8003232:	2b88      	cmp	r3, #136	; 0x88
 8003234:	d101      	bne.n	800323a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3ee>
 8003236:	2303      	movs	r3, #3
 8003238:	e000      	b.n	800323c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3f0>
 800323a:	2304      	movs	r3, #4
 800323c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		for (count = 0; count < bytesToCopy; count++) {
 8003240:	2300      	movs	r3, #0
 8003242:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003246:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800324a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800324e:	429a      	cmp	r2, r3
 8003250:	d219      	bcs.n	8003286 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x43a>
			uid->uidByte[uidIndex + count] = buffer[index++];
 8003252:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003256:	1c5a      	adds	r2, r3, #1
 8003258:	f887 2032 	strb.w	r2, [r7, #50]	; 0x32
 800325c:	4619      	mov	r1, r3
 800325e:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 8003262:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003266:	4413      	add	r3, r2
 8003268:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800326c:	440a      	add	r2, r1
 800326e:	f812 1c20 	ldrb.w	r1, [r2, #-32]
 8003272:	68ba      	ldr	r2, [r7, #8]
 8003274:	4413      	add	r3, r2
 8003276:	460a      	mov	r2, r1
 8003278:	705a      	strb	r2, [r3, #1]
		for (count = 0; count < bytesToCopy; count++) {
 800327a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800327e:	3301      	adds	r3, #1
 8003280:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003284:	e7df      	b.n	8003246 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3fa>
		}
		
		// Check response SAK (Select Acknowledge)
		if (responseLength != 3 || txLastBits != 0) { // SAK must be exactly 24 bits (1 uint8_t + CRC_A).
 8003286:	7dbb      	ldrb	r3, [r7, #22]
 8003288:	2b03      	cmp	r3, #3
 800328a:	d102      	bne.n	8003292 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x446>
 800328c:	7dfb      	ldrb	r3, [r7, #23]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x44a>
			return STATUS_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e03e      	b.n	8003314 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x4c8>
		}
		// Verify CRC_A - do our own calculation and store the control in buffer[2..3] - those bytes are not needed anymore.
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
 8003296:	f107 0318 	add.w	r3, r7, #24
 800329a:	3302      	adds	r3, #2
 800329c:	2201      	movs	r2, #1
 800329e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f7ff fb1c 	bl	80028de <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
 80032a6:	4603      	mov	r3, r0
 80032a8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		if (result != STATUS_OK) {
 80032ac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d002      	beq.n	80032ba <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x46e>
			return result;
 80032b4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80032b8:	e02c      	b.n	8003314 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x4c8>
		}
		if ((buffer[2] != responseBuffer[1]) || (buffer[3] != responseBuffer[2])) {
 80032ba:	7eba      	ldrb	r2, [r7, #26]
 80032bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032be:	3301      	adds	r3, #1
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d105      	bne.n	80032d2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x486>
 80032c6:	7efa      	ldrb	r2, [r7, #27]
 80032c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ca:	3302      	adds	r3, #2
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d001      	beq.n	80032d6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x48a>
			return STATUS_CRC_WRONG;
 80032d2:	2307      	movs	r3, #7
 80032d4:	e01e      	b.n	8003314 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x4c8>
		}
		if (responseBuffer[0] & 0x04) { // Cascade bit set - UID not complete yes
 80032d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	f003 0304 	and.w	r3, r3, #4
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d005      	beq.n	80032ee <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x4a2>
			cascadeLevel++;
 80032e2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80032e6:	3301      	adds	r3, #1
 80032e8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80032ec:	e5c5      	b.n	8002e7a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2e>
		}
		else {
			uidComplete = true;
 80032ee:	2301      	movs	r3, #1
 80032f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			uid->sak = responseBuffer[0];
 80032f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f6:	781a      	ldrb	r2, [r3, #0]
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	72da      	strb	r2, [r3, #11]
	while (!uidComplete) {
 80032fc:	e5bd      	b.n	8002e7a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2e>
		}
	} // End of while (!uidComplete)
	
	// Set correct uid->size
	uid->size = 3 * cascadeLevel + 1;
 80032fe:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003302:	461a      	mov	r2, r3
 8003304:	0052      	lsls	r2, r2, #1
 8003306:	4413      	add	r3, r2
 8003308:	b2db      	uxtb	r3, r3
 800330a:	3301      	adds	r3, #1
 800330c:	b2da      	uxtb	r2, r3
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
 8003312:	2300      	movs	r3, #0
} // End PICC_Select()
 8003314:	4618      	mov	r0, r3
 8003316:	3738      	adds	r7, #56	; 0x38
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <_ZN7MFRC52212PICC_GetTypeEh>:
 * Translates the SAK (Select Acknowledge) to a PICC type.
 * 
 * @return PICC_Type
 */
MFRC522::PICC_Type MFRC522::PICC_GetType(uint8_t sak		///< The SAK uint8_t returned from PICC_Select().
										) {
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	4603      	mov	r3, r0
 8003324:	71fb      	strb	r3, [r7, #7]
	// http://www.nxp.com/documents/application_note/AN10833.pdf 
	// 3.2 Coding of Select Acknowledge (SAK)
	// ignore 8-bit (iso14443 starts with LSBit = bit 1)
	// fixes wrong type for manufacturer Infineon (http://nfc-tools.org/index.php?title=ISO14443A)
	sak &= 0x7F;
 8003326:	79fb      	ldrb	r3, [r7, #7]
 8003328:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800332c:	71fb      	strb	r3, [r7, #7]
	switch (sak) {
 800332e:	79fb      	ldrb	r3, [r7, #7]
 8003330:	2b40      	cmp	r3, #64	; 0x40
 8003332:	f200 8097 	bhi.w	8003464 <_ZN7MFRC52212PICC_GetTypeEh+0x148>
 8003336:	a201      	add	r2, pc, #4	; (adr r2, 800333c <_ZN7MFRC52212PICC_GetTypeEh+0x20>)
 8003338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800333c:	08003451 	.word	0x08003451
 8003340:	08003459 	.word	0x08003459
 8003344:	08003465 	.word	0x08003465
 8003348:	08003465 	.word	0x08003465
 800334c:	08003441 	.word	0x08003441
 8003350:	08003465 	.word	0x08003465
 8003354:	08003465 	.word	0x08003465
 8003358:	08003465 	.word	0x08003465
 800335c:	08003449 	.word	0x08003449
 8003360:	08003445 	.word	0x08003445
 8003364:	08003465 	.word	0x08003465
 8003368:	08003465 	.word	0x08003465
 800336c:	08003465 	.word	0x08003465
 8003370:	08003465 	.word	0x08003465
 8003374:	08003465 	.word	0x08003465
 8003378:	08003465 	.word	0x08003465
 800337c:	08003455 	.word	0x08003455
 8003380:	08003455 	.word	0x08003455
 8003384:	08003465 	.word	0x08003465
 8003388:	08003465 	.word	0x08003465
 800338c:	08003465 	.word	0x08003465
 8003390:	08003465 	.word	0x08003465
 8003394:	08003465 	.word	0x08003465
 8003398:	08003465 	.word	0x08003465
 800339c:	0800344d 	.word	0x0800344d
 80033a0:	08003465 	.word	0x08003465
 80033a4:	08003465 	.word	0x08003465
 80033a8:	08003465 	.word	0x08003465
 80033ac:	08003465 	.word	0x08003465
 80033b0:	08003465 	.word	0x08003465
 80033b4:	08003465 	.word	0x08003465
 80033b8:	08003465 	.word	0x08003465
 80033bc:	0800345d 	.word	0x0800345d
 80033c0:	08003465 	.word	0x08003465
 80033c4:	08003465 	.word	0x08003465
 80033c8:	08003465 	.word	0x08003465
 80033cc:	08003465 	.word	0x08003465
 80033d0:	08003465 	.word	0x08003465
 80033d4:	08003465 	.word	0x08003465
 80033d8:	08003465 	.word	0x08003465
 80033dc:	08003465 	.word	0x08003465
 80033e0:	08003465 	.word	0x08003465
 80033e4:	08003465 	.word	0x08003465
 80033e8:	08003465 	.word	0x08003465
 80033ec:	08003465 	.word	0x08003465
 80033f0:	08003465 	.word	0x08003465
 80033f4:	08003465 	.word	0x08003465
 80033f8:	08003465 	.word	0x08003465
 80033fc:	08003465 	.word	0x08003465
 8003400:	08003465 	.word	0x08003465
 8003404:	08003465 	.word	0x08003465
 8003408:	08003465 	.word	0x08003465
 800340c:	08003465 	.word	0x08003465
 8003410:	08003465 	.word	0x08003465
 8003414:	08003465 	.word	0x08003465
 8003418:	08003465 	.word	0x08003465
 800341c:	08003465 	.word	0x08003465
 8003420:	08003465 	.word	0x08003465
 8003424:	08003465 	.word	0x08003465
 8003428:	08003465 	.word	0x08003465
 800342c:	08003465 	.word	0x08003465
 8003430:	08003465 	.word	0x08003465
 8003434:	08003465 	.word	0x08003465
 8003438:	08003465 	.word	0x08003465
 800343c:	08003461 	.word	0x08003461
		case 0x04:	return PICC_TYPE_NOT_COMPLETE;	// UID not complete
 8003440:	23ff      	movs	r3, #255	; 0xff
 8003442:	e010      	b.n	8003466 <_ZN7MFRC52212PICC_GetTypeEh+0x14a>
		case 0x09:	return PICC_TYPE_MIFARE_MINI;
 8003444:	2303      	movs	r3, #3
 8003446:	e00e      	b.n	8003466 <_ZN7MFRC52212PICC_GetTypeEh+0x14a>
		case 0x08:	return PICC_TYPE_MIFARE_1K;
 8003448:	2304      	movs	r3, #4
 800344a:	e00c      	b.n	8003466 <_ZN7MFRC52212PICC_GetTypeEh+0x14a>
		case 0x18:	return PICC_TYPE_MIFARE_4K;
 800344c:	2305      	movs	r3, #5
 800344e:	e00a      	b.n	8003466 <_ZN7MFRC52212PICC_GetTypeEh+0x14a>
		case 0x00:	return PICC_TYPE_MIFARE_UL;
 8003450:	2306      	movs	r3, #6
 8003452:	e008      	b.n	8003466 <_ZN7MFRC52212PICC_GetTypeEh+0x14a>
		case 0x10:
		case 0x11:	return PICC_TYPE_MIFARE_PLUS;
 8003454:	2307      	movs	r3, #7
 8003456:	e006      	b.n	8003466 <_ZN7MFRC52212PICC_GetTypeEh+0x14a>
		case 0x01:	return PICC_TYPE_TNP3XXX;
 8003458:	2309      	movs	r3, #9
 800345a:	e004      	b.n	8003466 <_ZN7MFRC52212PICC_GetTypeEh+0x14a>
		case 0x20:	return PICC_TYPE_ISO_14443_4;
 800345c:	2301      	movs	r3, #1
 800345e:	e002      	b.n	8003466 <_ZN7MFRC52212PICC_GetTypeEh+0x14a>
		case 0x40:	return PICC_TYPE_ISO_18092;
 8003460:	2302      	movs	r3, #2
 8003462:	e000      	b.n	8003466 <_ZN7MFRC52212PICC_GetTypeEh+0x14a>
		default:	return PICC_TYPE_UNKNOWN;
 8003464:	2300      	movs	r3, #0
	}
} // End PICC_GetType()
 8003466:	4618      	mov	r0, r3
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	bc80      	pop	{r7}
 800346e:	4770      	bx	lr

08003470 <_ZN7MFRC52216PICC_GetTypeNameENS_9PICC_TypeE>:
 * Returns a __FlashStringHelper pointer to the PICC type name.
 * 
 * @return const __FlashStringHelper *
 */
const char *MFRC522::PICC_GetTypeName(PICC_Type piccType	///< One of the PICC_Type enums.
													) {
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	4603      	mov	r3, r0
 8003478:	71fb      	strb	r3, [r7, #7]
	switch (piccType) {
 800347a:	79fb      	ldrb	r3, [r7, #7]
 800347c:	2b09      	cmp	r3, #9
 800347e:	dc19      	bgt.n	80034b4 <_ZN7MFRC52216PICC_GetTypeNameENS_9PICC_TypeE+0x44>
 8003480:	2b00      	cmp	r3, #0
 8003482:	dd2e      	ble.n	80034e2 <_ZN7MFRC52216PICC_GetTypeNameENS_9PICC_TypeE+0x72>
 8003484:	3b01      	subs	r3, #1
 8003486:	2b08      	cmp	r3, #8
 8003488:	d82b      	bhi.n	80034e2 <_ZN7MFRC52216PICC_GetTypeNameENS_9PICC_TypeE+0x72>
 800348a:	a201      	add	r2, pc, #4	; (adr r2, 8003490 <_ZN7MFRC52216PICC_GetTypeNameENS_9PICC_TypeE+0x20>)
 800348c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003490:	080034bb 	.word	0x080034bb
 8003494:	080034bf 	.word	0x080034bf
 8003498:	080034c3 	.word	0x080034c3
 800349c:	080034c7 	.word	0x080034c7
 80034a0:	080034cb 	.word	0x080034cb
 80034a4:	080034cf 	.word	0x080034cf
 80034a8:	080034d3 	.word	0x080034d3
 80034ac:	080034d7 	.word	0x080034d7
 80034b0:	080034db 	.word	0x080034db
 80034b4:	2bff      	cmp	r3, #255	; 0xff
 80034b6:	d012      	beq.n	80034de <_ZN7MFRC52216PICC_GetTypeNameENS_9PICC_TypeE+0x6e>
 80034b8:	e013      	b.n	80034e2 <_ZN7MFRC52216PICC_GetTypeNameENS_9PICC_TypeE+0x72>
		case PICC_TYPE_ISO_14443_4:		return "PICC compliant with ISO/IEC 14443-4";
 80034ba:	4b0d      	ldr	r3, [pc, #52]	; (80034f0 <_ZN7MFRC52216PICC_GetTypeNameENS_9PICC_TypeE+0x80>)
 80034bc:	e012      	b.n	80034e4 <_ZN7MFRC52216PICC_GetTypeNameENS_9PICC_TypeE+0x74>
		case PICC_TYPE_ISO_18092:		return "PICC compliant with ISO/IEC 18092 (NFC)";
 80034be:	4b0d      	ldr	r3, [pc, #52]	; (80034f4 <_ZN7MFRC52216PICC_GetTypeNameENS_9PICC_TypeE+0x84>)
 80034c0:	e010      	b.n	80034e4 <_ZN7MFRC52216PICC_GetTypeNameENS_9PICC_TypeE+0x74>
		case PICC_TYPE_MIFARE_MINI:		return "MIFARE Mini, 320 bytes";
 80034c2:	4b0d      	ldr	r3, [pc, #52]	; (80034f8 <_ZN7MFRC52216PICC_GetTypeNameENS_9PICC_TypeE+0x88>)
 80034c4:	e00e      	b.n	80034e4 <_ZN7MFRC52216PICC_GetTypeNameENS_9PICC_TypeE+0x74>
		case PICC_TYPE_MIFARE_1K:		return "MIFARE 1KB";
 80034c6:	4b0d      	ldr	r3, [pc, #52]	; (80034fc <_ZN7MFRC52216PICC_GetTypeNameENS_9PICC_TypeE+0x8c>)
 80034c8:	e00c      	b.n	80034e4 <_ZN7MFRC52216PICC_GetTypeNameENS_9PICC_TypeE+0x74>
		case PICC_TYPE_MIFARE_4K:		return "MIFARE 4KB";
 80034ca:	4b0d      	ldr	r3, [pc, #52]	; (8003500 <_ZN7MFRC52216PICC_GetTypeNameENS_9PICC_TypeE+0x90>)
 80034cc:	e00a      	b.n	80034e4 <_ZN7MFRC52216PICC_GetTypeNameENS_9PICC_TypeE+0x74>
		case PICC_TYPE_MIFARE_UL:		return "MIFARE Ultralight or Ultralight C";
 80034ce:	4b0d      	ldr	r3, [pc, #52]	; (8003504 <_ZN7MFRC52216PICC_GetTypeNameENS_9PICC_TypeE+0x94>)
 80034d0:	e008      	b.n	80034e4 <_ZN7MFRC52216PICC_GetTypeNameENS_9PICC_TypeE+0x74>
		case PICC_TYPE_MIFARE_PLUS:		return "MIFARE Plus";
 80034d2:	4b0d      	ldr	r3, [pc, #52]	; (8003508 <_ZN7MFRC52216PICC_GetTypeNameENS_9PICC_TypeE+0x98>)
 80034d4:	e006      	b.n	80034e4 <_ZN7MFRC52216PICC_GetTypeNameENS_9PICC_TypeE+0x74>
		case PICC_TYPE_MIFARE_DESFIRE:	return "MIFARE DESFire";
 80034d6:	4b0d      	ldr	r3, [pc, #52]	; (800350c <_ZN7MFRC52216PICC_GetTypeNameENS_9PICC_TypeE+0x9c>)
 80034d8:	e004      	b.n	80034e4 <_ZN7MFRC52216PICC_GetTypeNameENS_9PICC_TypeE+0x74>
		case PICC_TYPE_TNP3XXX:			return "MIFARE TNP3XXX";
 80034da:	4b0d      	ldr	r3, [pc, #52]	; (8003510 <_ZN7MFRC52216PICC_GetTypeNameENS_9PICC_TypeE+0xa0>)
 80034dc:	e002      	b.n	80034e4 <_ZN7MFRC52216PICC_GetTypeNameENS_9PICC_TypeE+0x74>
		case PICC_TYPE_NOT_COMPLETE:	return "SAK indicates UID is not complete.";
 80034de:	4b0d      	ldr	r3, [pc, #52]	; (8003514 <_ZN7MFRC52216PICC_GetTypeNameENS_9PICC_TypeE+0xa4>)
 80034e0:	e000      	b.n	80034e4 <_ZN7MFRC52216PICC_GetTypeNameENS_9PICC_TypeE+0x74>
		case PICC_TYPE_UNKNOWN:
		default:						return "Unknown type";
 80034e2:	4b0d      	ldr	r3, [pc, #52]	; (8003518 <_ZN7MFRC52216PICC_GetTypeNameENS_9PICC_TypeE+0xa8>)
	}
} // End PICC_GetTypeName()
 80034e4:	4618      	mov	r0, r3
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bc80      	pop	{r7}
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	08004294 	.word	0x08004294
 80034f4:	080042b8 	.word	0x080042b8
 80034f8:	080042e0 	.word	0x080042e0
 80034fc:	080042f8 	.word	0x080042f8
 8003500:	08004304 	.word	0x08004304
 8003504:	08004310 	.word	0x08004310
 8003508:	08004334 	.word	0x08004334
 800350c:	08004340 	.word	0x08004340
 8003510:	08004350 	.word	0x08004350
 8003514:	08004360 	.word	0x08004360
 8003518:	08004384 	.word	0x08004384

0800351c <_ZN7MFRC52223PCD_DumpVersionToSerialEv>:

/**
 * Dumps debug info about the connected PCD to Serial.
 * Shows all known firmware versions
 */
void MFRC522::PCD_DumpVersionToSerial() {
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
	// Get the MFRC522 firmware version
	uint8_t v = PCD_ReadRegister(VersionReg);
 8003524:	216e      	movs	r1, #110	; 0x6e
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f7ff f8d4 	bl	80026d4 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
 800352c:	4603      	mov	r3, r0
 800352e:	73fb      	strb	r3, [r7, #15]

	msgdebug_size = sprintf(msgdebug, "Firmware Version: 0x%02X\r\n", v);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	3310      	adds	r3, #16
 8003534:	7bfa      	ldrb	r2, [r7, #15]
 8003536:	4941      	ldr	r1, [pc, #260]	; (800363c <_ZN7MFRC52223PCD_DumpVersionToSerialEv+0x120>)
 8003538:	4618      	mov	r0, r3
 800353a:	f000 fa85 	bl	8003a48 <siprintf>
 800353e:	4602      	mov	r2, r0
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	HAL_UART_Transmit(&huart1, (uint8_t *) msgdebug, msgdebug_size, 200);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f103 0110 	add.w	r1, r3, #16
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8003552:	b29a      	uxth	r2, r3
 8003554:	23c8      	movs	r3, #200	; 0xc8
 8003556:	483a      	ldr	r0, [pc, #232]	; (8003640 <_ZN7MFRC52223PCD_DumpVersionToSerialEv+0x124>)
 8003558:	f7fe fd93 	bl	8002082 <HAL_UART_Transmit>

	// Lookup which version
	switch(v) {
 800355c:	7bfb      	ldrb	r3, [r7, #15]
 800355e:	2b12      	cmp	r3, #18
 8003560:	d03e      	beq.n	80035e0 <_ZN7MFRC52223PCD_DumpVersionToSerialEv+0xc4>
 8003562:	2b12      	cmp	r3, #18
 8003564:	db43      	blt.n	80035ee <_ZN7MFRC52223PCD_DumpVersionToSerialEv+0xd2>
 8003566:	2b92      	cmp	r3, #146	; 0x92
 8003568:	dc41      	bgt.n	80035ee <_ZN7MFRC52223PCD_DumpVersionToSerialEv+0xd2>
 800356a:	2b88      	cmp	r3, #136	; 0x88
 800356c:	db3f      	blt.n	80035ee <_ZN7MFRC52223PCD_DumpVersionToSerialEv+0xd2>
 800356e:	3b88      	subs	r3, #136	; 0x88
 8003570:	2b0a      	cmp	r3, #10
 8003572:	d83c      	bhi.n	80035ee <_ZN7MFRC52223PCD_DumpVersionToSerialEv+0xd2>
 8003574:	a201      	add	r2, pc, #4	; (adr r2, 800357c <_ZN7MFRC52223PCD_DumpVersionToSerialEv+0x60>)
 8003576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800357a:	bf00      	nop
 800357c:	080035a9 	.word	0x080035a9
 8003580:	080035ef 	.word	0x080035ef
 8003584:	080035ef 	.word	0x080035ef
 8003588:	080035ef 	.word	0x080035ef
 800358c:	080035ef 	.word	0x080035ef
 8003590:	080035ef 	.word	0x080035ef
 8003594:	080035ef 	.word	0x080035ef
 8003598:	080035ef 	.word	0x080035ef
 800359c:	080035b7 	.word	0x080035b7
 80035a0:	080035c5 	.word	0x080035c5
 80035a4:	080035d3 	.word	0x080035d3
		case 0x88: HAL_UART_Transmit(&huart1, (uint8_t *) " = (clone)\r\n", 12, 200);  break;
 80035a8:	23c8      	movs	r3, #200	; 0xc8
 80035aa:	220c      	movs	r2, #12
 80035ac:	4925      	ldr	r1, [pc, #148]	; (8003644 <_ZN7MFRC52223PCD_DumpVersionToSerialEv+0x128>)
 80035ae:	4824      	ldr	r0, [pc, #144]	; (8003640 <_ZN7MFRC52223PCD_DumpVersionToSerialEv+0x124>)
 80035b0:	f7fe fd67 	bl	8002082 <HAL_UART_Transmit>
 80035b4:	e021      	b.n	80035fa <_ZN7MFRC52223PCD_DumpVersionToSerialEv+0xde>
		case 0x90: HAL_UART_Transmit(&huart1, (uint8_t *) " = v0.0\r\n", 9, 200);      break;
 80035b6:	23c8      	movs	r3, #200	; 0xc8
 80035b8:	2209      	movs	r2, #9
 80035ba:	4923      	ldr	r1, [pc, #140]	; (8003648 <_ZN7MFRC52223PCD_DumpVersionToSerialEv+0x12c>)
 80035bc:	4820      	ldr	r0, [pc, #128]	; (8003640 <_ZN7MFRC52223PCD_DumpVersionToSerialEv+0x124>)
 80035be:	f7fe fd60 	bl	8002082 <HAL_UART_Transmit>
 80035c2:	e01a      	b.n	80035fa <_ZN7MFRC52223PCD_DumpVersionToSerialEv+0xde>
		case 0x91: HAL_UART_Transmit(&huart1, (uint8_t *) " = v1.0\r\n", 9, 200);      break;
 80035c4:	23c8      	movs	r3, #200	; 0xc8
 80035c6:	2209      	movs	r2, #9
 80035c8:	4920      	ldr	r1, [pc, #128]	; (800364c <_ZN7MFRC52223PCD_DumpVersionToSerialEv+0x130>)
 80035ca:	481d      	ldr	r0, [pc, #116]	; (8003640 <_ZN7MFRC52223PCD_DumpVersionToSerialEv+0x124>)
 80035cc:	f7fe fd59 	bl	8002082 <HAL_UART_Transmit>
 80035d0:	e013      	b.n	80035fa <_ZN7MFRC52223PCD_DumpVersionToSerialEv+0xde>
		case 0x92: HAL_UART_Transmit(&huart1, (uint8_t *) " = v2.0\r\n", 9, 200);      break;
 80035d2:	23c8      	movs	r3, #200	; 0xc8
 80035d4:	2209      	movs	r2, #9
 80035d6:	491e      	ldr	r1, [pc, #120]	; (8003650 <_ZN7MFRC52223PCD_DumpVersionToSerialEv+0x134>)
 80035d8:	4819      	ldr	r0, [pc, #100]	; (8003640 <_ZN7MFRC52223PCD_DumpVersionToSerialEv+0x124>)
 80035da:	f7fe fd52 	bl	8002082 <HAL_UART_Transmit>
 80035de:	e00c      	b.n	80035fa <_ZN7MFRC52223PCD_DumpVersionToSerialEv+0xde>
		case 0x12: HAL_UART_Transmit(&huart1, (uint8_t *) " = counterfeit chip\r\n", 21, 200);      break;
 80035e0:	23c8      	movs	r3, #200	; 0xc8
 80035e2:	2215      	movs	r2, #21
 80035e4:	491b      	ldr	r1, [pc, #108]	; (8003654 <_ZN7MFRC52223PCD_DumpVersionToSerialEv+0x138>)
 80035e6:	4816      	ldr	r0, [pc, #88]	; (8003640 <_ZN7MFRC52223PCD_DumpVersionToSerialEv+0x124>)
 80035e8:	f7fe fd4b 	bl	8002082 <HAL_UART_Transmit>
 80035ec:	e005      	b.n	80035fa <_ZN7MFRC52223PCD_DumpVersionToSerialEv+0xde>
		default:   HAL_UART_Transmit(&huart1, (uint8_t *) " = (unknown)\r\n", 14, 200);
 80035ee:	23c8      	movs	r3, #200	; 0xc8
 80035f0:	220e      	movs	r2, #14
 80035f2:	4919      	ldr	r1, [pc, #100]	; (8003658 <_ZN7MFRC52223PCD_DumpVersionToSerialEv+0x13c>)
 80035f4:	4812      	ldr	r0, [pc, #72]	; (8003640 <_ZN7MFRC52223PCD_DumpVersionToSerialEv+0x124>)
 80035f6:	f7fe fd44 	bl	8002082 <HAL_UART_Transmit>
	}
	// When 0x00 or 0xFF is returned, communication probably failed
	if ((v == 0x00) || (v == 0xFF))
 80035fa:	7bfb      	ldrb	r3, [r7, #15]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d002      	beq.n	8003606 <_ZN7MFRC52223PCD_DumpVersionToSerialEv+0xea>
 8003600:	7bfb      	ldrb	r3, [r7, #15]
 8003602:	2bff      	cmp	r3, #255	; 0xff
 8003604:	d116      	bne.n	8003634 <_ZN7MFRC52223PCD_DumpVersionToSerialEv+0x118>
	{
		msgdebug_size = sprintf(msgdebug, "WARNING: Communication failure, is the MFRC522 properly connected? v: 0x%02X\r\n", v);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	3310      	adds	r3, #16
 800360a:	7bfa      	ldrb	r2, [r7, #15]
 800360c:	4913      	ldr	r1, [pc, #76]	; (800365c <_ZN7MFRC52223PCD_DumpVersionToSerialEv+0x140>)
 800360e:	4618      	mov	r0, r3
 8003610:	f000 fa1a 	bl	8003a48 <siprintf>
 8003614:	4602      	mov	r2, r0
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		HAL_UART_Transmit(&huart1, (uint8_t *) msgdebug, msgdebug_size, 500);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f103 0110 	add.w	r1, r3, #16
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8003628:	b29a      	uxth	r2, r3
 800362a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800362e:	4804      	ldr	r0, [pc, #16]	; (8003640 <_ZN7MFRC52223PCD_DumpVersionToSerialEv+0x124>)
 8003630:	f7fe fd27 	bl	8002082 <HAL_UART_Transmit>
	}

} // End PCD_DumpVersionToSerial()
 8003634:	bf00      	nop
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	08004394 	.word	0x08004394
 8003640:	200001a8 	.word	0x200001a8
 8003644:	080043b0 	.word	0x080043b0
 8003648:	080043c0 	.word	0x080043c0
 800364c:	080043cc 	.word	0x080043cc
 8003650:	080043d8 	.word	0x080043d8
 8003654:	080043e4 	.word	0x080043e4
 8003658:	080043fc 	.word	0x080043fc
 800365c:	0800440c 	.word	0x0800440c

08003660 <_ZN7MFRC52224PICC_DumpDetailsToSerialEPNS_3UidE>:

/**
 * Dumps card info (UID,SAK,Type) about the selected PICC to Serial.
 */
void MFRC522::PICC_DumpDetailsToSerial(Uid *uid	///< Pointer to Uid struct returned from a successful PICC_Select().
									) {
 8003660:	b590      	push	{r4, r7, lr}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
	// UID

	HAL_UART_Transmit(&huart1, (uint8_t *) "Card UID:", 9, 100);
 800366a:	2364      	movs	r3, #100	; 0x64
 800366c:	2209      	movs	r2, #9
 800366e:	4949      	ldr	r1, [pc, #292]	; (8003794 <_ZN7MFRC52224PICC_DumpDetailsToSerialEPNS_3UidE+0x134>)
 8003670:	4849      	ldr	r0, [pc, #292]	; (8003798 <_ZN7MFRC52224PICC_DumpDetailsToSerialEPNS_3UidE+0x138>)
 8003672:	f7fe fd06 	bl	8002082 <HAL_UART_Transmit>
	for (uint8_t i = 0; i < uid->size; i++) {
 8003676:	2300      	movs	r3, #0
 8003678:	73fb      	strb	r3, [r7, #15]
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	7bfa      	ldrb	r2, [r7, #15]
 8003680:	429a      	cmp	r2, r3
 8003682:	d230      	bcs.n	80036e6 <_ZN7MFRC52224PICC_DumpDetailsToSerialEPNS_3UidE+0x86>
		if(uid->uidByte[i] < 0x10)
 8003684:	7bfb      	ldrb	r3, [r7, #15]
 8003686:	683a      	ldr	r2, [r7, #0]
 8003688:	4413      	add	r3, r2
 800368a:	785b      	ldrb	r3, [r3, #1]
 800368c:	2b0f      	cmp	r3, #15
 800368e:	d806      	bhi.n	800369e <_ZN7MFRC52224PICC_DumpDetailsToSerialEPNS_3UidE+0x3e>
			HAL_UART_Transmit(&huart1, (uint8_t *) " 0", 2, 100);
 8003690:	2364      	movs	r3, #100	; 0x64
 8003692:	2202      	movs	r2, #2
 8003694:	4941      	ldr	r1, [pc, #260]	; (800379c <_ZN7MFRC52224PICC_DumpDetailsToSerialEPNS_3UidE+0x13c>)
 8003696:	4840      	ldr	r0, [pc, #256]	; (8003798 <_ZN7MFRC52224PICC_DumpDetailsToSerialEPNS_3UidE+0x138>)
 8003698:	f7fe fcf3 	bl	8002082 <HAL_UART_Transmit>
 800369c:	e005      	b.n	80036aa <_ZN7MFRC52224PICC_DumpDetailsToSerialEPNS_3UidE+0x4a>
		else
			HAL_UART_Transmit(&huart1, (uint8_t *) " ", 1, 100);
 800369e:	2364      	movs	r3, #100	; 0x64
 80036a0:	2201      	movs	r2, #1
 80036a2:	493f      	ldr	r1, [pc, #252]	; (80037a0 <_ZN7MFRC52224PICC_DumpDetailsToSerialEPNS_3UidE+0x140>)
 80036a4:	483c      	ldr	r0, [pc, #240]	; (8003798 <_ZN7MFRC52224PICC_DumpDetailsToSerialEPNS_3UidE+0x138>)
 80036a6:	f7fe fcec 	bl	8002082 <HAL_UART_Transmit>

		msgdebug_size = sprintf(msgdebug,"%X", uid->uidByte[i]);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f103 0010 	add.w	r0, r3, #16
 80036b0:	7bfb      	ldrb	r3, [r7, #15]
 80036b2:	683a      	ldr	r2, [r7, #0]
 80036b4:	4413      	add	r3, r2
 80036b6:	785b      	ldrb	r3, [r3, #1]
 80036b8:	461a      	mov	r2, r3
 80036ba:	493a      	ldr	r1, [pc, #232]	; (80037a4 <_ZN7MFRC52224PICC_DumpDetailsToSerialEPNS_3UidE+0x144>)
 80036bc:	f000 f9c4 	bl	8003a48 <siprintf>
 80036c0:	4602      	mov	r2, r0
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		HAL_UART_Transmit(&huart1,(uint8_t *) msgdebug, msgdebug_size, 100);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f103 0110 	add.w	r1, r3, #16
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	2364      	movs	r3, #100	; 0x64
 80036d8:	482f      	ldr	r0, [pc, #188]	; (8003798 <_ZN7MFRC52224PICC_DumpDetailsToSerialEPNS_3UidE+0x138>)
 80036da:	f7fe fcd2 	bl	8002082 <HAL_UART_Transmit>
	for (uint8_t i = 0; i < uid->size; i++) {
 80036de:	7bfb      	ldrb	r3, [r7, #15]
 80036e0:	3301      	adds	r3, #1
 80036e2:	73fb      	strb	r3, [r7, #15]
 80036e4:	e7c9      	b.n	800367a <_ZN7MFRC52224PICC_DumpDetailsToSerialEPNS_3UidE+0x1a>
	}

	HAL_UART_Transmit(&huart1, (uint8_t *) "\r\n", 2, 100);
 80036e6:	2364      	movs	r3, #100	; 0x64
 80036e8:	2202      	movs	r2, #2
 80036ea:	492f      	ldr	r1, [pc, #188]	; (80037a8 <_ZN7MFRC52224PICC_DumpDetailsToSerialEPNS_3UidE+0x148>)
 80036ec:	482a      	ldr	r0, [pc, #168]	; (8003798 <_ZN7MFRC52224PICC_DumpDetailsToSerialEPNS_3UidE+0x138>)
 80036ee:	f7fe fcc8 	bl	8002082 <HAL_UART_Transmit>

	// SAK
	HAL_UART_Transmit(&huart1, (uint8_t *) "Card SAK: ", 10, 100);
 80036f2:	2364      	movs	r3, #100	; 0x64
 80036f4:	220a      	movs	r2, #10
 80036f6:	492d      	ldr	r1, [pc, #180]	; (80037ac <_ZN7MFRC52224PICC_DumpDetailsToSerialEPNS_3UidE+0x14c>)
 80036f8:	4827      	ldr	r0, [pc, #156]	; (8003798 <_ZN7MFRC52224PICC_DumpDetailsToSerialEPNS_3UidE+0x138>)
 80036fa:	f7fe fcc2 	bl	8002082 <HAL_UART_Transmit>
	if(uid->sak < 0x10)
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	7adb      	ldrb	r3, [r3, #11]
 8003702:	2b0f      	cmp	r3, #15
 8003704:	d805      	bhi.n	8003712 <_ZN7MFRC52224PICC_DumpDetailsToSerialEPNS_3UidE+0xb2>
		HAL_UART_Transmit(&huart1, (uint8_t *) "0", 1, 100);
 8003706:	2364      	movs	r3, #100	; 0x64
 8003708:	2201      	movs	r2, #1
 800370a:	4929      	ldr	r1, [pc, #164]	; (80037b0 <_ZN7MFRC52224PICC_DumpDetailsToSerialEPNS_3UidE+0x150>)
 800370c:	4822      	ldr	r0, [pc, #136]	; (8003798 <_ZN7MFRC52224PICC_DumpDetailsToSerialEPNS_3UidE+0x138>)
 800370e:	f7fe fcb8 	bl	8002082 <HAL_UART_Transmit>

	msgdebug_size = sprintf(msgdebug,"%02X", uid->sak);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f103 0010 	add.w	r0, r3, #16
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	7adb      	ldrb	r3, [r3, #11]
 800371c:	461a      	mov	r2, r3
 800371e:	4925      	ldr	r1, [pc, #148]	; (80037b4 <_ZN7MFRC52224PICC_DumpDetailsToSerialEPNS_3UidE+0x154>)
 8003720:	f000 f992 	bl	8003a48 <siprintf>
 8003724:	4602      	mov	r2, r0
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	HAL_UART_Transmit(&huart1, (uint8_t *) msgdebug, msgdebug_size, 100);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f103 0110 	add.w	r1, r3, #16
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8003738:	b29a      	uxth	r2, r3
 800373a:	2364      	movs	r3, #100	; 0x64
 800373c:	4816      	ldr	r0, [pc, #88]	; (8003798 <_ZN7MFRC52224PICC_DumpDetailsToSerialEPNS_3UidE+0x138>)
 800373e:	f7fe fca0 	bl	8002082 <HAL_UART_Transmit>

	// (suggested) PICC type
	PICC_Type piccType = PICC_GetType(uid->sak);
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	7adb      	ldrb	r3, [r3, #11]
 8003746:	4618      	mov	r0, r3
 8003748:	f7ff fde8 	bl	800331c <_ZN7MFRC52212PICC_GetTypeEh>
 800374c:	4603      	mov	r3, r0
 800374e:	73bb      	strb	r3, [r7, #14]
	msgdebug_size = sprintf(msgdebug, "PICC type: %s", PICC_GetTypeName(piccType));
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f103 0410 	add.w	r4, r3, #16
 8003756:	7bbb      	ldrb	r3, [r7, #14]
 8003758:	4618      	mov	r0, r3
 800375a:	f7ff fe89 	bl	8003470 <_ZN7MFRC52216PICC_GetTypeNameENS_9PICC_TypeE>
 800375e:	4603      	mov	r3, r0
 8003760:	461a      	mov	r2, r3
 8003762:	4915      	ldr	r1, [pc, #84]	; (80037b8 <_ZN7MFRC52224PICC_DumpDetailsToSerialEPNS_3UidE+0x158>)
 8003764:	4620      	mov	r0, r4
 8003766:	f000 f96f 	bl	8003a48 <siprintf>
 800376a:	4602      	mov	r2, r0
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	HAL_UART_Transmit(&huart1, (uint8_t *) msgdebug, msgdebug_size, 500);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f103 0110 	add.w	r1, r3, #16
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800377e:	b29a      	uxth	r2, r3
 8003780:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003784:	4804      	ldr	r0, [pc, #16]	; (8003798 <_ZN7MFRC52224PICC_DumpDetailsToSerialEPNS_3UidE+0x138>)
 8003786:	f7fe fc7c 	bl	8002082 <HAL_UART_Transmit>
} // End PICC_DumpDetailsToSerial()
 800378a:	bf00      	nop
 800378c:	3714      	adds	r7, #20
 800378e:	46bd      	mov	sp, r7
 8003790:	bd90      	pop	{r4, r7, pc}
 8003792:	bf00      	nop
 8003794:	0800449c 	.word	0x0800449c
 8003798:	200001a8 	.word	0x200001a8
 800379c:	080044a8 	.word	0x080044a8
 80037a0:	080044ac 	.word	0x080044ac
 80037a4:	080044b0 	.word	0x080044b0
 80037a8:	08004498 	.word	0x08004498
 80037ac:	080044b4 	.word	0x080044b4
 80037b0:	080044c0 	.word	0x080044c0
 80037b4:	080044c4 	.word	0x080044c4
 80037b8:	080044cc 	.word	0x080044cc

080037bc <_ZN7MFRC52221PICC_IsNewCardPresentEv>:
 * Returns true if a PICC responds to PICC_CMD_REQA.
 * Only "new" cards in state IDLE are invited. Sleeping cards in state HALT are ignored.
 * 
 * @return bool
 */
bool MFRC522::PICC_IsNewCardPresent() {
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
	uint8_t bufferATQA[2];
	uint8_t bufferSize = sizeof(bufferATQA);
 80037c4:	2302      	movs	r3, #2
 80037c6:	72fb      	strb	r3, [r7, #11]

	// Reset baud rates
	PCD_WriteRegister(TxModeReg, 0x00);
 80037c8:	2200      	movs	r2, #0
 80037ca:	2124      	movs	r1, #36	; 0x24
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f7fe ff09 	bl	80025e4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	PCD_WriteRegister(RxModeReg, 0x00);
 80037d2:	2200      	movs	r2, #0
 80037d4:	2126      	movs	r1, #38	; 0x26
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f7fe ff04 	bl	80025e4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	// Reset ModWidthReg
	PCD_WriteRegister(ModWidthReg, 0x26);
 80037dc:	2226      	movs	r2, #38	; 0x26
 80037de:	2148      	movs	r1, #72	; 0x48
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f7fe feff 	bl	80025e4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>

	MFRC522::StatusCode result = PICC_RequestA(bufferATQA, &bufferSize);
 80037e6:	f107 020b 	add.w	r2, r7, #11
 80037ea:	f107 030c 	add.w	r3, r7, #12
 80037ee:	4619      	mov	r1, r3
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f7ff fadd 	bl	8002db0 <_ZN7MFRC52213PICC_RequestAEPhS0_>
 80037f6:	4603      	mov	r3, r0
 80037f8:	73fb      	strb	r3, [r7, #15]
	return (result == STATUS_OK || result == STATUS_COLLISION);
 80037fa:	7bfb      	ldrb	r3, [r7, #15]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d002      	beq.n	8003806 <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x4a>
 8003800:	7bfb      	ldrb	r3, [r7, #15]
 8003802:	2b02      	cmp	r3, #2
 8003804:	d101      	bne.n	800380a <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x4e>
 8003806:	2301      	movs	r3, #1
 8003808:	e000      	b.n	800380c <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x50>
 800380a:	2300      	movs	r3, #0
} // End PICC_IsNewCardPresent()
 800380c:	4618      	mov	r0, r3
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <_ZN7MFRC52219PICC_ReadCardSerialEv>:
 * Remember to call PICC_IsNewCardPresent(), PICC_RequestA() or PICC_WakeupA() first.
 * The read UID is available in the class variable uid.
 * 
 * @return bool
 */
bool MFRC522::PICC_ReadCardSerial() {
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
	MFRC522::StatusCode result = PICC_Select(&uid);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	1d11      	adds	r1, r2, #4
 8003826:	2200      	movs	r2, #0
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	4798      	blx	r3
 800382c:	4603      	mov	r3, r0
 800382e:	73fb      	strb	r3, [r7, #15]
	return (result == STATUS_OK);
 8003830:	7bfb      	ldrb	r3, [r7, #15]
 8003832:	2b00      	cmp	r3, #0
 8003834:	bf0c      	ite	eq
 8003836:	2301      	moveq	r3, #1
 8003838:	2300      	movne	r3, #0
 800383a:	b2db      	uxtb	r3, r3
} // End 
 800383c:	4618      	mov	r0, r3
 800383e:	3710      	adds	r7, #16
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <_ZdlPvj>:
 8003844:	f000 b800 	b.w	8003848 <_ZdlPv>

08003848 <_ZdlPv>:
 8003848:	f000 b82a 	b.w	80038a0 <free>

0800384c <__errno>:
 800384c:	4b01      	ldr	r3, [pc, #4]	; (8003854 <__errno+0x8>)
 800384e:	6818      	ldr	r0, [r3, #0]
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	2000000c 	.word	0x2000000c

08003858 <__libc_init_array>:
 8003858:	b570      	push	{r4, r5, r6, lr}
 800385a:	2600      	movs	r6, #0
 800385c:	4d0c      	ldr	r5, [pc, #48]	; (8003890 <__libc_init_array+0x38>)
 800385e:	4c0d      	ldr	r4, [pc, #52]	; (8003894 <__libc_init_array+0x3c>)
 8003860:	1b64      	subs	r4, r4, r5
 8003862:	10a4      	asrs	r4, r4, #2
 8003864:	42a6      	cmp	r6, r4
 8003866:	d109      	bne.n	800387c <__libc_init_array+0x24>
 8003868:	f000 fc64 	bl	8004134 <_init>
 800386c:	2600      	movs	r6, #0
 800386e:	4d0a      	ldr	r5, [pc, #40]	; (8003898 <__libc_init_array+0x40>)
 8003870:	4c0a      	ldr	r4, [pc, #40]	; (800389c <__libc_init_array+0x44>)
 8003872:	1b64      	subs	r4, r4, r5
 8003874:	10a4      	asrs	r4, r4, #2
 8003876:	42a6      	cmp	r6, r4
 8003878:	d105      	bne.n	8003886 <__libc_init_array+0x2e>
 800387a:	bd70      	pop	{r4, r5, r6, pc}
 800387c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003880:	4798      	blx	r3
 8003882:	3601      	adds	r6, #1
 8003884:	e7ee      	b.n	8003864 <__libc_init_array+0xc>
 8003886:	f855 3b04 	ldr.w	r3, [r5], #4
 800388a:	4798      	blx	r3
 800388c:	3601      	adds	r6, #1
 800388e:	e7f2      	b.n	8003876 <__libc_init_array+0x1e>
 8003890:	0800491c 	.word	0x0800491c
 8003894:	0800491c 	.word	0x0800491c
 8003898:	0800491c 	.word	0x0800491c
 800389c:	08004924 	.word	0x08004924

080038a0 <free>:
 80038a0:	4b02      	ldr	r3, [pc, #8]	; (80038ac <free+0xc>)
 80038a2:	4601      	mov	r1, r0
 80038a4:	6818      	ldr	r0, [r3, #0]
 80038a6:	f000 b819 	b.w	80038dc <_free_r>
 80038aa:	bf00      	nop
 80038ac:	2000000c 	.word	0x2000000c

080038b0 <memcpy>:
 80038b0:	440a      	add	r2, r1
 80038b2:	4291      	cmp	r1, r2
 80038b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80038b8:	d100      	bne.n	80038bc <memcpy+0xc>
 80038ba:	4770      	bx	lr
 80038bc:	b510      	push	{r4, lr}
 80038be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80038c2:	4291      	cmp	r1, r2
 80038c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80038c8:	d1f9      	bne.n	80038be <memcpy+0xe>
 80038ca:	bd10      	pop	{r4, pc}

080038cc <memset>:
 80038cc:	4603      	mov	r3, r0
 80038ce:	4402      	add	r2, r0
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d100      	bne.n	80038d6 <memset+0xa>
 80038d4:	4770      	bx	lr
 80038d6:	f803 1b01 	strb.w	r1, [r3], #1
 80038da:	e7f9      	b.n	80038d0 <memset+0x4>

080038dc <_free_r>:
 80038dc:	b538      	push	{r3, r4, r5, lr}
 80038de:	4605      	mov	r5, r0
 80038e0:	2900      	cmp	r1, #0
 80038e2:	d043      	beq.n	800396c <_free_r+0x90>
 80038e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038e8:	1f0c      	subs	r4, r1, #4
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	bfb8      	it	lt
 80038ee:	18e4      	addlt	r4, r4, r3
 80038f0:	f000 f8ca 	bl	8003a88 <__malloc_lock>
 80038f4:	4a1e      	ldr	r2, [pc, #120]	; (8003970 <_free_r+0x94>)
 80038f6:	6813      	ldr	r3, [r2, #0]
 80038f8:	4610      	mov	r0, r2
 80038fa:	b933      	cbnz	r3, 800390a <_free_r+0x2e>
 80038fc:	6063      	str	r3, [r4, #4]
 80038fe:	6014      	str	r4, [r2, #0]
 8003900:	4628      	mov	r0, r5
 8003902:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003906:	f000 b8c5 	b.w	8003a94 <__malloc_unlock>
 800390a:	42a3      	cmp	r3, r4
 800390c:	d90a      	bls.n	8003924 <_free_r+0x48>
 800390e:	6821      	ldr	r1, [r4, #0]
 8003910:	1862      	adds	r2, r4, r1
 8003912:	4293      	cmp	r3, r2
 8003914:	bf01      	itttt	eq
 8003916:	681a      	ldreq	r2, [r3, #0]
 8003918:	685b      	ldreq	r3, [r3, #4]
 800391a:	1852      	addeq	r2, r2, r1
 800391c:	6022      	streq	r2, [r4, #0]
 800391e:	6063      	str	r3, [r4, #4]
 8003920:	6004      	str	r4, [r0, #0]
 8003922:	e7ed      	b.n	8003900 <_free_r+0x24>
 8003924:	461a      	mov	r2, r3
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	b10b      	cbz	r3, 800392e <_free_r+0x52>
 800392a:	42a3      	cmp	r3, r4
 800392c:	d9fa      	bls.n	8003924 <_free_r+0x48>
 800392e:	6811      	ldr	r1, [r2, #0]
 8003930:	1850      	adds	r0, r2, r1
 8003932:	42a0      	cmp	r0, r4
 8003934:	d10b      	bne.n	800394e <_free_r+0x72>
 8003936:	6820      	ldr	r0, [r4, #0]
 8003938:	4401      	add	r1, r0
 800393a:	1850      	adds	r0, r2, r1
 800393c:	4283      	cmp	r3, r0
 800393e:	6011      	str	r1, [r2, #0]
 8003940:	d1de      	bne.n	8003900 <_free_r+0x24>
 8003942:	6818      	ldr	r0, [r3, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	4401      	add	r1, r0
 8003948:	6011      	str	r1, [r2, #0]
 800394a:	6053      	str	r3, [r2, #4]
 800394c:	e7d8      	b.n	8003900 <_free_r+0x24>
 800394e:	d902      	bls.n	8003956 <_free_r+0x7a>
 8003950:	230c      	movs	r3, #12
 8003952:	602b      	str	r3, [r5, #0]
 8003954:	e7d4      	b.n	8003900 <_free_r+0x24>
 8003956:	6820      	ldr	r0, [r4, #0]
 8003958:	1821      	adds	r1, r4, r0
 800395a:	428b      	cmp	r3, r1
 800395c:	bf01      	itttt	eq
 800395e:	6819      	ldreq	r1, [r3, #0]
 8003960:	685b      	ldreq	r3, [r3, #4]
 8003962:	1809      	addeq	r1, r1, r0
 8003964:	6021      	streq	r1, [r4, #0]
 8003966:	6063      	str	r3, [r4, #4]
 8003968:	6054      	str	r4, [r2, #4]
 800396a:	e7c9      	b.n	8003900 <_free_r+0x24>
 800396c:	bd38      	pop	{r3, r4, r5, pc}
 800396e:	bf00      	nop
 8003970:	200001a0 	.word	0x200001a0

08003974 <_malloc_r>:
 8003974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003976:	1ccd      	adds	r5, r1, #3
 8003978:	f025 0503 	bic.w	r5, r5, #3
 800397c:	3508      	adds	r5, #8
 800397e:	2d0c      	cmp	r5, #12
 8003980:	bf38      	it	cc
 8003982:	250c      	movcc	r5, #12
 8003984:	2d00      	cmp	r5, #0
 8003986:	4606      	mov	r6, r0
 8003988:	db01      	blt.n	800398e <_malloc_r+0x1a>
 800398a:	42a9      	cmp	r1, r5
 800398c:	d903      	bls.n	8003996 <_malloc_r+0x22>
 800398e:	230c      	movs	r3, #12
 8003990:	6033      	str	r3, [r6, #0]
 8003992:	2000      	movs	r0, #0
 8003994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003996:	f000 f877 	bl	8003a88 <__malloc_lock>
 800399a:	4921      	ldr	r1, [pc, #132]	; (8003a20 <_malloc_r+0xac>)
 800399c:	680a      	ldr	r2, [r1, #0]
 800399e:	4614      	mov	r4, r2
 80039a0:	b99c      	cbnz	r4, 80039ca <_malloc_r+0x56>
 80039a2:	4f20      	ldr	r7, [pc, #128]	; (8003a24 <_malloc_r+0xb0>)
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	b923      	cbnz	r3, 80039b2 <_malloc_r+0x3e>
 80039a8:	4621      	mov	r1, r4
 80039aa:	4630      	mov	r0, r6
 80039ac:	f000 f83c 	bl	8003a28 <_sbrk_r>
 80039b0:	6038      	str	r0, [r7, #0]
 80039b2:	4629      	mov	r1, r5
 80039b4:	4630      	mov	r0, r6
 80039b6:	f000 f837 	bl	8003a28 <_sbrk_r>
 80039ba:	1c43      	adds	r3, r0, #1
 80039bc:	d123      	bne.n	8003a06 <_malloc_r+0x92>
 80039be:	230c      	movs	r3, #12
 80039c0:	4630      	mov	r0, r6
 80039c2:	6033      	str	r3, [r6, #0]
 80039c4:	f000 f866 	bl	8003a94 <__malloc_unlock>
 80039c8:	e7e3      	b.n	8003992 <_malloc_r+0x1e>
 80039ca:	6823      	ldr	r3, [r4, #0]
 80039cc:	1b5b      	subs	r3, r3, r5
 80039ce:	d417      	bmi.n	8003a00 <_malloc_r+0x8c>
 80039d0:	2b0b      	cmp	r3, #11
 80039d2:	d903      	bls.n	80039dc <_malloc_r+0x68>
 80039d4:	6023      	str	r3, [r4, #0]
 80039d6:	441c      	add	r4, r3
 80039d8:	6025      	str	r5, [r4, #0]
 80039da:	e004      	b.n	80039e6 <_malloc_r+0x72>
 80039dc:	6863      	ldr	r3, [r4, #4]
 80039de:	42a2      	cmp	r2, r4
 80039e0:	bf0c      	ite	eq
 80039e2:	600b      	streq	r3, [r1, #0]
 80039e4:	6053      	strne	r3, [r2, #4]
 80039e6:	4630      	mov	r0, r6
 80039e8:	f000 f854 	bl	8003a94 <__malloc_unlock>
 80039ec:	f104 000b 	add.w	r0, r4, #11
 80039f0:	1d23      	adds	r3, r4, #4
 80039f2:	f020 0007 	bic.w	r0, r0, #7
 80039f6:	1ac2      	subs	r2, r0, r3
 80039f8:	d0cc      	beq.n	8003994 <_malloc_r+0x20>
 80039fa:	1a1b      	subs	r3, r3, r0
 80039fc:	50a3      	str	r3, [r4, r2]
 80039fe:	e7c9      	b.n	8003994 <_malloc_r+0x20>
 8003a00:	4622      	mov	r2, r4
 8003a02:	6864      	ldr	r4, [r4, #4]
 8003a04:	e7cc      	b.n	80039a0 <_malloc_r+0x2c>
 8003a06:	1cc4      	adds	r4, r0, #3
 8003a08:	f024 0403 	bic.w	r4, r4, #3
 8003a0c:	42a0      	cmp	r0, r4
 8003a0e:	d0e3      	beq.n	80039d8 <_malloc_r+0x64>
 8003a10:	1a21      	subs	r1, r4, r0
 8003a12:	4630      	mov	r0, r6
 8003a14:	f000 f808 	bl	8003a28 <_sbrk_r>
 8003a18:	3001      	adds	r0, #1
 8003a1a:	d1dd      	bne.n	80039d8 <_malloc_r+0x64>
 8003a1c:	e7cf      	b.n	80039be <_malloc_r+0x4a>
 8003a1e:	bf00      	nop
 8003a20:	200001a0 	.word	0x200001a0
 8003a24:	200001a4 	.word	0x200001a4

08003a28 <_sbrk_r>:
 8003a28:	b538      	push	{r3, r4, r5, lr}
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	4d05      	ldr	r5, [pc, #20]	; (8003a44 <_sbrk_r+0x1c>)
 8003a2e:	4604      	mov	r4, r0
 8003a30:	4608      	mov	r0, r1
 8003a32:	602b      	str	r3, [r5, #0]
 8003a34:	f7fc fdd2 	bl	80005dc <_sbrk>
 8003a38:	1c43      	adds	r3, r0, #1
 8003a3a:	d102      	bne.n	8003a42 <_sbrk_r+0x1a>
 8003a3c:	682b      	ldr	r3, [r5, #0]
 8003a3e:	b103      	cbz	r3, 8003a42 <_sbrk_r+0x1a>
 8003a40:	6023      	str	r3, [r4, #0]
 8003a42:	bd38      	pop	{r3, r4, r5, pc}
 8003a44:	20000248 	.word	0x20000248

08003a48 <siprintf>:
 8003a48:	b40e      	push	{r1, r2, r3}
 8003a4a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003a4e:	b500      	push	{lr}
 8003a50:	b09c      	sub	sp, #112	; 0x70
 8003a52:	ab1d      	add	r3, sp, #116	; 0x74
 8003a54:	9002      	str	r0, [sp, #8]
 8003a56:	9006      	str	r0, [sp, #24]
 8003a58:	9107      	str	r1, [sp, #28]
 8003a5a:	9104      	str	r1, [sp, #16]
 8003a5c:	4808      	ldr	r0, [pc, #32]	; (8003a80 <siprintf+0x38>)
 8003a5e:	4909      	ldr	r1, [pc, #36]	; (8003a84 <siprintf+0x3c>)
 8003a60:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a64:	9105      	str	r1, [sp, #20]
 8003a66:	6800      	ldr	r0, [r0, #0]
 8003a68:	a902      	add	r1, sp, #8
 8003a6a:	9301      	str	r3, [sp, #4]
 8003a6c:	f000 f874 	bl	8003b58 <_svfiprintf_r>
 8003a70:	2200      	movs	r2, #0
 8003a72:	9b02      	ldr	r3, [sp, #8]
 8003a74:	701a      	strb	r2, [r3, #0]
 8003a76:	b01c      	add	sp, #112	; 0x70
 8003a78:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a7c:	b003      	add	sp, #12
 8003a7e:	4770      	bx	lr
 8003a80:	2000000c 	.word	0x2000000c
 8003a84:	ffff0208 	.word	0xffff0208

08003a88 <__malloc_lock>:
 8003a88:	4801      	ldr	r0, [pc, #4]	; (8003a90 <__malloc_lock+0x8>)
 8003a8a:	f000 bafb 	b.w	8004084 <__retarget_lock_acquire_recursive>
 8003a8e:	bf00      	nop
 8003a90:	20000250 	.word	0x20000250

08003a94 <__malloc_unlock>:
 8003a94:	4801      	ldr	r0, [pc, #4]	; (8003a9c <__malloc_unlock+0x8>)
 8003a96:	f000 baf6 	b.w	8004086 <__retarget_lock_release_recursive>
 8003a9a:	bf00      	nop
 8003a9c:	20000250 	.word	0x20000250

08003aa0 <__ssputs_r>:
 8003aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003aa4:	688e      	ldr	r6, [r1, #8]
 8003aa6:	4682      	mov	sl, r0
 8003aa8:	429e      	cmp	r6, r3
 8003aaa:	460c      	mov	r4, r1
 8003aac:	4690      	mov	r8, r2
 8003aae:	461f      	mov	r7, r3
 8003ab0:	d838      	bhi.n	8003b24 <__ssputs_r+0x84>
 8003ab2:	898a      	ldrh	r2, [r1, #12]
 8003ab4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003ab8:	d032      	beq.n	8003b20 <__ssputs_r+0x80>
 8003aba:	6825      	ldr	r5, [r4, #0]
 8003abc:	6909      	ldr	r1, [r1, #16]
 8003abe:	3301      	adds	r3, #1
 8003ac0:	eba5 0901 	sub.w	r9, r5, r1
 8003ac4:	6965      	ldr	r5, [r4, #20]
 8003ac6:	444b      	add	r3, r9
 8003ac8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003acc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003ad0:	106d      	asrs	r5, r5, #1
 8003ad2:	429d      	cmp	r5, r3
 8003ad4:	bf38      	it	cc
 8003ad6:	461d      	movcc	r5, r3
 8003ad8:	0553      	lsls	r3, r2, #21
 8003ada:	d531      	bpl.n	8003b40 <__ssputs_r+0xa0>
 8003adc:	4629      	mov	r1, r5
 8003ade:	f7ff ff49 	bl	8003974 <_malloc_r>
 8003ae2:	4606      	mov	r6, r0
 8003ae4:	b950      	cbnz	r0, 8003afc <__ssputs_r+0x5c>
 8003ae6:	230c      	movs	r3, #12
 8003ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8003aec:	f8ca 3000 	str.w	r3, [sl]
 8003af0:	89a3      	ldrh	r3, [r4, #12]
 8003af2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003af6:	81a3      	strh	r3, [r4, #12]
 8003af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003afc:	464a      	mov	r2, r9
 8003afe:	6921      	ldr	r1, [r4, #16]
 8003b00:	f7ff fed6 	bl	80038b0 <memcpy>
 8003b04:	89a3      	ldrh	r3, [r4, #12]
 8003b06:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003b0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b0e:	81a3      	strh	r3, [r4, #12]
 8003b10:	6126      	str	r6, [r4, #16]
 8003b12:	444e      	add	r6, r9
 8003b14:	6026      	str	r6, [r4, #0]
 8003b16:	463e      	mov	r6, r7
 8003b18:	6165      	str	r5, [r4, #20]
 8003b1a:	eba5 0509 	sub.w	r5, r5, r9
 8003b1e:	60a5      	str	r5, [r4, #8]
 8003b20:	42be      	cmp	r6, r7
 8003b22:	d900      	bls.n	8003b26 <__ssputs_r+0x86>
 8003b24:	463e      	mov	r6, r7
 8003b26:	4632      	mov	r2, r6
 8003b28:	4641      	mov	r1, r8
 8003b2a:	6820      	ldr	r0, [r4, #0]
 8003b2c:	f000 faba 	bl	80040a4 <memmove>
 8003b30:	68a3      	ldr	r3, [r4, #8]
 8003b32:	6822      	ldr	r2, [r4, #0]
 8003b34:	1b9b      	subs	r3, r3, r6
 8003b36:	4432      	add	r2, r6
 8003b38:	2000      	movs	r0, #0
 8003b3a:	60a3      	str	r3, [r4, #8]
 8003b3c:	6022      	str	r2, [r4, #0]
 8003b3e:	e7db      	b.n	8003af8 <__ssputs_r+0x58>
 8003b40:	462a      	mov	r2, r5
 8003b42:	f000 fac9 	bl	80040d8 <_realloc_r>
 8003b46:	4606      	mov	r6, r0
 8003b48:	2800      	cmp	r0, #0
 8003b4a:	d1e1      	bne.n	8003b10 <__ssputs_r+0x70>
 8003b4c:	4650      	mov	r0, sl
 8003b4e:	6921      	ldr	r1, [r4, #16]
 8003b50:	f7ff fec4 	bl	80038dc <_free_r>
 8003b54:	e7c7      	b.n	8003ae6 <__ssputs_r+0x46>
	...

08003b58 <_svfiprintf_r>:
 8003b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b5c:	4698      	mov	r8, r3
 8003b5e:	898b      	ldrh	r3, [r1, #12]
 8003b60:	4607      	mov	r7, r0
 8003b62:	061b      	lsls	r3, r3, #24
 8003b64:	460d      	mov	r5, r1
 8003b66:	4614      	mov	r4, r2
 8003b68:	b09d      	sub	sp, #116	; 0x74
 8003b6a:	d50e      	bpl.n	8003b8a <_svfiprintf_r+0x32>
 8003b6c:	690b      	ldr	r3, [r1, #16]
 8003b6e:	b963      	cbnz	r3, 8003b8a <_svfiprintf_r+0x32>
 8003b70:	2140      	movs	r1, #64	; 0x40
 8003b72:	f7ff feff 	bl	8003974 <_malloc_r>
 8003b76:	6028      	str	r0, [r5, #0]
 8003b78:	6128      	str	r0, [r5, #16]
 8003b7a:	b920      	cbnz	r0, 8003b86 <_svfiprintf_r+0x2e>
 8003b7c:	230c      	movs	r3, #12
 8003b7e:	603b      	str	r3, [r7, #0]
 8003b80:	f04f 30ff 	mov.w	r0, #4294967295
 8003b84:	e0d1      	b.n	8003d2a <_svfiprintf_r+0x1d2>
 8003b86:	2340      	movs	r3, #64	; 0x40
 8003b88:	616b      	str	r3, [r5, #20]
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	9309      	str	r3, [sp, #36]	; 0x24
 8003b8e:	2320      	movs	r3, #32
 8003b90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b94:	2330      	movs	r3, #48	; 0x30
 8003b96:	f04f 0901 	mov.w	r9, #1
 8003b9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b9e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003d44 <_svfiprintf_r+0x1ec>
 8003ba2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ba6:	4623      	mov	r3, r4
 8003ba8:	469a      	mov	sl, r3
 8003baa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003bae:	b10a      	cbz	r2, 8003bb4 <_svfiprintf_r+0x5c>
 8003bb0:	2a25      	cmp	r2, #37	; 0x25
 8003bb2:	d1f9      	bne.n	8003ba8 <_svfiprintf_r+0x50>
 8003bb4:	ebba 0b04 	subs.w	fp, sl, r4
 8003bb8:	d00b      	beq.n	8003bd2 <_svfiprintf_r+0x7a>
 8003bba:	465b      	mov	r3, fp
 8003bbc:	4622      	mov	r2, r4
 8003bbe:	4629      	mov	r1, r5
 8003bc0:	4638      	mov	r0, r7
 8003bc2:	f7ff ff6d 	bl	8003aa0 <__ssputs_r>
 8003bc6:	3001      	adds	r0, #1
 8003bc8:	f000 80aa 	beq.w	8003d20 <_svfiprintf_r+0x1c8>
 8003bcc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003bce:	445a      	add	r2, fp
 8003bd0:	9209      	str	r2, [sp, #36]	; 0x24
 8003bd2:	f89a 3000 	ldrb.w	r3, [sl]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f000 80a2 	beq.w	8003d20 <_svfiprintf_r+0x1c8>
 8003bdc:	2300      	movs	r3, #0
 8003bde:	f04f 32ff 	mov.w	r2, #4294967295
 8003be2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003be6:	f10a 0a01 	add.w	sl, sl, #1
 8003bea:	9304      	str	r3, [sp, #16]
 8003bec:	9307      	str	r3, [sp, #28]
 8003bee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003bf2:	931a      	str	r3, [sp, #104]	; 0x68
 8003bf4:	4654      	mov	r4, sl
 8003bf6:	2205      	movs	r2, #5
 8003bf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bfc:	4851      	ldr	r0, [pc, #324]	; (8003d44 <_svfiprintf_r+0x1ec>)
 8003bfe:	f000 fa43 	bl	8004088 <memchr>
 8003c02:	9a04      	ldr	r2, [sp, #16]
 8003c04:	b9d8      	cbnz	r0, 8003c3e <_svfiprintf_r+0xe6>
 8003c06:	06d0      	lsls	r0, r2, #27
 8003c08:	bf44      	itt	mi
 8003c0a:	2320      	movmi	r3, #32
 8003c0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c10:	0711      	lsls	r1, r2, #28
 8003c12:	bf44      	itt	mi
 8003c14:	232b      	movmi	r3, #43	; 0x2b
 8003c16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c1a:	f89a 3000 	ldrb.w	r3, [sl]
 8003c1e:	2b2a      	cmp	r3, #42	; 0x2a
 8003c20:	d015      	beq.n	8003c4e <_svfiprintf_r+0xf6>
 8003c22:	4654      	mov	r4, sl
 8003c24:	2000      	movs	r0, #0
 8003c26:	f04f 0c0a 	mov.w	ip, #10
 8003c2a:	9a07      	ldr	r2, [sp, #28]
 8003c2c:	4621      	mov	r1, r4
 8003c2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c32:	3b30      	subs	r3, #48	; 0x30
 8003c34:	2b09      	cmp	r3, #9
 8003c36:	d94e      	bls.n	8003cd6 <_svfiprintf_r+0x17e>
 8003c38:	b1b0      	cbz	r0, 8003c68 <_svfiprintf_r+0x110>
 8003c3a:	9207      	str	r2, [sp, #28]
 8003c3c:	e014      	b.n	8003c68 <_svfiprintf_r+0x110>
 8003c3e:	eba0 0308 	sub.w	r3, r0, r8
 8003c42:	fa09 f303 	lsl.w	r3, r9, r3
 8003c46:	4313      	orrs	r3, r2
 8003c48:	46a2      	mov	sl, r4
 8003c4a:	9304      	str	r3, [sp, #16]
 8003c4c:	e7d2      	b.n	8003bf4 <_svfiprintf_r+0x9c>
 8003c4e:	9b03      	ldr	r3, [sp, #12]
 8003c50:	1d19      	adds	r1, r3, #4
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	9103      	str	r1, [sp, #12]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	bfbb      	ittet	lt
 8003c5a:	425b      	neglt	r3, r3
 8003c5c:	f042 0202 	orrlt.w	r2, r2, #2
 8003c60:	9307      	strge	r3, [sp, #28]
 8003c62:	9307      	strlt	r3, [sp, #28]
 8003c64:	bfb8      	it	lt
 8003c66:	9204      	strlt	r2, [sp, #16]
 8003c68:	7823      	ldrb	r3, [r4, #0]
 8003c6a:	2b2e      	cmp	r3, #46	; 0x2e
 8003c6c:	d10c      	bne.n	8003c88 <_svfiprintf_r+0x130>
 8003c6e:	7863      	ldrb	r3, [r4, #1]
 8003c70:	2b2a      	cmp	r3, #42	; 0x2a
 8003c72:	d135      	bne.n	8003ce0 <_svfiprintf_r+0x188>
 8003c74:	9b03      	ldr	r3, [sp, #12]
 8003c76:	3402      	adds	r4, #2
 8003c78:	1d1a      	adds	r2, r3, #4
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	9203      	str	r2, [sp, #12]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	bfb8      	it	lt
 8003c82:	f04f 33ff 	movlt.w	r3, #4294967295
 8003c86:	9305      	str	r3, [sp, #20]
 8003c88:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003d54 <_svfiprintf_r+0x1fc>
 8003c8c:	2203      	movs	r2, #3
 8003c8e:	4650      	mov	r0, sl
 8003c90:	7821      	ldrb	r1, [r4, #0]
 8003c92:	f000 f9f9 	bl	8004088 <memchr>
 8003c96:	b140      	cbz	r0, 8003caa <_svfiprintf_r+0x152>
 8003c98:	2340      	movs	r3, #64	; 0x40
 8003c9a:	eba0 000a 	sub.w	r0, r0, sl
 8003c9e:	fa03 f000 	lsl.w	r0, r3, r0
 8003ca2:	9b04      	ldr	r3, [sp, #16]
 8003ca4:	3401      	adds	r4, #1
 8003ca6:	4303      	orrs	r3, r0
 8003ca8:	9304      	str	r3, [sp, #16]
 8003caa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cae:	2206      	movs	r2, #6
 8003cb0:	4825      	ldr	r0, [pc, #148]	; (8003d48 <_svfiprintf_r+0x1f0>)
 8003cb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003cb6:	f000 f9e7 	bl	8004088 <memchr>
 8003cba:	2800      	cmp	r0, #0
 8003cbc:	d038      	beq.n	8003d30 <_svfiprintf_r+0x1d8>
 8003cbe:	4b23      	ldr	r3, [pc, #140]	; (8003d4c <_svfiprintf_r+0x1f4>)
 8003cc0:	bb1b      	cbnz	r3, 8003d0a <_svfiprintf_r+0x1b2>
 8003cc2:	9b03      	ldr	r3, [sp, #12]
 8003cc4:	3307      	adds	r3, #7
 8003cc6:	f023 0307 	bic.w	r3, r3, #7
 8003cca:	3308      	adds	r3, #8
 8003ccc:	9303      	str	r3, [sp, #12]
 8003cce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cd0:	4433      	add	r3, r6
 8003cd2:	9309      	str	r3, [sp, #36]	; 0x24
 8003cd4:	e767      	b.n	8003ba6 <_svfiprintf_r+0x4e>
 8003cd6:	460c      	mov	r4, r1
 8003cd8:	2001      	movs	r0, #1
 8003cda:	fb0c 3202 	mla	r2, ip, r2, r3
 8003cde:	e7a5      	b.n	8003c2c <_svfiprintf_r+0xd4>
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	f04f 0c0a 	mov.w	ip, #10
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	3401      	adds	r4, #1
 8003cea:	9305      	str	r3, [sp, #20]
 8003cec:	4620      	mov	r0, r4
 8003cee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003cf2:	3a30      	subs	r2, #48	; 0x30
 8003cf4:	2a09      	cmp	r2, #9
 8003cf6:	d903      	bls.n	8003d00 <_svfiprintf_r+0x1a8>
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d0c5      	beq.n	8003c88 <_svfiprintf_r+0x130>
 8003cfc:	9105      	str	r1, [sp, #20]
 8003cfe:	e7c3      	b.n	8003c88 <_svfiprintf_r+0x130>
 8003d00:	4604      	mov	r4, r0
 8003d02:	2301      	movs	r3, #1
 8003d04:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d08:	e7f0      	b.n	8003cec <_svfiprintf_r+0x194>
 8003d0a:	ab03      	add	r3, sp, #12
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	462a      	mov	r2, r5
 8003d10:	4638      	mov	r0, r7
 8003d12:	4b0f      	ldr	r3, [pc, #60]	; (8003d50 <_svfiprintf_r+0x1f8>)
 8003d14:	a904      	add	r1, sp, #16
 8003d16:	f3af 8000 	nop.w
 8003d1a:	1c42      	adds	r2, r0, #1
 8003d1c:	4606      	mov	r6, r0
 8003d1e:	d1d6      	bne.n	8003cce <_svfiprintf_r+0x176>
 8003d20:	89ab      	ldrh	r3, [r5, #12]
 8003d22:	065b      	lsls	r3, r3, #25
 8003d24:	f53f af2c 	bmi.w	8003b80 <_svfiprintf_r+0x28>
 8003d28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d2a:	b01d      	add	sp, #116	; 0x74
 8003d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d30:	ab03      	add	r3, sp, #12
 8003d32:	9300      	str	r3, [sp, #0]
 8003d34:	462a      	mov	r2, r5
 8003d36:	4638      	mov	r0, r7
 8003d38:	4b05      	ldr	r3, [pc, #20]	; (8003d50 <_svfiprintf_r+0x1f8>)
 8003d3a:	a904      	add	r1, sp, #16
 8003d3c:	f000 f87c 	bl	8003e38 <_printf_i>
 8003d40:	e7eb      	b.n	8003d1a <_svfiprintf_r+0x1c2>
 8003d42:	bf00      	nop
 8003d44:	080048e8 	.word	0x080048e8
 8003d48:	080048f2 	.word	0x080048f2
 8003d4c:	00000000 	.word	0x00000000
 8003d50:	08003aa1 	.word	0x08003aa1
 8003d54:	080048ee 	.word	0x080048ee

08003d58 <_printf_common>:
 8003d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d5c:	4616      	mov	r6, r2
 8003d5e:	4699      	mov	r9, r3
 8003d60:	688a      	ldr	r2, [r1, #8]
 8003d62:	690b      	ldr	r3, [r1, #16]
 8003d64:	4607      	mov	r7, r0
 8003d66:	4293      	cmp	r3, r2
 8003d68:	bfb8      	it	lt
 8003d6a:	4613      	movlt	r3, r2
 8003d6c:	6033      	str	r3, [r6, #0]
 8003d6e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d72:	460c      	mov	r4, r1
 8003d74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d78:	b10a      	cbz	r2, 8003d7e <_printf_common+0x26>
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	6033      	str	r3, [r6, #0]
 8003d7e:	6823      	ldr	r3, [r4, #0]
 8003d80:	0699      	lsls	r1, r3, #26
 8003d82:	bf42      	ittt	mi
 8003d84:	6833      	ldrmi	r3, [r6, #0]
 8003d86:	3302      	addmi	r3, #2
 8003d88:	6033      	strmi	r3, [r6, #0]
 8003d8a:	6825      	ldr	r5, [r4, #0]
 8003d8c:	f015 0506 	ands.w	r5, r5, #6
 8003d90:	d106      	bne.n	8003da0 <_printf_common+0x48>
 8003d92:	f104 0a19 	add.w	sl, r4, #25
 8003d96:	68e3      	ldr	r3, [r4, #12]
 8003d98:	6832      	ldr	r2, [r6, #0]
 8003d9a:	1a9b      	subs	r3, r3, r2
 8003d9c:	42ab      	cmp	r3, r5
 8003d9e:	dc28      	bgt.n	8003df2 <_printf_common+0x9a>
 8003da0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003da4:	1e13      	subs	r3, r2, #0
 8003da6:	6822      	ldr	r2, [r4, #0]
 8003da8:	bf18      	it	ne
 8003daa:	2301      	movne	r3, #1
 8003dac:	0692      	lsls	r2, r2, #26
 8003dae:	d42d      	bmi.n	8003e0c <_printf_common+0xb4>
 8003db0:	4649      	mov	r1, r9
 8003db2:	4638      	mov	r0, r7
 8003db4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003db8:	47c0      	blx	r8
 8003dba:	3001      	adds	r0, #1
 8003dbc:	d020      	beq.n	8003e00 <_printf_common+0xa8>
 8003dbe:	6823      	ldr	r3, [r4, #0]
 8003dc0:	68e5      	ldr	r5, [r4, #12]
 8003dc2:	f003 0306 	and.w	r3, r3, #6
 8003dc6:	2b04      	cmp	r3, #4
 8003dc8:	bf18      	it	ne
 8003dca:	2500      	movne	r5, #0
 8003dcc:	6832      	ldr	r2, [r6, #0]
 8003dce:	f04f 0600 	mov.w	r6, #0
 8003dd2:	68a3      	ldr	r3, [r4, #8]
 8003dd4:	bf08      	it	eq
 8003dd6:	1aad      	subeq	r5, r5, r2
 8003dd8:	6922      	ldr	r2, [r4, #16]
 8003dda:	bf08      	it	eq
 8003ddc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003de0:	4293      	cmp	r3, r2
 8003de2:	bfc4      	itt	gt
 8003de4:	1a9b      	subgt	r3, r3, r2
 8003de6:	18ed      	addgt	r5, r5, r3
 8003de8:	341a      	adds	r4, #26
 8003dea:	42b5      	cmp	r5, r6
 8003dec:	d11a      	bne.n	8003e24 <_printf_common+0xcc>
 8003dee:	2000      	movs	r0, #0
 8003df0:	e008      	b.n	8003e04 <_printf_common+0xac>
 8003df2:	2301      	movs	r3, #1
 8003df4:	4652      	mov	r2, sl
 8003df6:	4649      	mov	r1, r9
 8003df8:	4638      	mov	r0, r7
 8003dfa:	47c0      	blx	r8
 8003dfc:	3001      	adds	r0, #1
 8003dfe:	d103      	bne.n	8003e08 <_printf_common+0xb0>
 8003e00:	f04f 30ff 	mov.w	r0, #4294967295
 8003e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e08:	3501      	adds	r5, #1
 8003e0a:	e7c4      	b.n	8003d96 <_printf_common+0x3e>
 8003e0c:	2030      	movs	r0, #48	; 0x30
 8003e0e:	18e1      	adds	r1, r4, r3
 8003e10:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e14:	1c5a      	adds	r2, r3, #1
 8003e16:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e1a:	4422      	add	r2, r4
 8003e1c:	3302      	adds	r3, #2
 8003e1e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e22:	e7c5      	b.n	8003db0 <_printf_common+0x58>
 8003e24:	2301      	movs	r3, #1
 8003e26:	4622      	mov	r2, r4
 8003e28:	4649      	mov	r1, r9
 8003e2a:	4638      	mov	r0, r7
 8003e2c:	47c0      	blx	r8
 8003e2e:	3001      	adds	r0, #1
 8003e30:	d0e6      	beq.n	8003e00 <_printf_common+0xa8>
 8003e32:	3601      	adds	r6, #1
 8003e34:	e7d9      	b.n	8003dea <_printf_common+0x92>
	...

08003e38 <_printf_i>:
 8003e38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e3c:	460c      	mov	r4, r1
 8003e3e:	7e27      	ldrb	r7, [r4, #24]
 8003e40:	4691      	mov	r9, r2
 8003e42:	2f78      	cmp	r7, #120	; 0x78
 8003e44:	4680      	mov	r8, r0
 8003e46:	469a      	mov	sl, r3
 8003e48:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003e4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e4e:	d807      	bhi.n	8003e60 <_printf_i+0x28>
 8003e50:	2f62      	cmp	r7, #98	; 0x62
 8003e52:	d80a      	bhi.n	8003e6a <_printf_i+0x32>
 8003e54:	2f00      	cmp	r7, #0
 8003e56:	f000 80d9 	beq.w	800400c <_printf_i+0x1d4>
 8003e5a:	2f58      	cmp	r7, #88	; 0x58
 8003e5c:	f000 80a4 	beq.w	8003fa8 <_printf_i+0x170>
 8003e60:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003e64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003e68:	e03a      	b.n	8003ee0 <_printf_i+0xa8>
 8003e6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003e6e:	2b15      	cmp	r3, #21
 8003e70:	d8f6      	bhi.n	8003e60 <_printf_i+0x28>
 8003e72:	a001      	add	r0, pc, #4	; (adr r0, 8003e78 <_printf_i+0x40>)
 8003e74:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003e78:	08003ed1 	.word	0x08003ed1
 8003e7c:	08003ee5 	.word	0x08003ee5
 8003e80:	08003e61 	.word	0x08003e61
 8003e84:	08003e61 	.word	0x08003e61
 8003e88:	08003e61 	.word	0x08003e61
 8003e8c:	08003e61 	.word	0x08003e61
 8003e90:	08003ee5 	.word	0x08003ee5
 8003e94:	08003e61 	.word	0x08003e61
 8003e98:	08003e61 	.word	0x08003e61
 8003e9c:	08003e61 	.word	0x08003e61
 8003ea0:	08003e61 	.word	0x08003e61
 8003ea4:	08003ff3 	.word	0x08003ff3
 8003ea8:	08003f15 	.word	0x08003f15
 8003eac:	08003fd5 	.word	0x08003fd5
 8003eb0:	08003e61 	.word	0x08003e61
 8003eb4:	08003e61 	.word	0x08003e61
 8003eb8:	08004015 	.word	0x08004015
 8003ebc:	08003e61 	.word	0x08003e61
 8003ec0:	08003f15 	.word	0x08003f15
 8003ec4:	08003e61 	.word	0x08003e61
 8003ec8:	08003e61 	.word	0x08003e61
 8003ecc:	08003fdd 	.word	0x08003fdd
 8003ed0:	680b      	ldr	r3, [r1, #0]
 8003ed2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003ed6:	1d1a      	adds	r2, r3, #4
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	600a      	str	r2, [r1, #0]
 8003edc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e0a4      	b.n	800402e <_printf_i+0x1f6>
 8003ee4:	6825      	ldr	r5, [r4, #0]
 8003ee6:	6808      	ldr	r0, [r1, #0]
 8003ee8:	062e      	lsls	r6, r5, #24
 8003eea:	f100 0304 	add.w	r3, r0, #4
 8003eee:	d50a      	bpl.n	8003f06 <_printf_i+0xce>
 8003ef0:	6805      	ldr	r5, [r0, #0]
 8003ef2:	600b      	str	r3, [r1, #0]
 8003ef4:	2d00      	cmp	r5, #0
 8003ef6:	da03      	bge.n	8003f00 <_printf_i+0xc8>
 8003ef8:	232d      	movs	r3, #45	; 0x2d
 8003efa:	426d      	negs	r5, r5
 8003efc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f00:	230a      	movs	r3, #10
 8003f02:	485e      	ldr	r0, [pc, #376]	; (800407c <_printf_i+0x244>)
 8003f04:	e019      	b.n	8003f3a <_printf_i+0x102>
 8003f06:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003f0a:	6805      	ldr	r5, [r0, #0]
 8003f0c:	600b      	str	r3, [r1, #0]
 8003f0e:	bf18      	it	ne
 8003f10:	b22d      	sxthne	r5, r5
 8003f12:	e7ef      	b.n	8003ef4 <_printf_i+0xbc>
 8003f14:	680b      	ldr	r3, [r1, #0]
 8003f16:	6825      	ldr	r5, [r4, #0]
 8003f18:	1d18      	adds	r0, r3, #4
 8003f1a:	6008      	str	r0, [r1, #0]
 8003f1c:	0628      	lsls	r0, r5, #24
 8003f1e:	d501      	bpl.n	8003f24 <_printf_i+0xec>
 8003f20:	681d      	ldr	r5, [r3, #0]
 8003f22:	e002      	b.n	8003f2a <_printf_i+0xf2>
 8003f24:	0669      	lsls	r1, r5, #25
 8003f26:	d5fb      	bpl.n	8003f20 <_printf_i+0xe8>
 8003f28:	881d      	ldrh	r5, [r3, #0]
 8003f2a:	2f6f      	cmp	r7, #111	; 0x6f
 8003f2c:	bf0c      	ite	eq
 8003f2e:	2308      	moveq	r3, #8
 8003f30:	230a      	movne	r3, #10
 8003f32:	4852      	ldr	r0, [pc, #328]	; (800407c <_printf_i+0x244>)
 8003f34:	2100      	movs	r1, #0
 8003f36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f3a:	6866      	ldr	r6, [r4, #4]
 8003f3c:	2e00      	cmp	r6, #0
 8003f3e:	bfa8      	it	ge
 8003f40:	6821      	ldrge	r1, [r4, #0]
 8003f42:	60a6      	str	r6, [r4, #8]
 8003f44:	bfa4      	itt	ge
 8003f46:	f021 0104 	bicge.w	r1, r1, #4
 8003f4a:	6021      	strge	r1, [r4, #0]
 8003f4c:	b90d      	cbnz	r5, 8003f52 <_printf_i+0x11a>
 8003f4e:	2e00      	cmp	r6, #0
 8003f50:	d04d      	beq.n	8003fee <_printf_i+0x1b6>
 8003f52:	4616      	mov	r6, r2
 8003f54:	fbb5 f1f3 	udiv	r1, r5, r3
 8003f58:	fb03 5711 	mls	r7, r3, r1, r5
 8003f5c:	5dc7      	ldrb	r7, [r0, r7]
 8003f5e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003f62:	462f      	mov	r7, r5
 8003f64:	42bb      	cmp	r3, r7
 8003f66:	460d      	mov	r5, r1
 8003f68:	d9f4      	bls.n	8003f54 <_printf_i+0x11c>
 8003f6a:	2b08      	cmp	r3, #8
 8003f6c:	d10b      	bne.n	8003f86 <_printf_i+0x14e>
 8003f6e:	6823      	ldr	r3, [r4, #0]
 8003f70:	07df      	lsls	r7, r3, #31
 8003f72:	d508      	bpl.n	8003f86 <_printf_i+0x14e>
 8003f74:	6923      	ldr	r3, [r4, #16]
 8003f76:	6861      	ldr	r1, [r4, #4]
 8003f78:	4299      	cmp	r1, r3
 8003f7a:	bfde      	ittt	le
 8003f7c:	2330      	movle	r3, #48	; 0x30
 8003f7e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003f82:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003f86:	1b92      	subs	r2, r2, r6
 8003f88:	6122      	str	r2, [r4, #16]
 8003f8a:	464b      	mov	r3, r9
 8003f8c:	4621      	mov	r1, r4
 8003f8e:	4640      	mov	r0, r8
 8003f90:	f8cd a000 	str.w	sl, [sp]
 8003f94:	aa03      	add	r2, sp, #12
 8003f96:	f7ff fedf 	bl	8003d58 <_printf_common>
 8003f9a:	3001      	adds	r0, #1
 8003f9c:	d14c      	bne.n	8004038 <_printf_i+0x200>
 8003f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8003fa2:	b004      	add	sp, #16
 8003fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fa8:	4834      	ldr	r0, [pc, #208]	; (800407c <_printf_i+0x244>)
 8003faa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003fae:	680e      	ldr	r6, [r1, #0]
 8003fb0:	6823      	ldr	r3, [r4, #0]
 8003fb2:	f856 5b04 	ldr.w	r5, [r6], #4
 8003fb6:	061f      	lsls	r7, r3, #24
 8003fb8:	600e      	str	r6, [r1, #0]
 8003fba:	d514      	bpl.n	8003fe6 <_printf_i+0x1ae>
 8003fbc:	07d9      	lsls	r1, r3, #31
 8003fbe:	bf44      	itt	mi
 8003fc0:	f043 0320 	orrmi.w	r3, r3, #32
 8003fc4:	6023      	strmi	r3, [r4, #0]
 8003fc6:	b91d      	cbnz	r5, 8003fd0 <_printf_i+0x198>
 8003fc8:	6823      	ldr	r3, [r4, #0]
 8003fca:	f023 0320 	bic.w	r3, r3, #32
 8003fce:	6023      	str	r3, [r4, #0]
 8003fd0:	2310      	movs	r3, #16
 8003fd2:	e7af      	b.n	8003f34 <_printf_i+0xfc>
 8003fd4:	6823      	ldr	r3, [r4, #0]
 8003fd6:	f043 0320 	orr.w	r3, r3, #32
 8003fda:	6023      	str	r3, [r4, #0]
 8003fdc:	2378      	movs	r3, #120	; 0x78
 8003fde:	4828      	ldr	r0, [pc, #160]	; (8004080 <_printf_i+0x248>)
 8003fe0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003fe4:	e7e3      	b.n	8003fae <_printf_i+0x176>
 8003fe6:	065e      	lsls	r6, r3, #25
 8003fe8:	bf48      	it	mi
 8003fea:	b2ad      	uxthmi	r5, r5
 8003fec:	e7e6      	b.n	8003fbc <_printf_i+0x184>
 8003fee:	4616      	mov	r6, r2
 8003ff0:	e7bb      	b.n	8003f6a <_printf_i+0x132>
 8003ff2:	680b      	ldr	r3, [r1, #0]
 8003ff4:	6826      	ldr	r6, [r4, #0]
 8003ff6:	1d1d      	adds	r5, r3, #4
 8003ff8:	6960      	ldr	r0, [r4, #20]
 8003ffa:	600d      	str	r5, [r1, #0]
 8003ffc:	0635      	lsls	r5, r6, #24
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	d501      	bpl.n	8004006 <_printf_i+0x1ce>
 8004002:	6018      	str	r0, [r3, #0]
 8004004:	e002      	b.n	800400c <_printf_i+0x1d4>
 8004006:	0671      	lsls	r1, r6, #25
 8004008:	d5fb      	bpl.n	8004002 <_printf_i+0x1ca>
 800400a:	8018      	strh	r0, [r3, #0]
 800400c:	2300      	movs	r3, #0
 800400e:	4616      	mov	r6, r2
 8004010:	6123      	str	r3, [r4, #16]
 8004012:	e7ba      	b.n	8003f8a <_printf_i+0x152>
 8004014:	680b      	ldr	r3, [r1, #0]
 8004016:	1d1a      	adds	r2, r3, #4
 8004018:	600a      	str	r2, [r1, #0]
 800401a:	681e      	ldr	r6, [r3, #0]
 800401c:	2100      	movs	r1, #0
 800401e:	4630      	mov	r0, r6
 8004020:	6862      	ldr	r2, [r4, #4]
 8004022:	f000 f831 	bl	8004088 <memchr>
 8004026:	b108      	cbz	r0, 800402c <_printf_i+0x1f4>
 8004028:	1b80      	subs	r0, r0, r6
 800402a:	6060      	str	r0, [r4, #4]
 800402c:	6863      	ldr	r3, [r4, #4]
 800402e:	6123      	str	r3, [r4, #16]
 8004030:	2300      	movs	r3, #0
 8004032:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004036:	e7a8      	b.n	8003f8a <_printf_i+0x152>
 8004038:	4632      	mov	r2, r6
 800403a:	4649      	mov	r1, r9
 800403c:	4640      	mov	r0, r8
 800403e:	6923      	ldr	r3, [r4, #16]
 8004040:	47d0      	blx	sl
 8004042:	3001      	adds	r0, #1
 8004044:	d0ab      	beq.n	8003f9e <_printf_i+0x166>
 8004046:	6823      	ldr	r3, [r4, #0]
 8004048:	079b      	lsls	r3, r3, #30
 800404a:	d413      	bmi.n	8004074 <_printf_i+0x23c>
 800404c:	68e0      	ldr	r0, [r4, #12]
 800404e:	9b03      	ldr	r3, [sp, #12]
 8004050:	4298      	cmp	r0, r3
 8004052:	bfb8      	it	lt
 8004054:	4618      	movlt	r0, r3
 8004056:	e7a4      	b.n	8003fa2 <_printf_i+0x16a>
 8004058:	2301      	movs	r3, #1
 800405a:	4632      	mov	r2, r6
 800405c:	4649      	mov	r1, r9
 800405e:	4640      	mov	r0, r8
 8004060:	47d0      	blx	sl
 8004062:	3001      	adds	r0, #1
 8004064:	d09b      	beq.n	8003f9e <_printf_i+0x166>
 8004066:	3501      	adds	r5, #1
 8004068:	68e3      	ldr	r3, [r4, #12]
 800406a:	9903      	ldr	r1, [sp, #12]
 800406c:	1a5b      	subs	r3, r3, r1
 800406e:	42ab      	cmp	r3, r5
 8004070:	dcf2      	bgt.n	8004058 <_printf_i+0x220>
 8004072:	e7eb      	b.n	800404c <_printf_i+0x214>
 8004074:	2500      	movs	r5, #0
 8004076:	f104 0619 	add.w	r6, r4, #25
 800407a:	e7f5      	b.n	8004068 <_printf_i+0x230>
 800407c:	080048f9 	.word	0x080048f9
 8004080:	0800490a 	.word	0x0800490a

08004084 <__retarget_lock_acquire_recursive>:
 8004084:	4770      	bx	lr

08004086 <__retarget_lock_release_recursive>:
 8004086:	4770      	bx	lr

08004088 <memchr>:
 8004088:	4603      	mov	r3, r0
 800408a:	b510      	push	{r4, lr}
 800408c:	b2c9      	uxtb	r1, r1
 800408e:	4402      	add	r2, r0
 8004090:	4293      	cmp	r3, r2
 8004092:	4618      	mov	r0, r3
 8004094:	d101      	bne.n	800409a <memchr+0x12>
 8004096:	2000      	movs	r0, #0
 8004098:	e003      	b.n	80040a2 <memchr+0x1a>
 800409a:	7804      	ldrb	r4, [r0, #0]
 800409c:	3301      	adds	r3, #1
 800409e:	428c      	cmp	r4, r1
 80040a0:	d1f6      	bne.n	8004090 <memchr+0x8>
 80040a2:	bd10      	pop	{r4, pc}

080040a4 <memmove>:
 80040a4:	4288      	cmp	r0, r1
 80040a6:	b510      	push	{r4, lr}
 80040a8:	eb01 0402 	add.w	r4, r1, r2
 80040ac:	d902      	bls.n	80040b4 <memmove+0x10>
 80040ae:	4284      	cmp	r4, r0
 80040b0:	4623      	mov	r3, r4
 80040b2:	d807      	bhi.n	80040c4 <memmove+0x20>
 80040b4:	1e43      	subs	r3, r0, #1
 80040b6:	42a1      	cmp	r1, r4
 80040b8:	d008      	beq.n	80040cc <memmove+0x28>
 80040ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80040be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80040c2:	e7f8      	b.n	80040b6 <memmove+0x12>
 80040c4:	4601      	mov	r1, r0
 80040c6:	4402      	add	r2, r0
 80040c8:	428a      	cmp	r2, r1
 80040ca:	d100      	bne.n	80040ce <memmove+0x2a>
 80040cc:	bd10      	pop	{r4, pc}
 80040ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80040d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80040d6:	e7f7      	b.n	80040c8 <memmove+0x24>

080040d8 <_realloc_r>:
 80040d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040da:	4607      	mov	r7, r0
 80040dc:	4614      	mov	r4, r2
 80040de:	460e      	mov	r6, r1
 80040e0:	b921      	cbnz	r1, 80040ec <_realloc_r+0x14>
 80040e2:	4611      	mov	r1, r2
 80040e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80040e8:	f7ff bc44 	b.w	8003974 <_malloc_r>
 80040ec:	b922      	cbnz	r2, 80040f8 <_realloc_r+0x20>
 80040ee:	f7ff fbf5 	bl	80038dc <_free_r>
 80040f2:	4625      	mov	r5, r4
 80040f4:	4628      	mov	r0, r5
 80040f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040f8:	f000 f814 	bl	8004124 <_malloc_usable_size_r>
 80040fc:	42a0      	cmp	r0, r4
 80040fe:	d20f      	bcs.n	8004120 <_realloc_r+0x48>
 8004100:	4621      	mov	r1, r4
 8004102:	4638      	mov	r0, r7
 8004104:	f7ff fc36 	bl	8003974 <_malloc_r>
 8004108:	4605      	mov	r5, r0
 800410a:	2800      	cmp	r0, #0
 800410c:	d0f2      	beq.n	80040f4 <_realloc_r+0x1c>
 800410e:	4631      	mov	r1, r6
 8004110:	4622      	mov	r2, r4
 8004112:	f7ff fbcd 	bl	80038b0 <memcpy>
 8004116:	4631      	mov	r1, r6
 8004118:	4638      	mov	r0, r7
 800411a:	f7ff fbdf 	bl	80038dc <_free_r>
 800411e:	e7e9      	b.n	80040f4 <_realloc_r+0x1c>
 8004120:	4635      	mov	r5, r6
 8004122:	e7e7      	b.n	80040f4 <_realloc_r+0x1c>

08004124 <_malloc_usable_size_r>:
 8004124:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004128:	1f18      	subs	r0, r3, #4
 800412a:	2b00      	cmp	r3, #0
 800412c:	bfbc      	itt	lt
 800412e:	580b      	ldrlt	r3, [r1, r0]
 8004130:	18c0      	addlt	r0, r0, r3
 8004132:	4770      	bx	lr

08004134 <_init>:
 8004134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004136:	bf00      	nop
 8004138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800413a:	bc08      	pop	{r3}
 800413c:	469e      	mov	lr, r3
 800413e:	4770      	bx	lr

08004140 <_fini>:
 8004140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004142:	bf00      	nop
 8004144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004146:	bc08      	pop	{r3}
 8004148:	469e      	mov	lr, r3
 800414a:	4770      	bx	lr
